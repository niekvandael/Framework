/**
 * GENERATED BY NVD ON 20-05-2014 15:32:14
 * 
 * Package : libraries Filename : combobox.js
 */

window.COMBOBOX = {};

COMBOBOX.testje = function(){
	alert("in testje");
	return "Niek, Jan2";
};

// /////////////////////
// Fixed values
// /////////////////////
COMBOBOX.getCSVDelimiterValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : ";",
			id : ";"
		}, {
			name : ",",
			id : ","
		} ]
	});
};
COMBOBOX.AUTH_LVLS = function() {
	return new dojo.store.Memory({
		data : [ {
			name : "None",
			id : 0
		}, {
			name : "Read",
			id : 1
		}, {
			name : "Read/update",
			id : 2
		}, {
			name : "Read/update/create",
			id : 3
		}, {
			name : "All",
			id : 4
		} ]
	});
};
COMBOBOX.BLANC_YES_NO = function() {
	return new dojo.store.Memory({
		data : [ {
			name : " ",
			id : " "
		}, {
			name : LANGUAGE.YES,
			id : "Y"
		}, {
			name : LANGUAGE.NO,
			id : "N"
		} ]
	});
};
COMBOBOX.DEFAULT_0_9 = function() {
	return new dojo.store.Memory({
		data : [ {
			name : "0 (" + LANGUAGE.HIGH + ")",
			id : "0"
		}, {
			name : "1",
			id : "1"
		}, {
			name : "2",
			id : "2"
		}, {
			name : "3",
			id : "3"
		}, {
			name : "4",
			id : "4"
		}, {
			name : "5",
			id : "5"
		}, {
			name : "6",
			id : "6"
		}, {
			name : "7",
			id : "7"
		}, {
			name : "8",
			id : "8"
		}, {
			name : "9 (" + LANGUAGE.LOW + ")",
			id : "9"
		} ]
	});
};
COMBOBOX.DEFAULT_YES_NO = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.YES,
			id : "Y"
		}, {
			name : LANGUAGE.NO,
			id : "N"
		} ]
	});
};
COMBOBOX.getAccepted_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getAccnt_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FMS_ACCOUNT,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_GENERIC_ACCOUNT,
			id : 'G'
		}, {
			name : LANGUAGE.COMBOVALUE_SUBBOOK,
			id : 'S'
		} ]
	});
};
COMBOBOX.getActual_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getAct_pass_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ACTIVE,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_PASSIVE,
			id : 'P'
		} ]
	});
};
COMBOBOX.getAddition_qty_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getAddress_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_POSTBOX_ADDRESS,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_OFFICE_ADDRESS,
			id : 'O'
		} ]
	});
};
COMBOBOX.getAddress_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ALTERNATIVE_ADDRESS,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_LOADING_ADDRESS,
			id : 'L'
		}, {
			name : LANGUAGE.COMBOVALUE_DISCHARGE_ADDRESS,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_PRESENTATION_ADDRESS,
			id : 'P'
		} ]
	});
};
COMBOBOX.getAdd_substr_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ADD,
			id : '+'
		}, {
			name : LANGUAGE.COMBOVALUE_SUBSTRACT,
			id : '-'
		} ]
	});
};
COMBOBOX.getAdvice_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ATTACHED_LETTER,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_PROOF_OF_STRING_QLTY,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_REACTION_DEVIATION,
			id : 'R'
		} ]
	});
};
COMBOBOX.getAgent_doc_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getAgent_doc_tp_sendValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getAgent_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getAgreed_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getAida_statusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FAILURE,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_INITIAL,
			id : 'I'
		} ]
	});
};
COMBOBOX.getAltertxt_cnf_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getAna_fees_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CUSTOMER,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_OWN_COMPANY,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_SUPPLIER,
			id : 'S'
		} ]
	});
};
COMBOBOX.getAna_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getAna_order_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getAutom_wash_out_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getBal_diff_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getBal_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getBal_result_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BALANCE_ACCOUNTS,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_VARIOUS_ACCOUNTS,
			id : 'V'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODS,
			id : 'G'
		}, {
			name : LANGUAGE.COMBOVALUE_RIGHTS,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_LIABILITIES,
			id : 'L'
		} ]
	});
};
COMBOBOX.getBank_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getBatch_fms_changbleValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getBatch_fms_imm_procValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getBatch_fms_tp_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_LEDGER_MUTATIONS,
			id : 'L'
		}, {
			name : LANGUAGE.COMBOVALUE_SUBLDG_MUT_D_C_R_BATCH,
			id : 'S'
		} ]
	});
};
COMBOBOX.getBroker_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getBudget_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SALES,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_VESSEL,
			id : 'V'
		} ]
	});
};
COMBOBOX.getBuyer_closed_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getBuyer_doc_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getBuyer_doc_tp_sendValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getBuyer_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getBuy_back_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};

COMBOBOX.getBuy_sell_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BUY,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_SELL,
			id : 'S'
		} ]
	});
};
COMBOBOX.getCalc_method_wprValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_DERIVED,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_BASIS,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_DERIVED_VIA_PRODUCT,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_FIXED,
			id : 'F'
		} ]
	});
};
COMBOBOX.getCalc_period_cdValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_WEEKLY,
			id : 'W'
		}, {
			name : LANGUAGE.COMBOVALUE_DAILY,
			id : 'D'
		} ]
	});
};
COMBOBOX.getCertificate_calc_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CALCULATED,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_DEFAULT,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getCertificate_systemValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_ISCC,
			id : 'ISCC'
		}, {
			name : LANGUAGE.COMBOVALUE_REDCERT,
			id : 'REDcert'
		}, {
			name : LANGUAGE.COMBOVALUE_REDCERT_DE,
			id : 'REDcert-DE'
		}, {
			name : LANGUAGE.COMBOVALUE_REDCERT_EU,
			id : 'REDcert-EU'
		}, {
			name : LANGUAGE.COMBOVALUE_2BASVS,
			id : '2BaSvs'
		}, {
			name : LANGUAGE.COMBOVALUE_ISCC_DE,
			id : 'ISCC-DE'
		}, {
			name : LANGUAGE.COMBOVALUE_ISCC_EU,
			id : 'ISCC-EU'
		}, {
			name : LANGUAGE.COMBOVALUE_RBSA,
			id : 'RBSA'
		}, {
			name : LANGUAGE.COMBOVALUE_RTRS,
			id : 'RTRS'
		} ]
	});
};
COMBOBOX.getChanged_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getChannel_usage_cdValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ACTIVE,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_INACTIVE,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_ALWAYS,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_OVERRIDE,
			id : 'O'
		} ]
	});
};
COMBOBOX.getChild_locs_includedValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCif_booked_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCircle_statusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_OPEN,
			id : 'OPN'
		}, {
			name : LANGUAGE.COMBOVALUE_PROPOSED,
			id : 'PRO'
		}, {
			name : LANGUAGE.COMBOVALUE_ACCEPTED,
			id : 'ACC'
		}, {
			name : LANGUAGE.COMBOVALUE_CANCELLED,
			id : 'CAN'
		} ]
	});
};
COMBOBOX.getClaim_statusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_WRITTEN_OFF,
			id : 'W'
		}, {
			name : LANGUAGE.COMBOVALUE_INVOICED,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_PROVISIONAL,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_FINAL,
			id : 'F'
		} ]
	});
};
COMBOBOX.getClosed_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getCnversion_cost_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getComite_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCompleted_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getComplete_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INCOMPLETE,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_COMPLETE,
			id : 'C'
		} ]
	});
};
COMBOBOX.getConfirm_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_OUTGOING_CONFIRMATION,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_TO_BE_CONFIRMED,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_CONFIRMED,
			id : 'C'
		} ]
	});
};
COMBOBOX.getConf_ctr_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getConf_sent_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getConsumption_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getContainer_loc_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_AREA,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_COUNTRY,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_REGION,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_PLACE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_OPTION,
			id : 'O'
		} ]
	});
};
COMBOBOX.getCoop_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCost_ctr_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCost_rte_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRICE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_PRICE_PER_HALF_MONTH,
			id : 'H'
		}, {
			name : LANGUAGE.COMBOVALUE_PERCENTAGE,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_DAYS_OF_INTEREST,
			id : 'D'
		} ]
	});
};
COMBOBOX.getCovering_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCovering_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CONTRACT,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_AD_HOC_COVERING,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_MANUAL,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_OVERHEAD,
			id : 'O'
		} ]
	});
};
COMBOBOX.getCreate_remove_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ENTER,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_REMOVE,
			id : 'R'
		} ]
	});
};
COMBOBOX.getCrop_year_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCtr_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NORMAL,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_FUTURE,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_PREMIUM,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_PROVISIONAL__G_T_,
			id : 'V'
		} ]
	});
};
COMBOBOX.getCtr_tp_cur_reqValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INTERN,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_EXTERN,
			id : 'E'
		} ]
	});
};
COMBOBOX.getCtr_tp_fxValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SPOT,
			id : 'SPOT'
		}, {
			name : LANGUAGE.COMBOVALUE_FORWARD,
			id : 'FORW'
		}, {
			name : LANGUAGE.COMBOVALUE_SWAP,
			id : 'SWAP'
		} ]
	});
};
COMBOBOX.getCum_inv_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCurrentYearPlusThreeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_I,
			id : 'i'
		} ]
	});
};
COMBOBOX.getCur_add_amnt_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCur_covered_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCur_covering_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BK_ARE_TO_BE_COVERED,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_BOOKINGS_ARE_COVER,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_COVERINGS_N_A,
			id : 'N'
		} ]
	});
};
COMBOBOX.getCur_val_decl_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_REQUESTED,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_NOT_REQUESTED,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_RECEIVED,
			id : 'E'
		} ]
	});
};
COMBOBOX.getDecimal_pointValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_COMMA,
			id : ','
		}, {
			name : LANGUAGE.COMBOVALUE_DOT,
			id : '.'
		} ]
	});
};
COMBOBOX.getDetail_sheet_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getDoccountryValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_GB,
			id : 'GB'
		}, {
			name : LANGUAGE.COMBOVALUE_FR,
			id : 'FR'
		}, {
			name : LANGUAGE.COMBOVALUE_NL,
			id : 'NL'
		}, {
			name : LANGUAGE.COMBOVALUE_DE,
			id : 'DE'
		}, {
			name : LANGUAGE.COMBOVALUE_SPACE,
			id : ' '
		} ]
	});
};
COMBOBOX.getDoclanguageValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_EN,
			id : 'en'
		}, {
			name : LANGUAGE.COMBOVALUE_FR,
			id : 'fr'
		}, {
			name : LANGUAGE.COMBOVALUE_NL,
			id : 'nl'
		}, {
			name : LANGUAGE.COMBOVALUE_DE,
			id : 'de'
		}, {
			name : LANGUAGE.COMBOVALUE_SPACE,
			id : ' '
		} ]
	});
};
COMBOBOX.getDoc_statusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ROUNDED_UP,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_INITIATIVE,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_WAITING,
			id : 'W'
		}, {
			name : LANGUAGE.COMBOVALUE_WAITING_FOR_OTHER,
			id : 'WO'
		}, {
			name : LANGUAGE.COMBOVALUE_WAITING_FOR_RESULT,
			id : 'WR'
		} ]
	});
};
COMBOBOX.getDoc_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRESENTATION_DOCUMENT,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_QUALITY_DOCUMENT,
			id : 'Q'
		} ]
	});
};
COMBOBOX.getD_c_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CREDIT,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_DEBET,
			id : 'D'
		} ]
	});
};
COMBOBOX.getEc_dlv_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getEc_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getElectr_invoic_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getEnclosed_prd_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getEnd_date_requiredValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getEntity_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BUSINESS_OBJECT,
			id : 'BO'
		}, {
			name : LANGUAGE.COMBOVALUE_INTERFACE_UNIT,
			id : 'IU'
		} ]
	});
};
COMBOBOX.getEst_costng_sep_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SEPARATELY,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_DIFFERENCE,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_COST_EST_ONLY,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_BALANCE,
			id : 'B'
		} ]
	});
};
COMBOBOX.getException_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_OVERCOLLECTION,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_FIXING_NO_NOT_FOUND,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_FIXING_NO_ALREADY_MATCHED,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_MATCH_UNDONE,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_COLLECTION_ORDER_NOT_CORRECT,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_STORE_LOCATIONS_DO_NOT_MATCH,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_DELIVERY_DATE_TOO_OLD,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_HAULIER_RELATION_MISSING,
			id : 'H'
		} ]
	});
};
COMBOBOX.getExclude_ind1Values = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INCLUDE,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_PARTIAL,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_EXCLUDE,
			id : 'X'
		} ]
	});
};
COMBOBOX.getExclude_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INCLUDE,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_EXCLUDE,
			id : 'X'
		} ]
	});
};
COMBOBOX.getExtensionpercValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_0,
			id : '0.0'
		}, {
			name : LANGUAGE.COMBOVALUE_0,
			id : '0.5'
		}, {
			name : LANGUAGE.COMBOVALUE_1,
			id : '1.0'
		}, {
			name : LANGUAGE.COMBOVALUE_1,
			id : '1.5'
		} ]
	});
};
COMBOBOX.getExtension_ctr_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getExtension_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getExtraSelections = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ALL,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_CIF_FO__FOB_BV,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_REST,
			id : 'M'
		} ]
	});
};
COMBOBOX.getExt_text_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_EXTERNAL_TEXT,
			id : 'E'
		} ]
	});
};
COMBOBOX.getEx_store_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getFill_bcur_amnt_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CASH,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_PERIOD,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_FORWARD_POINTS,
			id : 'F'
		} ]
	});
};
COMBOBOX.getFinal_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getFix_stateValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INITIAL,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_PROCESSED,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_EXCEPTION,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_RECEIVED,
			id : 'R'
		} ]
	});
};
COMBOBOX.getFmh_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_1,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_2,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_3,
			id : '3'
		}, {
			name : LANGUAGE.COMBOVALUE_4,
			id : '4'
		}, {
			name : LANGUAGE.COMBOVALUE_5,
			id : '5'
		}, {
			name : LANGUAGE.COMBOVALUE_6,
			id : '6'
		}, {
			name : LANGUAGE.COMBOVALUE_7,
			id : '7'
		}, {
			name : LANGUAGE.COMBOVALUE_8,
			id : '8'
		}, {
			name : LANGUAGE.COMBOVALUE_9,
			id : '9'
		}, {
			name : LANGUAGE.COMBOVALUE_10,
			id : '10'
		}, {
			name : LANGUAGE.COMBOVALUE_11,
			id : '11'
		}, {
			name : LANGUAGE.COMBOVALUE_12,
			id : '12'
		}, {
			name : LANGUAGE.COMBOVALUE_13,
			id : '13'
		}, {
			name : LANGUAGE.COMBOVALUE_14,
			id : '14'
		}, {
			name : LANGUAGE.COMBOVALUE_15,
			id : '15'
		}, {
			name : LANGUAGE.COMBOVALUE_16,
			id : '16'
		}, {
			name : LANGUAGE.COMBOVALUE_17,
			id : '17'
		}, {
			name : LANGUAGE.COMBOVALUE_18,
			id : '18'
		}, {
			name : LANGUAGE.COMBOVALUE_19,
			id : '19'
		}, {
			name : LANGUAGE.COMBOVALUE_20,
			id : '20'
		}, {
			name : LANGUAGE.COMBOVALUE_21,
			id : '21'
		}, {
			name : LANGUAGE.COMBOVALUE_22,
			id : '22'
		}, {
			name : LANGUAGE.COMBOVALUE_23,
			id : '23'
		}, {
			name : LANGUAGE.COMBOVALUE_24,
			id : '24'
		}, {
			name : LANGUAGE.COMBOVALUE_25,
			id : '25'
		}, {
			name : LANGUAGE.COMBOVALUE_26,
			id : '26'
		}, {
			name : LANGUAGE.COMBOVALUE_27,
			id : '27'
		}, {
			name : LANGUAGE.COMBOVALUE_28,
			id : '28'
		}, {
			name : LANGUAGE.COMBOVALUE_29,
			id : '29'
		}, {
			name : LANGUAGE.COMBOVALUE_30,
			id : '30'
		}, {
			name : LANGUAGE.COMBOVALUE_31,
			id : '31'
		}, {
			name : LANGUAGE.COMBOVALUE_32,
			id : '32'
		}, {
			name : LANGUAGE.COMBOVALUE_33,
			id : '33'
		}, {
			name : LANGUAGE.COMBOVALUE_34,
			id : '34'
		}, {
			name : LANGUAGE.COMBOVALUE_35,
			id : '35'
		}, {
			name : LANGUAGE.COMBOVALUE_36,
			id : '36'
		}, {
			name : LANGUAGE.COMBOVALUE_37,
			id : '37'
		}, {
			name : LANGUAGE.COMBOVALUE_38,
			id : '38'
		}, {
			name : LANGUAGE.COMBOVALUE_39,
			id : '39'
		}, {
			name : LANGUAGE.COMBOVALUE_41,
			id : '41'
		}, {
			name : LANGUAGE.COMBOVALUE_42,
			id : '42'
		}, {
			name : LANGUAGE.COMBOVALUE_43,
			id : '43'
		}, {
			name : LANGUAGE.COMBOVALUE_44,
			id : '44'
		}, {
			name : LANGUAGE.COMBOVALUE_58,
			id : '58'
		}, {
			name : LANGUAGE.COMBOVALUE_51,
			id : '51'
		}, {
			name : LANGUAGE.COMBOVALUE_52,
			id : '52'
		}, {
			name : LANGUAGE.COMBOVALUE_53,
			id : '53'
		}, {
			name : LANGUAGE.COMBOVALUE_54,
			id : '54'
		}, {
			name : LANGUAGE.COMBOVALUE_55,
			id : '55'
		}, {
			name : LANGUAGE.COMBOVALUE_56,
			id : '56'
		}, {
			name : LANGUAGE.COMBOVALUE_61,
			id : '61'
		}, {
			name : LANGUAGE.COMBOVALUE_62,
			id : '62'
		}, {
			name : LANGUAGE.COMBOVALUE_63,
			id : '63'
		}, {
			name : LANGUAGE.COMBOVALUE_64,
			id : '64'
		}, {
			name : LANGUAGE.COMBOVALUE_65,
			id : '65'
		}, {
			name : LANGUAGE.COMBOVALUE_66,
			id : '66'
		}, {
			name : LANGUAGE.COMBOVALUE_71,
			id : '71'
		}, {
			name : LANGUAGE.COMBOVALUE_72,
			id : '72'
		}, {
			name : LANGUAGE.COMBOVALUE_73,
			id : '73'
		}, {
			name : LANGUAGE.COMBOVALUE_74,
			id : '74'
		}, {
			name : LANGUAGE.COMBOVALUE_75,
			id : '75'
		}, {
			name : LANGUAGE.COMBOVALUE_76,
			id : '76'
		}, {
			name : LANGUAGE.COMBOVALUE_49,
			id : '49'
		}, {
			name : LANGUAGE.COMBOVALUE_40,
			id : '40'
		}, {
			name : LANGUAGE.COMBOVALUE_50,
			id : '50'
		}, {
			name : LANGUAGE.COMBOVALUE_60,
			id : '60'
		}, {
			name : LANGUAGE.COMBOVALUE_70,
			id : '70'
		}, {
			name : LANGUAGE.COMBOVALUE_80,
			id : '80'
		}, {
			name : LANGUAGE.COMBOVALUE_81,
			id : '81'
		}, {
			name : LANGUAGE.COMBOVALUE_85,
			id : '85'
		}, {
			name : LANGUAGE.COMBOVALUE_86,
			id : '86'
		}, {
			name : LANGUAGE.COMBOVALUE_91,
			id : '91'
		}, {
			name : LANGUAGE.COMBOVALUE_92,
			id : '92'
		}, {
			name : LANGUAGE.COMBOVALUE_93,
			id : '93'
		}, {
			name : LANGUAGE.COMBOVALUE_94,
			id : '94'
		}, {
			name : LANGUAGE.COMBOVALUE_95,
			id : '95'
		}, {
			name : LANGUAGE.COMBOVALUE_77,
			id : '77'
		} ]
	});
};
COMBOBOX.getFms_completed_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getFob_fob_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getForeign_dlv_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getForeign_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getFulflmnt_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PARTIALLY,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_PERIOD,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_COMPLETE,
			id : 'C'
		} ]
	});
};
COMBOBOX.getFully_priced_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PARTLY,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_NOT,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_COMPLETE,
			id : 'C'
		} ]
	});
};
COMBOBOX.getFunc_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_UNDEFINED,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_APPR_NOM,
			id : 'AN'
		}, {
			name : LANGUAGE.COMBOVALUE_DESTINATION,
			id : 'DE'
		}, {
			name : LANGUAGE.COMBOVALUE_PRE_ADVICE,
			id : 'PR'
		}, {
			name : LANGUAGE.COMBOVALUE_RELEASE,
			id : 'RE'
		}, {
			name : LANGUAGE.COMBOVALUE_DIRECT_DELIVERY,
			id : 'DD'
		}, {
			name : LANGUAGE.COMBOVALUE_DISCHARGE_CIF,
			id : 'DC'
		}, {
			name : LANGUAGE.COMBOVALUE_DISCHARGE_BV,
			id : 'DV'
		}, {
			name : LANGUAGE.COMBOVALUE_TRANS_SHIPMENT,
			id : 'TS'
		}, {
			name : LANGUAGE.COMBOVALUE_SELL_ON_WEIGHT_CLAIM,
			id : 'SW'
		}, {
			name : LANGUAGE.COMBOVALUE_WRITE_OFF,
			id : 'WO'
		}, {
			name : LANGUAGE.COMBOVALUE_CONVERSION,
			id : 'CN'
		}, {
			name : LANGUAGE.COMBOVALUE_INVOICE_IN_ADVANCE,
			id : 'IA'
		}, {
			name : LANGUAGE.COMBOVALUE_EX_STORE_COLLECTION,
			id : 'SC'
		}, {
			name : LANGUAGE.COMBOVALUE_EX_STORE_DELIVERY,
			id : 'SD'
		} ]
	});
};
COMBOBOX.getFut_exc_physic_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CHICAGO,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_PHYSICAL,
			id : 'P'
		} ]
	});
};
COMBOBOX.getGeneric_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_VAT,
			id : 'V'
		}, {
			name : LANGUAGE.COMBOVALUE_COST_GROUP,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_CURRENCY,
			id : 'U'
		}, {
			name : LANGUAGE.COMBOVALUE_ACCOUNT,
			id : 'A'
		} ]
	});
};
COMBOBOX.getGmp_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_UNKNOWN,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_GTP,
			id : 'G'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getGoods_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getHaulFix_doc_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getHaulierStatusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ALLOCATED,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_OPEN,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getHold_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_HIDDEN,
			id : 'H'
		} ]
	});
};
COMBOBOX.getIndiv_booking_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getInitiative_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getInsurance_co_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getIns_cert_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getInterval_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_WEEK_S_,
			id : 'week'
		}, {
			name : LANGUAGE.COMBOVALUE_WEEKDAY_S_,
			id : 'wkdays'
		}, {
			name : LANGUAGE.COMBOVALUE_MONTH_S_,
			id : 'month'
		}, {
			name : LANGUAGE.COMBOVALUE_HALF_MONTH_S_,
			id : 'hmonth'
		}, {
			name : LANGUAGE.COMBOVALUE_MANUAL,
			id : 'manual'
		} ]
	});
};
COMBOBOX.getInt_text_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INTERNAL_TEXT,
			id : 'I'
		} ]
	});
};
COMBOBOX.getInvoiceable_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getInvoiced_ia_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getInvoice_layoutValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CIRCLE_INVOICE,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODS_AD_HOC_INVOICE,
			id : 'G'
		}, {
			name : LANGUAGE.COMBOVALUE_WASHOUT_INVOICE,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_QUALITY_CLAIM_INVOICE,
			id : 'Q'
		}, {
			name : LANGUAGE.COMBOVALUE_WEIGHT_CLAIM_INVOICE,
			id : 'W'
		}, {
			name : LANGUAGE.COMBOVALUE_FINALISATION_INVOICE,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_COLLECTED_WEIGHT_INVOICE,
			id : 'L'
		}, {
			name : LANGUAGE.COMBOVALUE_STORAGE_RENT_INVOICE,
			id : 'R'
		} ]
	});
};
COMBOBOX.getInvoice_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_GOODS_LIABILITY,
			id : 'GO'
		}, {
			name : LANGUAGE.COMBOVALUE_ANALYSIS_CLAIM,
			id : 'AC'
		}, {
			name : LANGUAGE.COMBOVALUE_ANALYSIS_ADVICE,
			id : 'AA'
		}, {
			name : LANGUAGE.COMBOVALUE_CIRCLE_AGENTCOSTS,
			id : 'CA'
		}, {
			name : LANGUAGE.COMBOVALUE_CLAIM_WEIGHT,
			id : 'CW'
		}, {
			name : LANGUAGE.COMBOVALUE_CLAIM_QUALITY,
			id : 'CQ'
		}, {
			name : LANGUAGE.COMBOVALUE_CIRCLE_SETTLMENT,
			id : 'CS'
		}, {
			name : LANGUAGE.COMBOVALUE_RENT_ACCRUAL,
			id : 'RA'
		}, {
			name : LANGUAGE.COMBOVALUE_COST_CONTRACT,
			id : 'CC'
		}, {
			name : LANGUAGE.COMBOVALUE_COSTLINE_CONVERSION,
			id : 'CO'
		}, {
			name : LANGUAGE.COMBOVALUE_SURPLUS_INSURANCE,
			id : 'SI'
		}, {
			name : LANGUAGE.COMBOVALUE_PARCEL_AGENTCOSTS,
			id : 'PA'
		}, {
			name : LANGUAGE.COMBOVALUE_BROKERCOSTS,
			id : 'BC'
		}, {
			name : LANGUAGE.COMBOVALUE_EXTENSION_ACCRUAL,
			id : 'EX'
		}, {
			name : LANGUAGE.COMBOVALUE_LEVY,
			id : 'LE'
		}, {
			name : LANGUAGE.COMBOVALUE_AD_HOC_ACCRUAL,
			id : 'AD'
		}, {
			name : LANGUAGE.COMBOVALUE_PRICE_DIFF_CLAIM,
			id : 'PD'
		}, {
			name : LANGUAGE.COMBOVALUE_SPLITTING_COSTS,
			id : 'SP'
		}, {
			name : LANGUAGE.COMBOVALUE_INTEREST,
			id : 'IN'
		}, {
			name : LANGUAGE.COMBOVALUE_MATURATION_ACCRUAL,
			id : 'MA'
		}, {
			name : LANGUAGE.COMBOVALUE_NOT_FILLED,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_WASHOUT_SETTLMENT,
			id : 'WS'
		}, {
			name : LANGUAGE.COMBOVALUE_WASHOUT_AGENTCOSTS,
			id : 'WA'
		}, {
			name : LANGUAGE.COMBOVALUE_RENTAL_COST,
			id : 'RC'
		} ]
	});
};
COMBOBOX.getInv_ia_paid_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getInv_paid_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getLaboratory_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getLci_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getLeading_agio_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BUY,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_SELL,
			id : 'S'
		} ]
	});
};
COMBOBOX.getLeading_calc_amnt_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BUY,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_SELL,
			id : 'S'
		} ]
	});
};
COMBOBOX.getLevy_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getLiability_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getLiability_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_GOODS_LIABILITY,
			id : 'GO'
		}, {
			name : LANGUAGE.COMBOVALUE_ANALYSIS_CLAIM,
			id : 'AC'
		}, {
			name : LANGUAGE.COMBOVALUE_ANALYSIS_ADVICE,
			id : 'AA'
		}, {
			name : LANGUAGE.COMBOVALUE_CIRCLE_AGENTCOSTS,
			id : 'CA'
		}, {
			name : LANGUAGE.COMBOVALUE_CLAIM_WEIGHT,
			id : 'CW'
		}, {
			name : LANGUAGE.COMBOVALUE_CLAIM_QUALITY,
			id : 'CQ'
		}, {
			name : LANGUAGE.COMBOVALUE_CIRCLE_SETTLMENT,
			id : 'CS'
		}, {
			name : LANGUAGE.COMBOVALUE_RENT_ACCRUAL,
			id : 'RA'
		}, {
			name : LANGUAGE.COMBOVALUE_COST_CONTRACT,
			id : 'CC'
		}, {
			name : LANGUAGE.COMBOVALUE_COSTLINE_CONVERSION,
			id : 'CO'
		}, {
			name : LANGUAGE.COMBOVALUE_SURPLUS_INSURANCE,
			id : 'SI'
		}, {
			name : LANGUAGE.COMBOVALUE_PARCEL_AGENTCOSTS,
			id : 'PA'
		}, {
			name : LANGUAGE.COMBOVALUE_BROKERCOSTS,
			id : 'BC'
		}, {
			name : LANGUAGE.COMBOVALUE_EXTENSION_ACCRUAL,
			id : 'EX'
		}, {
			name : LANGUAGE.COMBOVALUE_LEVY,
			id : 'LE'
		}, {
			name : LANGUAGE.COMBOVALUE_AD_HOC_ACCRUAL,
			id : 'AD'
		}, {
			name : LANGUAGE.COMBOVALUE_PRICE_DIFF_CLAIM,
			id : 'PD'
		}, {
			name : LANGUAGE.COMBOVALUE_SPLITTING_COSTS,
			id : 'SP'
		}, {
			name : LANGUAGE.COMBOVALUE_INTEREST,
			id : 'IN'
		}, {
			name : LANGUAGE.COMBOVALUE_MATURATION_ACCRUAL,
			id : 'MA'
		}, {
			name : LANGUAGE.COMBOVALUE_NOT_FILLED,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_WASHOUT_SETTLMENT,
			id : 'WS'
		}, {
			name : LANGUAGE.COMBOVALUE_WASHOUT_AGENTCOSTS,
			id : 'WA'
		}, {
			name : LANGUAGE.COMBOVALUE_RENTAL_COST,
			id : 'RC'
		} ]
	});
};
COMBOBOX.getLibrararyQueries = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CHNLQRY,
			id : 'CHNLQRY'
		}, {
			name : LANGUAGE.COMBOVALUE_CHFSQRY,
			id : 'CHFSQRY'
		}, {
			name : LANGUAGE.COMBOVALUE_CHUKQRY,
			id : 'CHUKQRY'
		} ]
	});
};
COMBOBOX.getLimit_exceed_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getLinked_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getLoading_doc_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getLoading_doc_tp_sendValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getLoc_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_AREA,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_COUNTRY,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_REGION,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_PLACE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_OPTION,
			id : 'O'
		} ]
	});
};
COMBOBOX.getLog_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SQL_ERROR,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_CALL_FAILED,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_DEBUG_INFO,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_BUSINESS_ERROR,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_INFORMATION,
			id : 'I'
		} ]
	});
};
COMBOBOX.getMailingtp_invoiceValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getMailing_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getMailing_tp_apprValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : ' '
		} ]
	});
};
COMBOBOX.getMailing_tp_broValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : ' '
		} ]
	});
};
COMBOBOX.getMailing_tp_bsValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : ' '
		} ]
	});
};
COMBOBOX.getMailing_tp_chValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : ' '
		} ]
	});
};
COMBOBOX.getMailing_tp_cnf_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_EMAIL,
			id : '3'
		} ]
	});
};
COMBOBOX.getMailing_tp_shValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : ' '
		} ]
	});
};
COMBOBOX.getMailing_tp_strValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : ' '
		} ]
	});
};
COMBOBOX.getMailing_tp_suValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_AND_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : ' '
		} ]
	});
};
COMBOBOX.getMarket_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PHYSICAL_MARKET,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_FUTURES_EXCHANGE,
			id : 'F'
		} ]
	});
};
COMBOBOX.getMethod_of_paymValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_IN_ARREARS,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_IN_ADVANCE,
			id : 'I'
		} ]
	});
};
COMBOBOX.getMoment_of_dlv_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SHIPMENT,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_VOYAGE,
			id : 'V'
		}, {
			name : LANGUAGE.COMBOVALUE_DISCHARGING,
			id : 'D'
		} ]
	});
};
COMBOBOX.getMths_detail_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getMutation_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ADD,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_CANCELLED,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_MODIFICATION,
			id : 'M'
		} ]
	});
};
COMBOBOX.getNom_appr_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_APPROPRIATE,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_NOMINATE,
			id : 'N'
		} ]
	});
};
COMBOBOX.getNongmp_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getNongmp_message_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getOnRequest_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getOpen_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FINALIZED,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_TO_BE_DELIVERED,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_OPEN,
			id : 'O'
		} ]
	});
};
COMBOBOX.getOperating_statusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PARTIAL_RELEASE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_COMPLETE_RELEASE,
			id : 'C'
		} ]
	});
};
COMBOBOX.getOperation_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_HALF_YEAR_RUN,
			id : 'H'
		}, {
			name : LANGUAGE.COMBOVALUE_YEAR_RUN,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_MONTHLY_RUN,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_QUATERLY_RUN,
			id : 'Q'
		}, {
			name : ' ',
			id : 'Q'
		}
		
		]
	});
};
COMBOBOX.getOrder_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getOrder_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CEFETRA,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_OLDENBURG,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_SOYA,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_WHEAT_FEED,
			id : 'W'
		}, {
			name : LANGUAGE.COMBOVALUE_SUN,
			id : 'Z'
		} ]
	});
};
COMBOBOX.getOriginal_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getOriginate_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CONTRACT,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_CONVERSION,
			id : 'C'
		} ]
	});
};
COMBOBOX.getOrigin_dest_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_DESTINATION,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_ORIGIN,
			id : 'O'
		} ]
	});
};
COMBOBOX.getOrigin_in_docs_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getOwn_vat_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getParc_text_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INTERNAL,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_EXTERNAL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getParc_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_APPROPRIATED,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_DELIVERED,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_ORDER,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_FORWARD_PERIOD,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NOMINATED,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_DESTINATED,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_RELEASED,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_PRE_ADVISED,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_PART_WASHOUT_CIRCLE,
			id : 'C'
		} ]
	});
};
COMBOBOX.getParticipant_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getPayment_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_COLLECTIVE,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_INDIVIDUAL,
			id : 'I'
		} ]
	});
};
COMBOBOX.getPaymts_lead_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getPeriod_idValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_1_15,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_16_END,
			id : '2'
		} ]
	});
};
COMBOBOX.getPeriod_tp_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SHIPMENT,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_DELIVERY,
			id : 'D'
		} ]
	});
};
COMBOBOX.getPeriod_tp_ind_dslValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ANY,
			id : '*'
		}, {
			name : LANGUAGE.COMBOVALUE_DELIVERY,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_SHIPMENT,
			id : 'S'
		} ]
	});
};
COMBOBOX.getPlanning_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_MOTOR_BARGE,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_VESSEL,
			id : 'V'
		}, {
			name : LANGUAGE.COMBOVALUE_FACTORY,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_CIRCLE,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_STORE,
			id : 'S'
		} ]
	});
};
COMBOBOX.getPort_pre_adv_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getPos_lia_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_LIABILITY,
			id : 'Liability'
		}, {
			name : LANGUAGE.COMBOVALUE_POSITION,
			id : 'Position'
		} ]
	});
};
COMBOBOX.getPos_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FORWARD,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_TRANSPORT,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_STORE,
			id : 'S'
		} ]
	});
};
COMBOBOX.getPos_tp_fromValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FORWARD,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_TRANSPORT,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_STORE,
			id : 'S'
		} ]
	});
};
COMBOBOX.getPos_tp_toValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FORWARD,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_TRANSPORT,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_STORE,
			id : 'S'
		} ]
	});
};
COMBOBOX.getPpa_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_RESALE,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_DISCHARGE,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_TRANSSHIP,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_PREMIUM_CIRCLE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_FLAT_CIRCLE,
			id : 'F'
		} ]
	});
};
COMBOBOX.getPre_a_nom_appr_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRE_ADVICE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_NOMINATION,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_REGISTRATION,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_REQUEST,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_DELIVERY_DOCUMENT,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_SHIPPED_DELIVERY,
			id : 'S'
		} ]
	});
};
COMBOBOX.getPriced_unpricd_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_OPTION,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_PRICED,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_UNPRICED,
			id : 'U'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getPric_constructionValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_LIMITED_PRICE,
			id : 'L'
		}, {
			name : LANGUAGE.COMBOVALUE_EXCL_MATURATION,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_FLAT,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_INCL_MATURATION,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_PREMIUM,
			id : 'P'
		} ]
	});
};
COMBOBOX.getPric_premctr_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_OWN_COMPANY,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_COUNTERPARTY,
			id : 'C'
		} ]
	});
};
COMBOBOX.getPric_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FLAT,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PREMIUM,
			id : 'P'
		} ]
	});
};
COMBOBOX.getPric_tp_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CONTRACT_PRICE,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_SPOT_PRICE,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_SPOT_PRICE_FACTOR,
			id : 'F'
		} ]
	});
};
COMBOBOX.getPrintloc_zipcdValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_AFTER_THE_ADDRESS,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_END_LATEST_LINE,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_SEPARATE_LAST_LINE,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_BEFORE_THE_ADDRESS,
			id : 'B'
		} ]
	});
};
COMBOBOX.getPrint_on_appValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getPrint_on_ctrValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getPrint_on_invValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getPriority_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getProces_crd_inv_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getProces_deb_inv_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getProduct_development_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getProduct_on_storeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getProd_fam_bound_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_FIXED,
			id : 'F'
		} ]
	});
};
COMBOBOX.getProrata_settlm_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getPuchase_sale_both_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PURCHASE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_SALE,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_BOTH,
			id : 'B'
		} ]
	});
};
COMBOBOX.getPuchase_sale_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PURCHASE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_SALE,
			id : 'S'
		} ]
	});
};
COMBOBOX.getLimit_type_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_COMPANY_SIZE,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_FINANCIAL_RATING,
			id : 'F'
		} ]
	});
};
COMBOBOX.getPur_avail_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getPur_sal_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PURCHASE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_SALE,
			id : 'S'
		} ]
	});
};
COMBOBOX.getPur_sal_ind_dslValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ANY,
			id : '*'
		}, {
			name : LANGUAGE.COMBOVALUE_SALE,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_PURCHASE,
			id : 'P'
		} ]
	});
};
COMBOBOX.getP_bro_rel_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_RELATION,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_BROKER,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_RELATION_BROKER,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getP_CH18_OutputValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINTER,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_CSV_FILE,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_ALL,
			id : '0'
		} ]
	});
};
COMBOBOX.getP_CH94_CondenseValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getP_CH94_Groupby1Values = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRODUCT_FAMILY,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_PRODUCT_TYPE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_PRODUCT_SUBTYPE,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_ORIGIN,
			id : 'O'
		} ]
	});
};
COMBOBOX.getP_CH94_OutputValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINTER,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_CSV_FILE,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_ALL,
			id : '0'
		} ]
	});
};
COMBOBOX.getP_CH94_PrintfuturesValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getP_CH94_Reporttype1Values = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ALL,
			id : '0'
		}, {
			name : LANGUAGE.COMBOVALUE_RESULTS_PER_POSITION,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_RESULTS_PER_PRODUCT,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_RESULTS_PER_PRODUCT_FAMILY,
			id : '3'
		} ]
	});
};
COMBOBOX.getP_CH94_Reporttype2Values = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SUMMARY,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_DETAILED,
			id : '2'
		} ]
	});
};
COMBOBOX.getP_CH94_Reporttype3Values = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ALL,
			id : '0'
		}, {
			name : LANGUAGE.COMBOVALUE_BY_RELATION,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_BY_PRODUCT_FAMILY,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_BY_RELATION_PRODUCT_FAMILY,
			id : '3'
		} ]
	});
};
COMBOBOX.getP_CH94_Reporttype4Values = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_RISK_OVERVIEW_BY_RELATION,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_TOTAL_RISK_OVERVIEW,
			id : '2'
		} ]
	});
};
COMBOBOX.getP_CH94_SortbyValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_POSITION,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_CHRONOLOGICAL,
			id : 'C'
		} ]
	});
};
COMBOBOX.getP_CHAR_1Values = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getP_Ctr_finalisedValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NOT,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_COMPLETE,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_PARTLY,
			id : 'P'
		} ]
	});
};
COMBOBOX.getP_Fullflmnt_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PARTIALLY,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_COMPLETE,
			id : 'C'
		} ]
	});
};
COMBOBOX.getP_OrderStatusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NOT_ORDERED,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_PROVISIONAL,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_FINAL,
			id : 'F'
		} ]
	});
};
COMBOBOX.getP_YES_NOValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getQualitytrms_prtValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_MINIMAL,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_MAXIMAL,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_EXACT,
			id : '3'
		}, {
			name : LANGUAGE.COMBOVALUE_BASIS,
			id : '4'
		} ]
	});
};
COMBOBOX.getQualitytrms_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_MINIMAL,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_MAXIMAL,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_EXACT,
			id : '3'
		}, {
			name : LANGUAGE.COMBOVALUE_BASIS,
			id : '4'
		} ]
	});
};
COMBOBOX.getReasonValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SUFFICIENT_BALANCE_ON_PLANNING,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_SUFFICIENT_BALANCE_ON_RELEASED_PARCEL,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getReconcil_check_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getRegion_linked_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_FIXED,
			id : 'F'
		} ]
	});
};
COMBOBOX.getRegistr_statusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getRelation_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BANK,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_CEFETRA_GROUP,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_OTHER,
			id : 'O'
		} ]
	});
};
COMBOBOX.getReloading_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getRemarks_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INTERNAL_TEXT__REMARKS__IN_CTX,
			id : 'I'
		} ]
	});
};
COMBOBOX.getReprint_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getReqstateValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_WAITING,
			id : '0'
		}, {
			name : LANGUAGE.COMBOVALUE_BUSY,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_COMPLETED,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_ERROR,
			id : '3'
		}, {
			name : LANGUAGE.COMBOVALUE_RETRY,
			id : '4'
		}, {
			name : LANGUAGE.COMBOVALUE_IN_QUEUE,
			id : '5'
		}, {
			name : LANGUAGE.COMBOVALUE_UPDATED,
			id : '6'
		}, {
			name : LANGUAGE.COMBOVALUE_DELETED,
			id : '7'
		}, {
			name : LANGUAGE.COMBOVALUE_WAITING_AIDA,
			id : '8'
		}, {
			name : LANGUAGE.COMBOVALUE_BUSY_AIDA,
			id : '9'
		} ]
	});
};
COMBOBOX.getRest_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getResult_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_TRANSACTIONS__P_S_,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_REVALUATION,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_OTHER_RESULTS_ON_GOODS,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_COST,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : 'N'
		} ]
	});
};
COMBOBOX.getReverse_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getReverse_rte_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getRgt_lia_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_RIGHT,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_LIABILITY,
			id : 'L'
		} ]
	});
};
COMBOBOX.getRight_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getRouting_cdValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLOKL,
			id : 'BLOKL'
		}, {
			name : LANGUAGE.COMBOVALUE_STUFF,
			id : 'STUFF'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANCO,
			id : '2'
		} ]
	});
};
COMBOBOX.getRunning_accntValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getRun_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getSample_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_DISCHARGE_ANALYSIS,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_SHIPMENT_ANALYSIS,
			id : 'S'
		} ]
	});
};
COMBOBOX.getSealing_tp_ctrValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_AFFILIATION,
			id : 'IA'
		}, {
			name : LANGUAGE.COMBOVALUE_STANDING_IN,
			id : 'SI'
		}, {
			name : LANGUAGE.COMBOVALUE_SEPARATE,
			id : 'SP'
		}, {
			name : LANGUAGE.COMBOVALUE_NOT_FILLED,
			id : ' '
		} ]
	});
};
COMBOBOX.getSeal_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_AFFILIATION,
			id : 'IA'
		}, {
			name : LANGUAGE.COMBOVALUE_STANDING_IN,
			id : 'SI'
		}, {
			name : LANGUAGE.COMBOVALUE_SEPARATE,
			id : 'SP'
		}, {
			name : LANGUAGE.COMBOVALUE_NOT_FILLED,
			id : ' '
		} ]
	});
};
COMBOBOX.getSearch_locValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_MATCHING_NAME,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_INCLUDED_LOC,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_INCLUDING_LOC,
			id : 'P'
		} ]
	});
};
COMBOBOX.getSearch_pdvValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRODUCT,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_FROM_PRODUCT,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_BASE_PRODUCT,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_ANY,
			id : 'A'
		} ]
	});
};
COMBOBOX.getSeller_closed_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getSeller_doc_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getSeller_doc_tp_sendValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getSell_buy_choic_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SELLER_S_OPTION,
			id : 'SO'
		}, {
			name : LANGUAGE.COMBOVALUE_BUYER_S_OPTION,
			id : 'BO'
		} ]
	});
};
COMBOBOX.getSend_toValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BROKER,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_RELATION,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_BOTH,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_DO_NOT_SEND,
			id : 'N'
		} ]
	});
};
COMBOBOX.getSent_messageValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CONFIRMATION,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_REACTION,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_PROPOSAL,
			id : 'P'
		} ]
	});
};
COMBOBOX.getSettlm_reservationValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_POSITION,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_PRODUCT_FAMILY,
			id : 'A'
		} ]
	});
};
COMBOBOX.getShipowner_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShipping_spec_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_REQUEST,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_SPECIFICATION,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_DESTINATION,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_NOM_FREIGHT,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_PRE_ADVICE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getShow_areaValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_locValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_monthValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_periodValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_prod_famValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_prod_stypValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_prod_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_relValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_storageValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getShow_user_idValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getSpec_barges_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getSpec_groupValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CHARG_FIN_RIGHT,
			id : 'R1'
		}, {
			name : LANGUAGE.COMBOVALUE_CHARG_FIN_LIAB,
			id : 'O1'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODSRIGHTS_CHICAGO,
			id : 'G7'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODSRIGHTS_FLAT,
			id : 'G3'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODSRIGHTS_PREMIUM,
			id : 'G5'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODSLIAB_CHICAGO,
			id : 'G8'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODSLIAB_PREMIUM,
			id : 'G6'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODSLIAB_FLAT,
			id : 'G4'
		}, {
			name : LANGUAGE.COMBOVALUE_STOCK,
			id : 'G1'
		}, {
			name : LANGUAGE.COMBOVALUE_RUNNING_CONVERSIONS,
			id : 'G2'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_RIGHT_CHICAG,
			id : 'R6'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_LIAB_CHICAGO,
			id : 'O6'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_RIGHT_FLAT,
			id : 'R4'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_RIGHT_PREMIUM,
			id : 'R5'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_LIAB_FLAT,
			id : 'O4'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_LIAB_PREMIUM,
			id : 'O5'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_RIGHT_SUNDRI,
			id : 'R2'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_RIGHT_CONV,
			id : 'R3'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_LIAB_SUNDRIES,
			id : 'O2'
		}, {
			name : LANGUAGE.COMBOVALUE_FUT_FIN_LIAB_CONV,
			id : 'O3'
		} ]
	});
};
COMBOBOX.getSpec_push_barg_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getSpec_stores_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getSpec_trains_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getSpec_trucks_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getSpec_vessels_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getSrc_tp_fin_mutValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INIT_MARGIN_MUT,
			id : 'IM'
		}, {
			name : LANGUAGE.COMBOVALUE_VAT,
			id : 'VA'
		}, {
			name : LANGUAGE.COMBOVALUE_INVOICE,
			id : 'IN'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODSPOS_RE_PARC,
			id : 'PA'
		}, {
			name : LANGUAGE.COMBOVALUE_GOODSPOS_RE_POS,
			id : 'PO'
		}, {
			name : LANGUAGE.COMBOVALUE_COVERING,
			id : 'CO'
		}, {
			name : LANGUAGE.COMBOVALUE_INTEREST,
			id : 'IT'
		}, {
			name : LANGUAGE.COMBOVALUE_LIABILITY,
			id : 'LI'
		}, {
			name : LANGUAGE.COMBOVALUE_PRE_CALCULATION,
			id : 'PC'
		}, {
			name : LANGUAGE.COMBOVALUE_COST_LINE,
			id : 'CL'
		}, {
			name : LANGUAGE.COMBOVALUE_CURR_TRANSACTION,
			id : 'CT'
		}, {
			name : LANGUAGE.COMBOVALUE_EXTERNAL_RESULT,
			id : 'ER'
		}, {
			name : LANGUAGE.COMBOVALUE_ACCRUAL,
			id : 'AR'
		}, {
			name : LANGUAGE.COMBOVALUE_ACCOUNT,
			id : 'AC'
		} ]
	});
};
COMBOBOX.getStandard_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getStandard_saltm_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getStatusProvisionalIndValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getStatusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ACTIVE_BY_USER,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_INCOMPLETE,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_OBSOLETE,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_UPDATE_PENDING,
			id : 'U'
		}, {
			name : LANGUAGE.COMBOVALUE_ACTIVE_BY_SYSTEM,
			id : 'S'
		} ]
	});
};
COMBOBOX.getStorage_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BARGE,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_MOTOR_BARGE,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_RAIL,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_STORE,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_TRUCK,
			id : 'T'
		}, {
			name : LANGUAGE.COMBOVALUE_VESSEL,
			id : 'V'
		} ]
	});
};
COMBOBOX.getStrtdt_paym_per_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INVOICING_DATE,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_DELIVERY_DATE,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_POSITION_START_DATE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_DOC_RECEIPT_DATE,
			id : 'R'
		}, {
			name : LANGUAGE.COMBOVALUE_B_L_DATE,
			id : 'B'
		}, {
			name : LANGUAGE.COMBOVALUE_ULTIMATE_APPR_DATE,
			id : 'U'
		} ]
	});
};
COMBOBOX.getSubbook_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CREDITORS,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_DEBTORS,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_RELATIONS,
			id : 'R'
		} ]
	});
};
COMBOBOX.getSundries_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getSupplier_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getSup_int_appr_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getSup_int_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getSustainable_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_UNKNOWN,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getTargetchannelValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'print'
		}, {
			name : LANGUAGE.COMBOVALUE_CSV,
			id : 'csv'
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'fax'
		}, {
			name : LANGUAGE.COMBOVALUE_AIDA,
			id : 'aida'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'email'
		} ]
	});
};
COMBOBOX.getTerms_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_EXTERNAL_TEXT__TERMS__IN_CTX,
			id : 'E'
		} ]
	});
};
COMBOBOX.getTerms_tp_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PAYMENT_TERMS,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_RENTAL_SCHEME,
			id : 'R'
		} ]
	});
};
COMBOBOX.getText_typeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_EXTERNAL_TEXT,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_INTERNAL_TEXT,
			id : 'I'
		} ]
	});
};
COMBOBOX.getTiming_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_AT_CREATION_FUTURES_CONTRACT,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_AT_WASHOUT_FUTURES,
			id : 'W'
		} ]
	});
};
COMBOBOX.getToleranceValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ABOUT,
			id : 'A'
		}, {
			name : LANGUAGE.COMBOVALUE_MIN_MAX,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_TOLERANCE,
			id : 'M'
		} ]
	});
};
COMBOBOX.getTotal_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_DAY_TOTAL,
			id : 'D'
		}, {
			name : LANGUAGE.COMBOVALUE_MONTH_TOTAL,
			id : 'M'
		} ]
	});
};
COMBOBOX.getTo_be_cnf_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_CANCELLED,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_TWO_COPIES,
			id : '2'
		} ]
	});
};
COMBOBOX.getTrader_statusValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ACCEPTED,
			id : 'ACC'
		}, {
			name : LANGUAGE.COMBOVALUE_REFUSED,
			id : 'REF'
		} ]
	});
};
COMBOBOX.getTransp_doc_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		}, {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getTransp_doc_tp_sendValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_FAX,
			id : 'F'
		}, {
			name : LANGUAGE.COMBOVALUE_NONE,
			id : '!'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT,
			id : 'M'
		}, {
			name : LANGUAGE.COMBOVALUE_PRINT_FAX,
			id : '2'
		}, {
			name : LANGUAGE.COMBOVALUE_XML,
			id : 'X'
		}, {
			name : LANGUAGE.COMBOVALUE_EMAIL,
			id : 'E'
		} ]
	});
};
COMBOBOX.getTransshipment_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getTranssh_mom_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getTurnover_cum_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PURCHASE,
			id : 'PT'
		}, {
			name : LANGUAGE.COMBOVALUE_SALE_INVOICE,
			id : 'SI'
		}, {
			name : LANGUAGE.COMBOVALUE_SALE_DELIVERY,
			id : 'SD'
		}, {
			name : LANGUAGE.COMBOVALUE_NO_ADDING,
			id : ' '
		} ]
	});
};
COMBOBOX.getTypeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_CHARACTER,
			id : 'CHAR'
		}, {
			name : LANGUAGE.COMBOVALUE_NUMERIC,
			id : 'NUM'
		}, {
			name : LANGUAGE.COMBOVALUE_DATE,
			id : 'DATE'
		} ]
	});
};
COMBOBOX.getType_addr_officeValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_POSTBOX_ADDRESS,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_OFFICE_ADDRESS,
			id : 'O'
		} ]
	});
};
COMBOBOX.getType_addr_po_boxValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_POSTBOX_ADDRESS,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_OFFICE_ADDRESS,
			id : 'O'
		} ]
	});
};
COMBOBOX.getUpd_econ_pos_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_PURCHASE,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_SALE,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_OTHER,
			id : 'O'
		}, {
			name : LANGUAGE.COMBOVALUE_N_A_,
			id : 'N'
		} ]
	});
};
COMBOBOX.getUser_check_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		} ]
	});
};
COMBOBOX.getVat_calc_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getVat_cdValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_ZERO,
			id : '0'
		}, {
			name : LANGUAGE.COMBOVALUE_LOW,
			id : '1'
		}, {
			name : LANGUAGE.COMBOVALUE_HIGH,
			id : '2'
		} ]
	});
};
COMBOBOX.getVat_tpValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_TAXED,
			id : 'VAT'
		}, {
			name : LANGUAGE.COMBOVALUE_ZERO_RATED,
			id : 'ZER'
		}, {
			name : LANGUAGE.COMBOVALUE_TRANSIT,
			id : 'TRA'
		}, {
			name : LANGUAGE.COMBOVALUE_ICV_ICL,
			id : 'ICT'
		}, {
			name : LANGUAGE.COMBOVALUE_ART__23,
			id : 'A23'
		}, {
			name : LANGUAGE.COMBOVALUE_VERLEGD,
			id : 'VER'
		}, {
			name : LANGUAGE.COMBOVALUE_ENTREPOT,
			id : 'ENT'
		}, {
			name : LANGUAGE.COMBOVALUE_EXPORT,
			id : 'EXP'
		}, {
			name : LANGUAGE.COMBOVALUE_ABC_TRANS_,
			id : 'ABC'
		} ]
	});
};
COMBOBOX.getWbt_stateValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_INITIAL,
			id : 'I'
		}, {
			name : LANGUAGE.COMBOVALUE_PROCESSED,
			id : 'P'
		}, {
			name : LANGUAGE.COMBOVALUE_EXCEPTION,
			id : 'E'
		}, {
			name : LANGUAGE.COMBOVALUE_RECEIVED,
			id : 'R'
		} ]
	});
};
COMBOBOX.getWeightcl_dlv_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_SETTLM_AG_CONTRPR,
			id : 'C'
		}, {
			name : LANGUAGE.COMBOVALUE_SETTLM_AG_SPOTPR,
			id : 'S'
		}, {
			name : LANGUAGE.COMBOVALUE_NOT_TO_BE_SETTLED,
			id : 'N'
		} ]
	});
};
COMBOBOX.getXcs_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.getYesNoBlancValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		}, {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_BLANK,
			id : ' '
		} ]
	});
};
COMBOBOX.getZipcd_required_indValues = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.COMBOVALUE_YES,
			id : 'Y'
		}, {
			name : LANGUAGE.COMBOVALUE_NO,
			id : 'N'
		} ]
	});
};
COMBOBOX.GMP_IND_VALUES = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.UNKNOWN,
			id : " "
		}, {
			name : LANGUAGE.GTP,
			id : "G"
		}, {
			name : LANGUAGE.YES,
			id : "Y"
		}, {
			name : LANGUAGE.NO,
			id : "N"
		} ]
	});
};
COMBOBOX.UNKNOWN_YES_NO = function() {
	return new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.UNKNOWN,
			id : "U"
		}, {
			name : LANGUAGE.YES,
			id : "Y"
		}, {
			name : LANGUAGE.NO,
			id : "N"
		} ]
	});
};

// /////////////////////
// Database values
// /////////////////////

function loadComboBoxes() {
	//
	// CH9ACBL
	//
	COMBOBOX.CH9ACBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH9ACBL.LOADED = false;

	COMBOBOX.CH9ACBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH9ACBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH9ACBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH9ACBL.INITIALController = controller;
			COMBOBOX.CH9ACBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH9ACBLService",
					COMBOBOX, "CH9ACBLServiceCallback");
		}
		return COMBOBOX.CH9ACBL;
	};

	COMBOBOX.CH9ACBLServiceCallback = function(data) {
		COMBOBOX.CH9ACBL.LOADED = true;
		COMBOBOX.CH9ACBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno1,
				id : data.result[i].ctrno1
			};
			COMBOBOX.CH9ACBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH9ACBL);
		COMBOBOX.CH9ACBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / version / subctrno / created / ctrtpfx / ctrdte /
	// relidfx / curcdctr / buysellind / noofperiods / curcdbuy / curcdsell /
	// curunitbuy / curunitsell / spotrtectr / spotrteprem / confirmind /
	// reverserteind / basamntprem / extctrno / ctrnoelimination / ctrtpcurreq /
	// companyidcurreq / coveringnocbk / versionelimination / crossrtectr /
	// tobecnfind / mailingtpcnf / languageid / status / lastupdatedby /
	// lastupdate / vcontractdatefrom / vcontractdateto / vduedatefrom /
	// vduedateto / completelyfinalised / partiallyfinalised / notfinalised /
	// interncontract / externcontract / blankcontract / duedate / premrtectr /
	// frwdrtectr / amntfrwdbuy / amntfrwdsell / p_ctr_finalised / final_ind

	//
	// CHAUGBL
	//
	COMBOBOX.CHAUGBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHAUGBL.LOADED = false;

	COMBOBOX.CHAUGBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHAUGBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHAUGBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHAUGBL.INITIALController = controller;
			COMBOBOX.CHAUGBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHAUGBLService",
					COMBOBOX, "CHAUGBLServiceCallback");
		}
		return COMBOBOX.CHAUGBL;
	};

	COMBOBOX.CHAUGBLServiceCallback = function(data) {
		COMBOBOX.CHAUGBL.LOADED = true;
		COMBOBOX.CHAUGBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].authgrpno,
				id : data.result[i].authgrpno
			};
			COMBOBOX.CHAUGBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHAUGBL);
		COMBOBOX.CHAUGBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / authgrp / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHLGRRL
	//
	COMBOBOX.CHLGRRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLGRRL.LOADED = false;

	COMBOBOX.CHLGRRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLGRRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLGRRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLGRRL.INITIALController = controller;
			COMBOBOX.CHLGRRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLGRRLService",
					COMBOBOX, "CHLGRRLServiceCallback");
		}
		return COMBOBOX.CHLGRRL;
	};

	COMBOBOX.CHLGRRLServiceCallback = function(data) {
		COMBOBOX.CHLGRRL.LOADED = true;
		COMBOBOX.CHLGRRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].fmsledgerid,
				id : data.result[i].fmsledgerid
			};
			COMBOBOX.CHLGRRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLGRRL);
		COMBOBOX.CHLGRRL.INITIALCOMBOBOX = null;
	};

	//
	// CH61BBL
	//
	COMBOBOX.CH61BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH61BBL.LOADED = false;

	COMBOBOX.CH61BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH61BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH61BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH61BBL.INITIALController = controller;
			COMBOBOX.CH61BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH61BBLService",
					COMBOBOX, "CH61BBLServiceCallback");
		}
		return COMBOBOX.CH61BBL;
	};

	COMBOBOX.CH61BBLServiceCallback = function(data) {
		COMBOBOX.CH61BBL.LOADED = true;
		COMBOBOX.CH61BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].liabilityno,
				id : data.result[i].liabilityno
			};
			COMBOBOX.CH61BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH61BBL);
		COMBOBOX.CH61BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / invoicabledte / liabilitytp / costgrpid / curcd /
	// amntexclvat / invoiceableind / rgtliaind / actpassind / quantity /
	// completedind / extctrno / trdunitidqty / relid / prodfamid / prodtypeid /
	// prodstypid / origin / termsofdel / locid / incinvoiceid / status /
	// lastupdatedby / descriptionspec / vroutingcode /
	// lastupdateconcurrencycolumn / actualind / ctrno / posseqno / postp /
	// storageid / subctrno / transportno / vsearchgroup

	//
	// CH31YBL
	//
	COMBOBOX.CH31YBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31YBL.LOADED = false;

	COMBOBOX.CH31YBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31YBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31YBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31YBL.INITIALController = controller;
			COMBOBOX.CH31YBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31YBLService",
					COMBOBOX, "CH31YBLServiceCallback");
		}
		return COMBOBOX.CH31YBL;
	};

	COMBOBOX.CH31YBLServiceCallback = function(data) {
		COMBOBOX.CH31YBL.LOADED = true;
		COMBOBOX.CH31YBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH31YBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31YBL);
		COMBOBOX.CH31YBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / termsofdel /
	// locid / pursalind / periodtpind / sortno / priority / trmsofsalid /
	// description / standardsaltmind / excludeind / status / languageid /
	// tolerance / pertpid / printonctr / printoninv

	//
	// CHRERBL
	//
	COMBOBOX.CHRERBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRERBL.LOADED = false;

	COMBOBOX.CHRERBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRERBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRERBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRERBL.INITIALController = controller;
			COMBOBOX.CHRERBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRERBLService",
					COMBOBOX, "CHRERBLServiceCallback");
		}
		return COMBOBOX.CHRERBL;
	};

	COMBOBOX.CHRERBLServiceCallback = function(data) {
		COMBOBOX.CHRERBL.LOADED = true;
		COMBOBOX.CHRERBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].regionfms,
				id : data.result[i].regionfms
			};
			COMBOBOX.CHRERBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRERBL);
		COMBOBOX.CHRERBL.INITIALCOMBOBOX = null;
	};

	//
	// CH42AUL
	//
	COMBOBOX.CH42AUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH42AUL.LOADED = false;

	COMBOBOX.CH42AUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH42AULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH42AUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH42AUL.INITIALController = controller;
			COMBOBOX.CH42AUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH42AULService",
					COMBOBOX, "CH42AULServiceCallback");
		}
		return COMBOBOX.CH42AUL;
	};

	COMBOBOX.CH42AULServiceCallback = function(data) {
		COMBOBOX.CH42AUL.LOADED = true;
		COMBOBOX.CH42AUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH42AUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH42AUL);
		COMBOBOX.CH42AUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / vactionrequestcode / qtyinmt /
	// vdocnosplit / parcno / hdrdocseqno / hdrreqsplitdte / hdrshipperrelid /
	// hdrvlanguageid / hdrvmailingtp / hdrcurcdsplit / hdrsplittingcost /
	// hdrdocno / hdrrequestsplitind / hdrvnoofprints / ordernr /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2 /
	// lastupdateconcurrencycolumn3

	//
	// CHTDDBL
	//
	COMBOBOX.CHTDDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTDDBL.LOADED = false;

	COMBOBOX.CHTDDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTDDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTDDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTDDBL.INITIALController = controller;
			COMBOBOX.CHTDDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTDDBLService",
					COMBOBOX, "CHTDDBLServiceCallback");
		}
		return COMBOBOX.CHTDDBL;
	};

	COMBOBOX.CHTDDBLServiceCallback = function(data) {
		COMBOBOX.CHTDDBL.LOADED = true;
		COMBOBOX.CHTDDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHTDDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTDDBL);
		COMBOBOX.CHTDDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / termsofdel / text / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHDRTBL
	//
	COMBOBOX.CHDRTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHDRTBL.LOADED = false;

	COMBOBOX.CHDRTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHDRTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHDRTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHDRTBL.INITIALController = controller;
			COMBOBOX.CHDRTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHDRTBLService",
					COMBOBOX, "CHDRTBLServiceCallback");
		}
		return COMBOBOX.CHDRTBL;
	};

	COMBOBOX.CHDRTBLServiceCallback = function(data) {
		COMBOBOX.CHDRTBL.LOADED = true;
		COMBOBOX.CHDRTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHDRTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHDRTBL);
		COMBOBOX.CHDRTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / termstp / prodfamid / prodtypeid / prodstypid /
	// origin / termsofdel / locid / pursalind / pertpind / paymtrmsid /
	// rentalschemeid / description / priority / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHTDLRL
	//
	COMBOBOX.CHTDLRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTDLRL.LOADED = false;

	COMBOBOX.CHTDLRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTDLRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTDLRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTDLRL.INITIALController = controller;
			COMBOBOX.CHTDLRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTDLRLService",
					COMBOBOX, "CHTDLRLServiceCallback");
		}
		return COMBOBOX.CHTDLRL;
	};

	COMBOBOX.CHTDLRLServiceCallback = function(data) {
		COMBOBOX.CHTDLRL.LOADED = true;
		COMBOBOX.CHTDLRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].termsofdel,
				id : data.result[i].termsofdel
			};
			COMBOBOX.CHTDLRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTDLRL);
		COMBOBOX.CHTDLRL.INITIALCOMBOBOX = null;
	};

	//
	// CHSRSBL
	//
	COMBOBOX.CHSRSBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHSRSBL.LOADED = false;

	COMBOBOX.CHSRSBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHSRSBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHSRSBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHSRSBL.INITIALController = controller;
			COMBOBOX.CHSRSBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHSRSBLService",
					COMBOBOX, "CHSRSBLServiceCallback");
		}
		return COMBOBOX.CHSRSBL;
	};

	COMBOBOX.CHSRSBLServiceCallback = function(data) {
		COMBOBOX.CHSRSBL.LOADED = true;
		COMBOBOX.CHSRSBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].rentalschemeid,
				id : data.result[i].rentalschemeid
			};
			COMBOBOX.CHSRSBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHSRSBL);
		COMBOBOX.CHSRSBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / status / lastupdate / lastupdatedby
	// / lastupdateconcurrencycolumn

	//
	// CHAUGRL
	//
	COMBOBOX.CHAUGRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHAUGRL.LOADED = false;

	COMBOBOX.CHAUGRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHAUGRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHAUGRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHAUGRL.INITIALController = controller;
			COMBOBOX.CHAUGRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHAUGRLService",
					COMBOBOX, "CHAUGRLServiceCallback");
		}
		return COMBOBOX.CHAUGRL;
	};

	COMBOBOX.CHAUGRLServiceCallback = function(data) {
		COMBOBOX.CHAUGRL.LOADED = true;
		COMBOBOX.CHAUGRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].authgrpno,
				id : data.result[i].authgrpno
			};
			COMBOBOX.CHAUGRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHAUGRL);
		COMBOBOX.CHAUGRL.INITIALCOMBOBOX = null;
	};

	//
	// CHLGRBL
	//
	COMBOBOX.CHLGRBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLGRBL.LOADED = false;

	COMBOBOX.CHLGRBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLGRBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLGRBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLGRBL.INITIALController = controller;
			COMBOBOX.CHLGRBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLGRBLService",
					COMBOBOX, "CHLGRBLServiceCallback");
		}
		return COMBOBOX.CHLGRBL;
	};

	COMBOBOX.CHLGRBLServiceCallback = function(data) {
		COMBOBOX.CHLGRBL.LOADED = true;
		COMBOBOX.CHLGRBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].fmsledgerid,
				id : data.result[i].fmsledgerid
			};
			COMBOBOX.CHLGRBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLGRBL);
		COMBOBOX.CHLGRBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / mutclndte / daytotclndte / mthtotclndte /
	// postotclndte / reloadingind / ledgerid / status / lastupdatedby /
	// lastupdate

	//
	// CH59PBL
	//
	COMBOBOX.CH59PBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH59PBL.LOADED = false;

	COMBOBOX.CH59PBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH59PBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH59PBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH59PBL.INITIALController = controller;
			COMBOBOX.CH59PBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH59PBLService",
					COMBOBOX, "CH59PBLServiceCallback");
		}
		return COMBOBOX.CH59PBL;
	};

	COMBOBOX.CH59PBLServiceCallback = function(data) {
		COMBOBOX.CH59PBL.LOADED = true;
		COMBOBOX.CH59PBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].cnversionno,
				id : data.result[i].cnversionno
			};
			COMBOBOX.CH59PBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH59PBL);
		COMBOBOX.CH59PBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / date / quantity / trdunitid / prodfamidfrom /
	// storagefromid / storagetoid / status / lastupdatedby / lastupdate /
	// descrtp / descr40 / lastupdateconcurrencycolumn

	//
	// CH5JIBL
	//
	COMBOBOX.CH5JIBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5JIBL.LOADED = false;

	COMBOBOX.CH5JIBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5JIBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5JIBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5JIBL.INITIALController = controller;
			COMBOBOX.CH5JIBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5JIBLService",
					COMBOBOX, "CH5JIBLServiceCallback");
		}
		return COMBOBOX.CH5JIBL;
	};

	COMBOBOX.CH5JIBLServiceCallback = function(data) {
		COMBOBOX.CH5JIBL.LOADED = true;
		COMBOBOX.CH5JIBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].addressid,
				id : data.result[i].addressid
			};
			COMBOBOX.CH5JIBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5JIBL);
		COMBOBOX.CH5JIBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / addressline / place / countrycd / defaulttime /
	// addresstype

	//
	// CH63MBL
	//
	COMBOBOX.CH63MBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH63MBL.LOADED = false;

	COMBOBOX.CH63MBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH63MBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH63MBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH63MBL.INITIALController = controller;
			COMBOBOX.CH63MBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH63MBLService",
					COMBOBOX, "CH63MBLServiceCallback");
		}
		return COMBOBOX.CH63MBL;
	};

	COMBOBOX.CH63MBLServiceCallback = function(data) {
		COMBOBOX.CH63MBL.LOADED = true;
		COMBOBOX.CH63MBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].routingcd,
				id : data.result[i].routingcd
			};
			COMBOBOX.CH63MBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH63MBL);
		COMBOBOX.CH63MBL.INITIALCOMBOBOX = null;
	};

	//
	// CHFXHBL
	//
	COMBOBOX.CHFXHBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHFXHBL.LOADED = false;

	COMBOBOX.CHFXHBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHFXHBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHFXHBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHFXHBL.INITIALController = controller;
			COMBOBOX.CHFXHBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHFXHBLService",
					COMBOBOX, "CHFXHBLServiceCallback");
		}
		return COMBOBOX.CHFXHBL;
	};

	COMBOBOX.CHFXHBLServiceCallback = function(data) {
		COMBOBOX.CHFXHBL.LOADED = true;
		COMBOBOX.CHFXHBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHFXHBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHFXHBL);
		COMBOBOX.CHFXHBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / fxpmth / description

	//
	// CHCCPBL
	//
	COMBOBOX.CHCCPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCCPBL.LOADED = false;

	COMBOBOX.CHCCPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCCPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCCPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCCPBL.INITIALController = controller;
			COMBOBOX.CHCCPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCCPBLService",
					COMBOBOX, "CHCCPBLServiceCallback");
		}
		return COMBOBOX.CHCCPBL;
	};

	COMBOBOX.CHCCPBLServiceCallback = function(data) {
		COMBOBOX.CHCCPBL.LOADED = true;
		COMBOBOX.CHCCPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].transactiondte,
				id : data.result[i].transactiondte
			};
			COMBOBOX.CHCCPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCCPBL);
		COMBOBOX.CHCCPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / transactiontime / curcd / transactiontp / ctrno /
	// subctrno / version / curamnt / basamnt / spotrte / curunit /
	// reverserteind / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH32RBL
	//
	COMBOBOX.CH32RBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH32RBL.LOADED = false;

	COMBOBOX.CH32RBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH32RBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH32RBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH32RBL.INITIALController = controller;
			COMBOBOX.CH32RBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH32RBLService",
					COMBOBOX, "CH32RBLServiceCallback");
		}
		return COMBOBOX.CH32RBL;
	};

	COMBOBOX.CH32RBLServiceCallback = function(data) {
		COMBOBOX.CH32RBL.LOADED = true;
		COMBOBOX.CH32RBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].lastupdate,
				id : data.result[i].lastupdate
			};
			COMBOBOX.CH32RBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH32RBL);
		COMBOBOX.CH32RBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ctrno / actioncd / ctrtp / lastupdatedby /
	// chdstatus / lastupdateconcurrencycolumn

	//
	// CHVRTBL
	//
	COMBOBOX.CHVRTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHVRTBL.LOADED = false;

	COMBOBOX.CHVRTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHVRTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHVRTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHVRTBL.INITIALController = controller;
			COMBOBOX.CHVRTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHVRTBLService",
					COMBOBOX, "CHVRTBLServiceCallback");
		}
		return COMBOBOX.CHVRTBL;
	};

	COMBOBOX.CHVRTBLServiceCallback = function(data) {
		COMBOBOX.CHVRTBL.LOADED = true;
		COMBOBOX.CHVRTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].countrycd,
				id : data.result[i].countrycd
			};
			COMBOBOX.CHVRTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHVRTBL);
		COMBOBOX.CHVRTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / vatcd / startdte / vatrte / status / lastupdatedby
	// / lastupdate / lastupdateconcurrencycolumn

	//
	// CHRPRBL
	//
	COMBOBOX.CHRPRBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRPRBL.LOADED = false;

	COMBOBOX.CHRPRBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRPRBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRPRBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRPRBL.INITIALController = controller;
			COMBOBOX.CHRPRBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRPRBLService",
					COMBOBOX, "CHRPRBLServiceCallback");
		}
		return COMBOBOX.CHRPRBL;
	};

	COMBOBOX.CHRPRBLServiceCallback = function(data) {
		COMBOBOX.CHRPRBL.LOADED = true;
		COMBOBOX.CHRPRBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHRPRBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRPRBL);
		COMBOBOX.CHRPRBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / locid / presrelid / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH91KBL
	//
	COMBOBOX.CH91KBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH91KBL.LOADED = false;

	COMBOBOX.CH91KBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH91KBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH91KBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH91KBL.INITIALController = controller;
			COMBOBOX.CH91KBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH91KBLService",
					COMBOBOX, "CH91KBLServiceCallback");
		}
		return COMBOBOX.CH91KBL;
	};

	COMBOBOX.CH91KBLServiceCallback = function(data) {
		COMBOBOX.CH91KBL.LOADED = true;
		COMBOBOX.CH91KBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].coveringno,
				id : data.result[i].coveringno
			};
			COMBOBOX.CH91KBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH91KBL);
		COMBOBOX.CH91KBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / rterequestdte / reqrtetime / coveringtp /
	// journalid / pos_lia_ind / puchasesaleind / curcd / curamnt / ctr_no /
	// subctr_no / prodfamid / prodtypeid / prodstypid / origin / termsofdel /
	// locid / descr_spec_pos / status / lastupdatedby / lastupdate /
	// identsource / bcuramnt / reqatbankdte / requestbanktime / spotrte /
	// assignrtedte / rteassigntime / ftxtp / journallineno / postp / posseqno /
	// coveringnocbk

	//
	// CH3CSBL
	//
	COMBOBOX.CH3CSBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3CSBL.LOADED = false;

	COMBOBOX.CH3CSBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3CSBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3CSBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3CSBL.INITIALController = controller;
			COMBOBOX.CH3CSBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3CSBLService",
					COMBOBOX, "CH3CSBLServiceCallback");
		}
		return COMBOBOX.CH3CSBL;
	};

	COMBOBOX.CH3CSBLServiceCallback = function(data) {
		COMBOBOX.CH3CSBL.LOADED = true;
		COMBOBOX.CH3CSBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH3CSBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3CSBL);
		COMBOBOX.CH3CSBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / sortno / trmsofsalid / description /
	// standardsaltmind / status / languageid / tolerance / printonctr /
	// printoninv / lastupdateconcurrencycolumn

	//
	// CHJKLBL
	//
	COMBOBOX.CHJKLBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHJKLBL.LOADED = false;

	COMBOBOX.CHJKLBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHJKLBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHJKLBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHJKLBL.INITIALController = controller;
			COMBOBOX.CHJKLBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHJKLBLService",
					COMBOBOX, "CHJKLBLServiceCallback");
		}
		return COMBOBOX.CHJKLBL;
	};

	COMBOBOX.CHJKLBLServiceCallback = function(data) {
		COMBOBOX.CHJKLBL.LOADED = true;
		COMBOBOX.CHJKLBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].journalid,
				id : data.result[i].journalid
			};
			COMBOBOX.CHJKLBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHJKLBL);
		COMBOBOX.CHJKLBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / journalcolumnno / description / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH37ABL
	//
	COMBOBOX.CH37ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH37ABL.LOADED = false;

	COMBOBOX.CH37ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH37ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH37ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH37ABL.INITIALController = controller;
			COMBOBOX.CH37ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH37ABLService",
					COMBOBOX, "CH37ABLServiceCallback");
		}
		return COMBOBOX.CH37ABL;
	};

	COMBOBOX.CH37ABLServiceCallback = function(data) {
		COMBOBOX.CH37ABL.LOADED = true;
		COMBOBOX.CH37ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CH37ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH37ABL);
		COMBOBOX.CH37ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ctrno / subctrno / ctrdte / pursalind / prodfamid
	// / prodtypeid / prodstypid / origin / termsofdel / locid / bsrelid /
	// quantity / perstartdte / userresp / userinput / curcdcov / gbpusd /
	// gbpeur / curcd / price / curcdcomm / commission / paymtrmsid /
	// pymperindays / curcdbas / valbase / matchctrno / matchsubctrno /
	// curcdspread / valspread / curcdship / valship / curcddischg / valdischg /
	// curcdstore / valstore / curcdcarry / valcarry / curcddeliv / valdeliv /
	// curcdcreditterms / valcreditterms / curcdpl / valpl / ratepl /
	// vagen_comment / status / lastupdatedby / lastupdate / vprofitcomplete /
	// vctrdtefrom / vctrdteto / vregion / lastupdateconcurrencycolumn

	//
	// CHPGRBL
	//
	COMBOBOX.CHPGRBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPGRBL.LOADED = false;

	COMBOBOX.CHPGRBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPGRBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPGRBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPGRBL.INITIALController = controller;
			COMBOBOX.CHPGRBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPGRBLService",
					COMBOBOX, "CHPGRBLServiceCallback");
		}
		return COMBOBOX.CHPGRBL;
	};

	COMBOBOX.CHPGRBLServiceCallback = function(data) {
		COMBOBOX.CHPGRBL.LOADED = true;
		COMBOBOX.CHPGRBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodgroupid,
				id : data.result[i].prodgroupid
			};
			COMBOBOX.CHPGRBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPGRBL);
		COMBOBOX.CHPGRBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / status / lastupdatedby / lastupdate
	// / lastupdateconcurrencycolumn

	//
	// CHCSHBL
	//
	COMBOBOX.CHCSHBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCSHBL.LOADED = false;

	COMBOBOX.CHCSHBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCSHBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCSHBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCSHBL.INITIALController = controller;
			COMBOBOX.CHCSHBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCSHBLService",
					COMBOBOX, "CHCSHBLServiceCallback");
		}
		return COMBOBOX.CHCSHBL;
	};

	COMBOBOX.CHCSHBLServiceCallback = function(data) {
		COMBOBOX.CHCSHBL.LOADED = true;
		COMBOBOX.CHCSHBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CHCSHBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCSHBL);
		COMBOBOX.CHCSHBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / costrteid / description

	//
	// CH56DBL
	//
	COMBOBOX.CH56DBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH56DBL.LOADED = false;

	COMBOBOX.CH56DBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH56DBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH56DBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH56DBL.INITIALController = controller;
			COMBOBOX.CH56DBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH56DBLService",
					COMBOBOX, "CH56DBLServiceCallback");
		}
		return COMBOBOX.CH56DBL;
	};

	COMBOBOX.CH56DBLServiceCallback = function(data) {
		COMBOBOX.CH56DBL.LOADED = true;
		COMBOBOX.CH56DBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH56DBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH56DBL);
		COMBOBOX.CH56DBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / docseqno / docno / supplcustrelid /
	// qtyinkg / qtydischarged / trdunitqtydisc / qtyprorata / trdunitqtyprora /
	// qtydischargedkg / qtyproratakg / parcno / prodfamid / prodtypeid /
	// prodstypid / origin / termsofdel / locid / postp / posseqno / supintrelid
	// / lastupdateconcurrencycolumn

	//
	// CHLEXBL
	//
	COMBOBOX.CHLEXBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLEXBL.LOADED = false;

	COMBOBOX.CHLEXBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLEXBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLEXBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLEXBL.INITIALController = controller;
			COMBOBOX.CHLEXBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLEXBLService",
					COMBOBOX, "CHLEXBLServiceCallback");
		}
		return COMBOBOX.CHLEXBL;
	};

	COMBOBOX.CHLEXBLServiceCallback = function(data) {
		COMBOBOX.CHLEXBL.LOADED = true;
		COMBOBOX.CHLEXBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ledgerid,
				id : data.result[i].ledgerid
			};
			COMBOBOX.CHLEXBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLEXBL);
		COMBOBOX.CHLEXBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / accnttp / description / subbookind / genericind /
	// retntndaysmut / retntndaysdaytot / retntndaysmthtot / retntndayspostot /
	// curcoveringind / reconcilcheckind / balresultind / specgroup / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHTRABL
	//
	COMBOBOX.CHTRABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTRABL.LOADED = false;

	COMBOBOX.CHTRABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTRABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTRABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTRABL.INITIALController = controller;
			COMBOBOX.CHTRABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTRABLService",
					COMBOBOX, "CHTRABLServiceCallback");
		}
		return COMBOBOX.CHTRABL;
	};

	COMBOBOX.CHTRABLServiceCallback = function(data) {
		COMBOBOX.CHTRABL.LOADED = true;
		COMBOBOX.CHTRABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].transportno,
				id : data.result[i].transportno
			};
			COMBOBOX.CHTRABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTRABL);
		COMBOBOX.CHTRABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / storagetp / storageid / description /
	// destinatstartdte / lociddest / departurestartdte / locidloading /
	// loadingstartdte / loadingenddte / departureenddte / destinatenddte /
	// dischargestartdte / dischargeenddte / mapdte / voyagetrms /
	// shipownerrelid / agentrelid / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH41GUL
	//
	COMBOBOX.CH41GUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH41GUL.LOADED = false;

	COMBOBOX.CH41GUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH41GULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH41GUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH41GUL.INITIALController = controller;
			COMBOBOX.CH41GUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH41GULService",
					COMBOBOX, "CH41GULServiceCallback");
		}
		return COMBOBOX.CH41GUL;
	};

	COMBOBOX.CH41GULServiceCallback = function(data) {
		COMBOBOX.CH41GUL.LOADED = true;
		COMBOBOX.CH41GUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH41GUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH41GUL);
		COMBOBOX.CH41GUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / vtargetplanningno / planningnoppi /
	// ppaseqnoppi / lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2

	//
	// CHFP4BL
	//
	COMBOBOX.CHFP4BL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHFP4BL.LOADED = false;

	COMBOBOX.CHFP4BL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHFP4BLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHFP4BL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHFP4BL.INITIALController = controller;
			COMBOBOX.CHFP4BL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHFP4BLService",
					COMBOBOX, "CHFP4BLServiceCallback");
		}
		return COMBOBOX.CHFP4BL;
	};

	COMBOBOX.CHFP4BLServiceCallback = function(data) {
		COMBOBOX.CHFP4BL.LOADED = true;
		COMBOBOX.CHFP4BL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].curcd,
				id : data.result[i].curcd
			};
			COMBOBOX.CHFP4BL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHFP4BL);
		COMBOBOX.CHFP4BL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / startdte / status

	//
	// CH5IAUL
	//
	COMBOBOX.CH5IAUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5IAUL.LOADED = false;

	COMBOBOX.CH5IAUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5IAULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5IAUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5IAUL.INITIALController = controller;
			COMBOBOX.CH5IAUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5IAULService",
					COMBOBOX, "CH5IAULServiceCallback");
		}
		return COMBOBOX.CH5IAUL;
	};

	COMBOBOX.CH5IAULServiceCallback = function(data) {
		COMBOBOX.CH5IAUL.LOADED = true;
		COMBOBOX.CH5IAUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5IAUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5IAUL);
		COMBOBOX.CH5IAUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / storelocid / transportno /
	// prodfamid / ctrno / subctrno / qtyinmt / price / curcd / ctrdte /
	// startdte / duedate / bankaccntowncomp / mailingtpbs / languageidbs /
	// freetext / bsrelid / prodtypeid / prodstypid / origin / termsofdel /
	// locid / postp / posseqno / countrycdours / countrycdothpty / pursalind /
	// parctp / paymtrmsid / ordernr / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / lastupdateconcurrencycolumn3 /
	// lastupdateconcurrencycolumn4

	//
	// CH43ABL
	//
	COMBOBOX.CH43ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH43ABL.LOADED = false;

	COMBOBOX.CH43ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH43ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH43ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH43ABL.INITIALController = controller;
			COMBOBOX.CH43ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH43ABLService",
					COMBOBOX, "CH43ABLServiceCallback");
		}
		return COMBOBOX.CH43ABL;
	};

	COMBOBOX.CH43ABLServiceCallback = function(data) {
		COMBOBOX.CH43ABL.LOADED = true;
		COMBOBOX.CH43ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH43ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH43ABL);
		COMBOBOX.CH43ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parctp / ctrno / termsofdel / locid /
	// ppaqtyinmt / ppasubno / fpaseqno / fixno / fixdte / startdte / custref /
	// storeref / haulrelid / haulrte / curcd / description / haulref / bsrelid
	// / ctrnobs / confsentind / confcusdte / confstoredte / confhauldte /
	// subctrno / prodfamid / prodtypeid / prodstypid / fpaqtyinmt / fpano /
	// storelocid / parcno / wbtno / status / vactioncd / nachfristno / efrseqno
	// / alttod / haulageloc / colldate / colltime / deltime / cust /
	// rechargecurcd / rechargerte / storagetp / vctrtext / remark /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2 /
	// timestamphaulier / timestampstore / userhaulier / userstore / zip / place

	//
	// CHJAMBL
	//
	COMBOBOX.CHJAMBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHJAMBL.LOADED = false;

	COMBOBOX.CHJAMBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHJAMBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHJAMBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHJAMBL.INITIALController = controller;
			COMBOBOX.CHJAMBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHJAMBLService",
					COMBOBOX, "CHJAMBLServiceCallback");
		}
		return COMBOBOX.CHJAMBL;
	};

	COMBOBOX.CHJAMBLServiceCallback = function(data) {
		COMBOBOX.CHJAMBL.LOADED = true;
		COMBOBOX.CHJAMBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].journalid,
				id : data.result[i].journalid
			};
			COMBOBOX.CHJAMBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHJAMBL);
		COMBOBOX.CHJAMBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / journalcolumnno / seqno / description / dcind /
	// status / lastupdatedby / lastupdate / prodfamboundind / regionlinkedind /
	// fmsregionid / additionqtyind / curaddamntind / reverseind / updeconposind
	// / resulttp / turnovercumtp / fillbcuramntind / ledgerid / prodfamid /
	// lastupdateconcurrencycolumn

	//
	// CH3DDBL
	//
	COMBOBOX.CH3DDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3DDBL.LOADED = false;

	COMBOBOX.CH3DDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3DDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3DDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3DDBL.INITIALController = controller;
			COMBOBOX.CH3DDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3DDBLService",
					COMBOBOX, "CH3DDBLServiceCallback");
		}
		return COMBOBOX.CH3DDBL;
	};

	COMBOBOX.CH3DDBLServiceCallback = function(data) {
		COMBOBOX.CH3DDBL.LOADED = true;
		COMBOBOX.CH3DDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH3DDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3DDBL);
		COMBOBOX.CH3DDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / perstartdte / perenddte / price /
	// premium / quantity / vfixedquantity / vquantitynominated /
	// vaveragedpremium / vquantitypremium / vcurcdpriced / vaveragedprice /
	// vquantitypriced / minqty / maxqty / ctrnobs / ctrnobroker / status /
	// fxpmth / fxpyear / actioncd / confirmwarning / openind /
	// lastupdateconcurrencycolumn

	//
	// CHSCDBL
	//
	COMBOBOX.CHSCDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHSCDBL.LOADED = false;

	COMBOBOX.CHSCDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHSCDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHSCDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHSCDBL.INITIALController = controller;
			COMBOBOX.CHSCDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHSCDBLService",
					COMBOBOX, "CHSCDBLServiceCallback");
		}
		return COMBOBOX.CHSCDBL;
	};

	COMBOBOX.CHSCDBLServiceCallback = function(data) {
		COMBOBOX.CHSCDBL.LOADED = true;
		COMBOBOX.CHSCDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHSCDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHSCDBL);
		COMBOBOX.CHSCDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / trmsofsalid / text / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHVATBL
	//
	COMBOBOX.CHVATBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHVATBL.LOADED = false;

	COMBOBOX.CHVATBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHVATBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHVATBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHVATBL.INITIALController = controller;
			COMBOBOX.CHVATBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHVATBLService",
					COMBOBOX, "CHVATBLServiceCallback");
		}
		return COMBOBOX.CHVATBL;
	};

	COMBOBOX.CHVATBLServiceCallback = function(data) {
		COMBOBOX.CHVATBL.LOADED = true;
		COMBOBOX.CHVATBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].countrycd,
				id : data.result[i].countrycd
			};
			COMBOBOX.CHVATBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHVATBL);
		COMBOBOX.CHVATBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / vatcd / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHCO2BL
	//
	COMBOBOX.CHCO2BL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCO2BL.LOADED = false;

	COMBOBOX.CHCO2BL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCO2BLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCO2BL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCO2BL.INITIALController = controller;
			COMBOBOX.CHCO2BL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCO2BLService",
					COMBOBOX, "CHCO2BLServiceCallback");
		}
		return COMBOBOX.CHCO2BL;
	};

	COMBOBOX.CHCO2BLServiceCallback = function(data) {
		COMBOBOX.CHCO2BL.LOADED = true;
		COMBOBOX.CHCO2BL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHCO2BL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCO2BL);
		COMBOBOX.CHCO2BL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / co2value / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH68EBL
	//
	COMBOBOX.CH68EBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH68EBL.LOADED = false;

	COMBOBOX.CH68EBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH68EBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH68EBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH68EBL.INITIALController = controller;
			COMBOBOX.CH68EBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH68EBLService",
					COMBOBOX, "CH68EBLServiceCallback");
		}
		return COMBOBOX.CH68EBL;
	};

	COMBOBOX.CH68EBLServiceCallback = function(data) {
		COMBOBOX.CH68EBL.LOADED = true;
		COMBOBOX.CH68EBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].coveringno,
				id : data.result[i].coveringno
			};
			COMBOBOX.CH68EBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH68EBL);
		COMBOBOX.CH68EBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / rterequestdte / reqrtetime / puchasesaleind /
	// curcd / curamnt / coveringtp / prodfamid / ftxtp / journalid / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH83HBL
	//
	COMBOBOX.CH83HBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH83HBL.LOADED = false;

	COMBOBOX.CH83HBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH83HBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH83HBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH83HBL.INITIALController = controller;
			COMBOBOX.CH83HBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH83HBLService",
					COMBOBOX, "CH83HBLServiceCallback");
		}
		return COMBOBOX.CH83HBL;
	};

	COMBOBOX.CH83HBLServiceCallback = function(data) {
		COMBOBOX.CH83HBL.LOADED = true;
		COMBOBOX.CH83HBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH83HBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH83HBL);
		COMBOBOX.CH83HBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / seqnoqcl / relid / prodfamid / prodtypeid /
	// prodstypid / qualitycertid / qualitycertcd / messagetext / useridcreator
	// / created / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH31XBL
	//
	COMBOBOX.CH31XBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31XBL.LOADED = false;

	COMBOBOX.CH31XBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31XBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31XBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31XBL.INITIALController = controller;
			COMBOBOX.CH31XBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31XBLService",
					COMBOBOX, "CH31XBLServiceCallback");
		}
		return COMBOBOX.CH31XBL;
	};

	COMBOBOX.CH31XBLServiceCallback = function(data) {
		COMBOBOX.CH31XBL.LOADED = true;
		COMBOBOX.CH31XBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH31XBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31XBL);
		COMBOBOX.CH31XBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / sortno / qualitytpid / qltdescription
	// / anaind / qualitytrmstp / qualitytrmsprt / perc / slashperc /
	// execsettlmperc / description / explication / percdevto1 / multiplfactor1
	// / percdevto2 / multiplfactor2 / percdevto3 / multiplfactor3 / percdevto4
	// / multiplfactor4 / percdevto5 / multiplfactor5 / status

	//
	// CH81EBL
	//
	COMBOBOX.CH81EBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH81EBL.LOADED = false;

	COMBOBOX.CH81EBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH81EBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH81EBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH81EBL.INITIALController = controller;
			COMBOBOX.CH81EBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH81EBLService",
					COMBOBOX, "CH81EBLServiceCallback");
		}
		return COMBOBOX.CH81EBL;
	};

	COMBOBOX.CH81EBLServiceCallback = function(data) {
		COMBOBOX.CH81EBL.LOADED = true;
		COMBOBOX.CH81EBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].samplparcno,
				id : data.result[i].samplparcno
			};
			COMBOBOX.CH81EBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH81EBL);
		COMBOBOX.CH81EBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / anaseqno / qualitytpid / percentage / description
	// / prodfamid / prodtypeid / status / lastupdateconcurrencycolumn

	//
	// CH3HBBL
	//
	COMBOBOX.CH3HBBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3HBBL.LOADED = false;

	COMBOBOX.CH3HBBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3HBBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3HBBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3HBBL.INITIALController = controller;
			COMBOBOX.CH3HBBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3HBBLService",
					COMBOBOX, "CH3HBBLServiceCallback");
		}
		return COMBOBOX.CH3HBBL;
	};

	COMBOBOX.CH3HBBLServiceCallback = function(data) {
		COMBOBOX.CH3HBBL.LOADED = true;
		COMBOBOX.CH3HBBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH3HBBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3HBBL);
		COMBOBOX.CH3HBBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / ctrqty / trdunitidqty / curcd / price /
	// trdunitidpric / ctrnoframe / subctrnoframe / status / lastupdatedby /
	// lastupdate

	//
	// CH41FBL
	//
	COMBOBOX.CH41FBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH41FBL.LOADED = false;

	COMBOBOX.CH41FBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH41FBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH41FBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH41FBL.INITIALController = controller;
			COMBOBOX.CH41FBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH41FBLService",
					COMBOBOX, "CH41FBLServiceCallback");
		}
		return COMBOBOX.CH41FBL;
	};

	COMBOBOX.CH41FBLServiceCallback = function(data) {
		COMBOBOX.CH41FBL.LOADED = true;
		COMBOBOX.CH41FBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parcno,
				id : data.result[i].parcno
			};
			COMBOBOX.CH41FBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH41FBL);
		COMBOBOX.CH41FBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / pursalind / prodtypeid / prodstypid / origin /
	// termsofdel / locid / ctrdte / bsrelid / vtoplanqty / vopenqtymin /
	// vopenqtymax / vopenqty / price / curcd / trdunitidpric / ctrno / subctrno
	// / ctrnobs / ctrnobroker / descriptionspec / quantity / qtyinkg / balinkg
	// / ppaquantity / plannedqtycdt / quantitycdt / minqty / maxqty /
	// trdunitidqtychd / weightinkgunt / ctrtp / postp / posseqno / perenddte /
	// fullypricedind / releaseno / startdte / originateind / bldte /
	// vparbalinmt / lastupdateconcurrencycolumn / perstartdte / prodfamid /
	// region

	//
	// CH5EBBL
	//
	COMBOBOX.CH5EBBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5EBBL.LOADED = false;

	COMBOBOX.CH5EBBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5EBBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5EBBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5EBBL.INITIALController = controller;
			COMBOBOX.CH5EBBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5EBBLService",
					COMBOBOX, "CH5EBBLServiceCallback");
		}
		return COMBOBOX.CH5EBBL;
	};

	COMBOBOX.CH5EBBLServiceCallback = function(data) {
		COMBOBOX.CH5EBBL.LOADED = true;
		COMBOBOX.CH5EBBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].circleno,
				id : data.result[i].circleno
			};
			COMBOBOX.CH5EBBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5EBBL);
		COMBOBOX.CH5EBBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / picseqno / sortno / relidfrom / relidto / price /
	// trdunitidpric / quantity / trdunitidqty / sendto / languageid / mailingtp
	// / ctrno / subctrno / extctrno / pursalind / ctrtp / parcno / status /
	// lastupdatedby / vcindexparcel / parctp / prodfamid / prodtypeid /
	// prodstypid / origin / termsofdel / locid / postp / posseqno /
	// descriptionspec / planningno / ppaseqno / ppatp / bsrelid /
	// parcnofulflmnt / fullypricedind / ultimateapprdte / descr30 /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn3

	//
	// CHTDLBL
	//
	COMBOBOX.CHTDLBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTDLBL.LOADED = false;

	COMBOBOX.CHTDLBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTDLBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTDLBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTDLBL.INITIALController = controller;
			COMBOBOX.CHTDLBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTDLBLService",
					COMBOBOX, "CHTDLBLServiceCallback");
		}
		return COMBOBOX.CHTDLBL;
	};

	COMBOBOX.CHTDLBLServiceCallback = function(data) {
		COMBOBOX.CHTDLBL.LOADED = true;
		COMBOBOX.CHTDLBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].termsofdel,
				id : data.result[i].termsofdel
			};
			COMBOBOX.CHTDLBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTDLBL);
		COMBOBOX.CHTDLBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / storagetp / description / text / foreigndlvind /
	// ecdlvind / momentofdlvind / nomapprind / paymtrmsid / curcd / curcdprem /
	// exstoreind / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH55ABL
	//
	COMBOBOX.CH55ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH55ABL.LOADED = false;

	COMBOBOX.CH55ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH55ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH55ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH55ABL.INITIALController = controller;
			COMBOBOX.CH55ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH55ABLService",
					COMBOBOX, "CH55ABLServiceCallback");
		}
		return COMBOBOX.CH55ABL;
	};

	COMBOBOX.CH55ABLServiceCallback = function(data) {
		COMBOBOX.CH55ABL.LOADED = true;
		COMBOBOX.CH55ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH55ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH55ABL);
		COMBOBOX.CH55ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / pursalind / qtyinmtppa /
	// qtydischarged / statusppa / docseqnobldo / trdunitqtydisc / prodfamid /
	// totalqtydischv / transportno / loadingstartdte / departurestartdte /
	// destinatstartdte / locidloading / dischargeenddte / lociddest /
	// termsofdelfromv / termsofdeltov / supintrelid / dischqtyinmtv /
	// prodtypeid / prodstypid / origin / qtyinmtparv / weightcldlvind / docno /
	// vattp / termsofdel / locid / bsrelid / parctp / cnversionno / postp /
	// posseqno / qtyinkg / balinkg / bal / ctrno / subctrno / statuspar /
	// momentofdlvind / storageid / dischargecbv / momofdlvcbv / ctrtp /
	// fullypricedind / supintrelidloc / requestsplitind / ppatp / orderind /
	// originateind / lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2
	// / lastupdateconcurrencycolumn4 / lastupdateconcurrencycolumn5 /
	// lastupdateconcurrencycolumn7

	//
	// CHSLKBL
	//
	COMBOBOX.CHSLKBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHSLKBL.LOADED = false;

	COMBOBOX.CHSLKBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHSLKBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHSLKBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHSLKBL.INITIALController = controller;
			COMBOBOX.CHSLKBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHSLKBLService",
					COMBOBOX, "CHSLKBLServiceCallback");
		}
		return COMBOBOX.CHSLKBL;
	};

	COMBOBOX.CHSLKBLServiceCallback = function(data) {
		COMBOBOX.CHSLKBL.LOADED = true;
		COMBOBOX.CHSLKBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].stringno,
				id : data.result[i].stringno
			};
			COMBOBOX.CHSLKBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHSLKBL);
		COMBOBOX.CHSLKBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / seqno / name / place / status / lastupdatedby /
	// lastupdate / bsrelidv / lastupdateconcurrencycolumn

	//
	// CH21LBL
	//
	COMBOBOX.CH21LBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH21LBL.LOADED = false;

	COMBOBOX.CH21LBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH21LBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH21LBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH21LBL.INITIALController = controller;
			COMBOBOX.CH21LBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH21LBLService",
					COMBOBOX, "CH21LBLServiceCallback");
		}
		return COMBOBOX.CH21LBL;
	};

	COMBOBOX.CH21LBLServiceCallback = function(data) {
		COMBOBOX.CH21LBL.LOADED = true;
		COMBOBOX.CH21LBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].orderid,
				id : data.result[i].orderid
			};
			COMBOBOX.CH21LBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH21LBL);
		COMBOBOX.CH21LBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / vparc_no / vord_quantity

	//
	// CHSTOBL
	//
	COMBOBOX.CHSTOBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHSTOBL.LOADED = false;

	COMBOBOX.CHSTOBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHSTOBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHSTOBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHSTOBL.INITIALController = controller;
			COMBOBOX.CHSTOBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHSTOBLService",
					COMBOBOX, "CHSTOBLServiceCallback");
		}
		return COMBOBOX.CHSTOBL;
	};

	COMBOBOX.CHSTOBLServiceCallback = function(data) {
		COMBOBOX.CHSTOBL.LOADED = true;
		COMBOBOX.CHSTOBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].storagetp,
				id : data.result[i].storagetp
			};
			COMBOBOX.CHSTOBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHSTOBL);
		COMBOBOX.CHSTOBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / storageid / description / explication /
	// identification / namevesselstorge / shipconstryear / nameshipowner /
	// relid / locid / countrycd / status / lastupdatedby / lastupdate /
	// namemotorbargestorge / namestorestorge / relidstore / relidtruck /
	// namestoreowner / nametruckowner / countrycdtruck / identificationtruck /
	// identificationrail / identificationbarge / identificationmotorbarge /
	// identificationvessel / lastupdateconcurrencycolumn

	//
	// CHVADBL
	//
	COMBOBOX.CHVADBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHVADBL.LOADED = false;

	COMBOBOX.CHVADBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHVADBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHVADBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHVADBL.INITIALController = controller;
			COMBOBOX.CHVADBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHVADBLService",
					COMBOBOX, "CHVADBLServiceCallback");
		}
		return COMBOBOX.CHVADBL;
	};

	COMBOBOX.CHVADBLServiceCallback = function(data) {
		COMBOBOX.CHVADBL.LOADED = true;
		COMBOBOX.CHVADBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHVADBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHVADBL);
		COMBOBOX.CHVADBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / countrycd / vatcd / description / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHRESBL
	//
	COMBOBOX.CHRESBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRESBL.LOADED = false;

	COMBOBOX.CHRESBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRESBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRESBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRESBL.INITIALController = controller;
			COMBOBOX.CHRESBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRESBLService",
					COMBOBOX, "CHRESBLServiceCallback");
		}
		return COMBOBOX.CHRESBL;
	};

	COMBOBOX.CHRESBLServiceCallback = function(data) {
		COMBOBOX.CHRESBL.LOADED = true;
		COMBOBOX.CHRESBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].fmssubbookingid,
				id : data.result[i].fmssubbookingid
			};
			COMBOBOX.CHRESBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRESBL);
		COMBOBOX.CHRESBL.INITIALCOMBOBOX = null;
	};

	//
	// CH3BQBL
	//
	COMBOBOX.CH3BQBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3BQBL.LOADED = false;

	COMBOBOX.CH3BQBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3BQBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3BQBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3BQBL.INITIALController = controller;
			COMBOBOX.CH3BQBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3BQBLService",
					COMBOBOX, "CH3BQBLServiceCallback");
		}
		return COMBOBOX.CH3BQBL;
	};

	COMBOBOX.CH3BQBLServiceCallback = function(data) {
		COMBOBOX.CH3BQBL.LOADED = true;
		COMBOBOX.CH3BQBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH3BQBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3BQBL);
		COMBOBOX.CH3BQBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / sortno / qualitytpid / qltdescription / anaind /
	// qualitytrmstp / qualitytrmsprt / perc / slashperc / execsettlmperc /
	// description / explication / percdevto1 / multiplfactor1 / percdevto2 /
	// multiplfactor2 / percdevto3 / multiplfactor3 / percdevto4 /
	// multiplfactor4 / percdevto5 / multiplfactor5 / status /
	// lastupdateconcurrencycolumn

	//
	// CHSCNBL
	//
	COMBOBOX.CHSCNBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHSCNBL.LOADED = false;

	COMBOBOX.CHSCNBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHSCNBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHSCNBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHSCNBL.INITIALController = controller;
			COMBOBOX.CHSCNBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHSCNBLService",
					COMBOBOX, "CHSCNBLServiceCallback");
		}
		return COMBOBOX.CHSCNBL;
	};

	COMBOBOX.CHSCNBLServiceCallback = function(data) {
		COMBOBOX.CHSCNBL.LOADED = true;
		COMBOBOX.CHSCNBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].trmsofsalid,
				id : data.result[i].trmsofsalid
			};
			COMBOBOX.CHSCNBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHSCNBL);
		COMBOBOX.CHSCNBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / text / standardind / weightcldlvind
	// / sealtp / noofdaysext / tolerance / supintapprind / mailingtpappr /
	// permillagesurplus / pricconstruction / pricpremctrind / levyind /
	// sellbuychoicind / portpreadvind / languageid / lab1stanrelid /
	// lab2ndanrelid / comitteerelid / majcostgrpid / majcostrteid / status /
	// lastupdatedby / lastupdate / printonctr / printoninv / printonapp /
	// lastupdateconcurrencycolumn

	//
	// CHSRTBL
	//
	COMBOBOX.CHSRTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHSRTBL.LOADED = false;

	COMBOBOX.CHSRTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHSRTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHSRTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHSRTBL.INITIALController = controller;
			COMBOBOX.CHSRTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHSRTBLService",
					COMBOBOX, "CHSRTBLServiceCallback");
		}
		return COMBOBOX.CHSRTBL;
	};

	COMBOBOX.CHSRTBLServiceCallback = function(data) {
		COMBOBOX.CHSRTBL.LOADED = true;
		COMBOBOX.CHSRTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].rentalschemeid,
				id : data.result[i].rentalschemeid
			};
			COMBOBOX.CHSRTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHSRTBL);
		COMBOBOX.CHSRTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / fromday / rentalrte / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHXHPRL
	//
	COMBOBOX.CHXHPRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHXHPRL.LOADED = false;

	COMBOBOX.CHXHPRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHXHPRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHXHPRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHXHPRL.INITIALController = controller;
			COMBOBOX.CHXHPRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHXHPRLService",
					COMBOBOX, "CHXHPRLServiceCallback");
		}
		return COMBOBOX.CHXHPRL;
	};

	COMBOBOX.CHXHPRLServiceCallback = function(data) {
		COMBOBOX.CHXHPRL.LOADED = true;
		COMBOBOX.CHXHPRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].cnversionno,
				id : data.result[i].cnversionno
			};
			COMBOBOX.CHXHPRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHXHPRL);
		COMBOBOX.CHXHPRL.INITIALCOMBOBOX = null;
	};

	//
	// CH13ABL
	//
	COMBOBOX.CH13ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH13ABL.LOADED = false;

	COMBOBOX.CH13ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH13ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH13ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH13ABL.INITIALController = controller;
			COMBOBOX.CH13ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH13ABLService",
					COMBOBOX, "CH13ABLServiceCallback");
		}
		return COMBOBOX.CH13ABL;
	};

	COMBOBOX.CH13ABLServiceCallback = function(data) {
		COMBOBOX.CH13ABL.LOADED = true;
		COMBOBOX.CH13ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ledger_id,
				id : data.result[i].ledger_id
			};
			COMBOBOX.CH13ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH13ABL);
		COMBOBOX.CH13ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / cur_cd / d_c_ind / spec_group / sum_lia_cur /
	// sum_lia_bas / sum_lia_qty / sum_sbl_cur / sum_sbl_bas / sum_sbl_qty /
	// cur_lia_min_sbl / bas_lia_min_sbl / qty_lia_min_sbl / status /
	// last_update / last_updated_by / lastupdateconcurrencycolumn

	//
	// CH62LUL
	//
	COMBOBOX.CH62LUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH62LUL.LOADED = false;

	COMBOBOX.CH62LUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH62LULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH62LUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH62LUL.INITIALController = controller;
			COMBOBOX.CH62LUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH62LULService",
					COMBOBOX, "CH62LULServiceCallback");
		}
		return COMBOBOX.CH62LUL;
	};

	COMBOBOX.CH62LULServiceCallback = function(data) {
		COMBOBOX.CH62LUL.LOADED = true;
		COMBOBOX.CH62LUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].invoiceid,
				id : data.result[i].invoiceid
			};
			COMBOBOX.CH62LUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH62LUL);
		COMBOBOX.CH62LUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / invoiceno / mailingtpinvoice / invoicelayout /
	// bankaccntowncomp / curcd / totamntexclvat / countrycdours /
	// countrycdothpty / prodfamid / prodtypeid / prodstypid / origin /
	// termsofdel / locid / descriptionspec / addtextinvoice / actpassind /
	// invoicabledte / noofliabil / holdind / levyamnt / relid / languageid /
	// duedate / currte / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHEFWBL
	//
	COMBOBOX.CHEFWBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHEFWBL.LOADED = false;

	COMBOBOX.CHEFWBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHEFWBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHEFWBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHEFWBL.INITIALController = controller;
			COMBOBOX.CHEFWBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHEFWBLService",
					COMBOBOX, "CHEFWBLServiceCallback");
		}
		return COMBOBOX.CHEFWBL;
	};

	COMBOBOX.CHEFWBLServiceCallback = function(data) {
		COMBOBOX.CHEFWBL.LOADED = true;
		COMBOBOX.CHEFWBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CHEFWBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHEFWBL);
		COMBOBOX.CHEFWBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / ppasubno

	//
	// CHFPTBL
	//
	COMBOBOX.CHFPTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHFPTBL.LOADED = false;

	COMBOBOX.CHFPTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHFPTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHFPTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHFPTBL.INITIALController = controller;
			COMBOBOX.CHFPTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHFPTBLService",
					COMBOBOX, "CHFPTBLServiceCallback");
		}
		return COMBOBOX.CHFPTBL;
	};

	COMBOBOX.CHFPTBLServiceCallback = function(data) {
		COMBOBOX.CHFPTBL.LOADED = true;
		COMBOBOX.CHFPTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].curcd,
				id : data.result[i].curcd
			};
			COMBOBOX.CHFPTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHFPTBL);
		COMBOBOX.CHFPTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / startdte / daymajoration / vmonthmajoration /
	// clrtestartdte / pointwisemajor / vpointwisemajorint / pointperday /
	// status / lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHT60RL
	//
	COMBOBOX.CHT60RL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHT60RL.LOADED = false;

	COMBOBOX.CHT60RL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHT60RLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHT60RL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHT60RL.INITIALController = controller;
			COMBOBOX.CHT60RL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHT60RLService",
					COMBOBOX, "CHT60RLServiceCallback");
		}
		return COMBOBOX.CHT60RL;
	};

	COMBOBOX.CHT60RLServiceCallback = function(data) {
		COMBOBOX.CHT60RL.LOADED = true;
		COMBOBOX.CHT60RL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CHT60RL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHT60RL);
		COMBOBOX.CHT60RL.INITIALCOMBOBOX = null;
	};

	//
	// CH5HMBL
	//
	COMBOBOX.CH5HMBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5HMBL.LOADED = false;

	COMBOBOX.CH5HMBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5HMBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5HMBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5HMBL.INITIALController = controller;
			COMBOBOX.CH5HMBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5HMBLService",
					COMBOBOX, "CH5HMBLServiceCallback");
		}
		return COMBOBOX.CH5HMBL;
	};

	COMBOBOX.CH5HMBLServiceCallback = function(data) {
		COMBOBOX.CH5HMBL.LOADED = true;
		COMBOBOX.CH5HMBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5HMBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5HMBL);
		COMBOBOX.CH5HMBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / ppasubno / parctp / pursalind / bsrelid
	// / fixno / fpaseqno / ppaqtyinmt / bal / trdunitidqty / price / parcurcd /
	// trdunitidpric / ctrno / subctrno / haulrelid / haulrte / fpacurcd /
	// description / locid / prodfamid / prodtypeid / prodstypid / startdte /
	// storelocid / vactioncd / fpano / fixdte / fpaqtyinmt / custref / storeref
	// / haulref / fpaparcno / wbtno / confsentind / fpastatus / origin /
	// termsofdel / postp / posseqno / parcnofulflmnt / ppaparcno / ppastatus /
	// vppaorgqtyinmt / vlociddest / vparlastupdate / confcusdte / confhauldte /
	// confstoredte / alttod / haulageloc / cust / rechargecurcd / rechargerte /
	// colldate / deltime / colltime / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn3

	//
	// CH55BUL
	//
	COMBOBOX.CH55BUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH55BUL.LOADED = false;

	COMBOBOX.CH55BUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH55BULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH55BUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH55BUL.INITIALController = controller;
			COMBOBOX.CH55BUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH55BULService",
					COMBOBOX, "CH55BULServiceCallback");
		}
		return COMBOBOX.CH55BUL;
	};

	COMBOBOX.CH55BULServiceCallback = function(data) {
		COMBOBOX.CH55BUL.LOADED = true;
		COMBOBOX.CH55BUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parcno,
				id : data.result[i].parcno
			};
			COMBOBOX.CH55BUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH55BUL);
		COMBOBOX.CH55BUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / storageid / lociddest / locidloading /
	// destinatstartdte / loadingstartdte / departurestartdte / prodfamid /
	// transportno / quantitymt / trdunitidqty / fulflmntindv / diffqtytobookv /
	// originateind / prodtypeid / prodstypid / origin / termsofdel / locid /
	// postp / posseqno / pursalind / parctp / bsrelid / supplcuststorid / vattp
	// / pardte / cnversionno / momentofdlvind / ctrno / subctrno / bal /
	// trdunt_balv / cdtquantity / minqty / maxqty / status / planningnov /
	// ppaseqnov / sumbalv / ctrtp / fullypricedind / vppiordernr /
	// vppilastupdate / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / lastupdateconcurrencycolumn4 /
	// lastupdateconcurrencycolumn5

	//
	// CHLMTRL
	//
	COMBOBOX.CHLMTRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLMTRL.LOADED = false;

	COMBOBOX.CHLMTRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLMTRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLMTRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLMTRL.INITIALController = controller;
			COMBOBOX.CHLMTRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLMTRLService",
					COMBOBOX, "CHLMTRLServiceCallback");
		}
		return COMBOBOX.CHLMTRL;
	};

	COMBOBOX.CHLMTRLServiceCallback = function(data) {
		COMBOBOX.CHLMTRL.LOADED = true;
		COMBOBOX.CHLMTRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHLMTRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLMTRL);
		COMBOBOX.CHLMTRL.INITIALCOMBOBOX = null;
	};

	//
	// CHLEXRL
	//
	COMBOBOX.CHLEXRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLEXRL.LOADED = false;

	COMBOBOX.CHLEXRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLEXRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLEXRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLEXRL.INITIALController = controller;
			COMBOBOX.CHLEXRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLEXRLService",
					COMBOBOX, "CHLEXRLServiceCallback");
		}
		return COMBOBOX.CHLEXRL;
	};

	COMBOBOX.CHLEXRLServiceCallback = function(data) {
		COMBOBOX.CHLEXRL.LOADED = true;
		COMBOBOX.CHLEXRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ledgerid,
				id : data.result[i].ledgerid
			};
			COMBOBOX.CHLEXRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLEXRL);
		COMBOBOX.CHLEXRL.INITIALCOMBOBOX = null;
	};

	//
	// CH63LBL
	//
	COMBOBOX.CH63LBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH63LBL.LOADED = false;

	COMBOBOX.CH63LBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH63LBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH63LBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH63LBL.INITIALController = controller;
			COMBOBOX.CH63LBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH63LBLService",
					COMBOBOX, "CH63LBLServiceCallback");
		}
		return COMBOBOX.CH63LBL;
	};

	COMBOBOX.CH63LBLServiceCallback = function(data) {
		COMBOBOX.CH63LBL.LOADED = true;
		COMBOBOX.CH63LBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].liabilityno,
				id : data.result[i].liabilityno
			};
			COMBOBOX.CH63LBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH63LBL);
		COMBOBOX.CH63LBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / liabilitytp / amntexclvat / rgtliaind / quantity /
	// qtyinkg / cost / linkedind / extctrno / curcd / relid / costgrpid /
	// trdunitidqty / trdunitidpric / prodfamid / prodtypeid / prodstypid /
	// origin / termsofdel / locid / descriptionspec / convcurcd / incinvoiceid
	// / action_cd / perstartdte / descriptionspecto / fixno /
	// lastupdateconcurrencycolumn / actpassind / invoiceableind / posmth /
	// posseqno / postp / posyear / storageid / transportno / valtorderby

	//
	// CHTR1BL
	//
	COMBOBOX.CHTR1BL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTR1BL.LOADED = false;

	COMBOBOX.CHTR1BL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTR1BLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTR1BL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTR1BL.INITIALController = controller;
			COMBOBOX.CHTR1BL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTR1BLService",
					COMBOBOX, "CHTR1BLServiceCallback");
		}
		return COMBOBOX.CHTR1BL;
	};

	COMBOBOX.CHTR1BLServiceCallback = function(data) {
		COMBOBOX.CHTR1BL.LOADED = true;
		COMBOBOX.CHTR1BL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].transportno,
				id : data.result[i].transportno
			};
			COMBOBOX.CHTR1BL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTR1BL);
		COMBOBOX.CHTR1BL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / departurestartdte / destinatstartdte /
	// dischargeenddte / storageid / lociddest / locidloading / status

	//
	// CH61IBL
	//
	COMBOBOX.CH61IBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH61IBL.LOADED = false;

	COMBOBOX.CH61IBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH61IBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH61IBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH61IBL.INITIALController = controller;
			COMBOBOX.CH61IBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH61IBLService",
					COMBOBOX, "CH61IBLServiceCallback");
		}
		return COMBOBOX.CH61IBL;
	};

	COMBOBOX.CH61IBLServiceCallback = function(data) {
		COMBOBOX.CH61IBL.LOADED = true;
		COMBOBOX.CH61IBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].liabilityno,
				id : data.result[i].liabilityno
			};
			COMBOBOX.CH61IBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH61IBL);
		COMBOBOX.CH61IBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / invoicabledte / liabilitytp / costgrpid / curcd /
	// amntexclvat / invoiceableind / rgtliaind / actpassind / quantity /
	// completedind / trdunitidqty / relid / prodfamid / prodtypeid / prodstypid
	// / origin / termsofdel / locid / incinvoiceid / status / lastupdatedby /
	// descriptionspec / parcno

	//
	// CHRVTBL
	//
	COMBOBOX.CHRVTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRVTBL.LOADED = false;

	COMBOBOX.CHRVTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRVTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRVTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRVTBL.INITIALController = controller;
			COMBOBOX.CHRVTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRVTBLService",
					COMBOBOX, "CHRVTBLServiceCallback");
		}
		return COMBOBOX.CHRVTBL;
	};

	COMBOBOX.CHRVTBLServiceCallback = function(data) {
		COMBOBOX.CHRVTBL.LOADED = true;
		COMBOBOX.CHRVTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHRVTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRVTBL);
		COMBOBOX.CHRVTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / countrycd / vatnumber / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHBFPRL
	//
	COMBOBOX.CHBFPRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBFPRL.LOADED = false;

	COMBOBOX.CHBFPRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBFPRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBFPRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBFPRL.INITIALController = controller;
			COMBOBOX.CHBFPRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBFPRLService",
					COMBOBOX, "CHBFPRLServiceCallback");
		}
		return COMBOBOX.CHBFPRL;
	};

	COMBOBOX.CHBFPRLServiceCallback = function(data) {
		COMBOBOX.CHBFPRL.LOADED = true;
		COMBOBOX.CHBFPRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].periodid,
				id : data.result[i].periodid
			};
			COMBOBOX.CHBFPRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBFPRL);
		COMBOBOX.CHBFPRL.INITIALCOMBOBOX = null;
	};

	//
	// CH91LBL
	//
	COMBOBOX.CH91LBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH91LBL.LOADED = false;

	COMBOBOX.CH91LBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH91LBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH91LBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH91LBL.INITIALController = controller;
			COMBOBOX.CH91LBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH91LBLService",
					COMBOBOX, "CH91LBLServiceCallback");
		}
		return COMBOBOX.CH91LBL;
	};

	COMBOBOX.CH91LBLServiceCallback = function(data) {
		COMBOBOX.CH91LBL.LOADED = true;
		COMBOBOX.CH91LBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].coveringnocbk,
				id : data.result[i].coveringnocbk
			};
			COMBOBOX.CH91LBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH91LBL);
		COMBOBOX.CH91LBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / puchasesaleind / curamnt / spotrte / bcuramnt /
	// hghstcovnoind / assignrtedte / rteassigntime / reqatbankdte /
	// requestbanktime / userid / curcd / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH83ABL
	//
	COMBOBOX.CH83ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH83ABL.LOADED = false;

	COMBOBOX.CH83ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH83ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH83ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH83ABL.INITIALController = controller;
			COMBOBOX.CH83ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH83ABLService",
					COMBOBOX, "CH83ABLServiceCallback");
		}
		return COMBOBOX.CH83ABL;
	};

	COMBOBOX.CH83ABLServiceCallback = function(data) {
		COMBOBOX.CH83ABL.LOADED = true;
		COMBOBOX.CH83ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].sampleid,
				id : data.result[i].sampleid
			};
			COMBOBOX.CH83ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH83ABL);
		COMBOBOX.CH83ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / reportversion / disponentnumber / reference /
	// customerid / companyname / sampleremarks / samplearriveddate / reportdate
	// / urgent / applicant / productspecificati / packing / jarlabelbarcode /
	// samplesize / sealed / sealcode / bldo / seller / ex / samplingdate /
	// holdnr / lotnr / tonnageex / harbour / origin / buyer / in / tonnagein /
	// shippingdate / destination / disponentremark / disponentsampletyp /
	// sampletype / productgroup / prodfamid / prodtypeid / prodstypid /
	// countrycd / usercheckind / usercheckby / status / lastupdatedby /
	// lastupdate / vreportdateto / relid / storageid / dischargedate /
	// dischargelocid / productdevelopment / basesampleid / basereportversion /
	// harvestyear / lastupdateconcurrencycolumn

	//
	// CHDSLBL
	//
	COMBOBOX.CHDSLBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHDSLBL.LOADED = false;

	COMBOBOX.CHDSLBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHDSLBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHDSLBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHDSLBL.INITIALController = controller;
			COMBOBOX.CHDSLBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHDSLBLService",
					COMBOBOX, "CHDSLBLServiceCallback");
		}
		return COMBOBOX.CHDSLBL;
	};

	COMBOBOX.CHDSLBLServiceCallback = function(data) {
		COMBOBOX.CHDSLBL.LOADED = true;
		COMBOBOX.CHDSLBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHDSLBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHDSLBL);
		COMBOBOX.CHDSLBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / termsofdel /
	// locid / pursalind / periodtpind / trmsofsalid / sortno / description /
	// standardind / excludeind / priority / status / lastupdatedby / lastupdate
	// / lastupdateconcurrencycolumn

	//
	// CHFXPBL
	//
	COMBOBOX.CHFXPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHFXPBL.LOADED = false;

	COMBOBOX.CHFXPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHFXPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHFXPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHFXPBL.INITIALController = controller;
			COMBOBOX.CHFXPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHFXPBLService",
					COMBOBOX, "CHFXPBLServiceCallback");
		}
		return COMBOBOX.CHFXPBL;
	};

	COMBOBOX.CHFXPBLServiceCallback = function(data) {
		COMBOBOX.CHFXPBL.LOADED = true;
		COMBOBOX.CHFXPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHFXPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHFXPBL);
		COMBOBOX.CHFXPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / fxpmth / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH62CBL
	//
	COMBOBOX.CH62CBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH62CBL.LOADED = false;

	COMBOBOX.CH62CBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH62CBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH62CBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH62CBL.INITIALController = controller;
			COMBOBOX.CH62CBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH62CBLService",
					COMBOBOX, "CH62CBLServiceCallback");
		}
		return COMBOBOX.CH62CBL;
	};

	COMBOBOX.CH62CBLServiceCallback = function(data) {
		COMBOBOX.CH62CBL.LOADED = true;
		COMBOBOX.CH62CBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].invoiceid,
				id : data.result[i].invoiceid
			};
			COMBOBOX.CH62CBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH62CBL);
		COMBOBOX.CH62CBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / invoiceno / relid / prodfamid / prodtypeid /
	// prodstypid / origin / termsofdel / locid / storageid / descriptionspec /
	// trdunitidqty / quantity / curcd / totamntexclvat / actpassind /
	// paymtrmsid / duedate / vatcd / countrycd / mailingtpinvoice /
	// invoicelayout / holdind / bankaccntowncomp / countrycdours /
	// countrycdothpty / addtextinvoice / invoicabledte / noofliabil / levyamnt
	// / languageid / currte / status / lastupdatedby / lastupdate / liabilitytp
	// / identsource / liabilityno / invoicelineid / paymperindays /
	// strtdtpaympertp / lastupdatec / vfixno / vatrte

	//
	// CHTXCBL
	//
	COMBOBOX.CHTXCBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTXCBL.LOADED = false;

	COMBOBOX.CHTXCBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTXCBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTXCBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTXCBL.INITIALController = controller;
			COMBOBOX.CHTXCBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTXCBLService",
					COMBOBOX, "CHTXCBLServiceCallback");
		}
		return COMBOBOX.CHTXCBL;
	};

	COMBOBOX.CHTXCBLServiceCallback = function(data) {
		COMBOBOX.CHTXCBL.LOADED = true;
		COMBOBOX.CHTXCBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].codetp,
				id : data.result[i].codetp
			};
			COMBOBOX.CHTXCBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTXCBL);
		COMBOBOX.CHTXCBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / codevalue / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHTXCBLByTxtTp
	//
	COMBOBOX.CHTXCBLBYTXTTP = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTXCBLBYTXTTP.LOADED = false;

	COMBOBOX.getCHTXCBLByTextTpComboValues = function(controller,
			initialcombobox) {
		COMBOBOX.CHTXCBLBYTXTTP.INITIALCOMBOBOX = null;
		if (!COMBOBOX.CHTXCBLBYTXTTP.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTXCBLBYTXTTP.INITIALController = controller;
			COMBOBOX.CHTXCBLBYTXTTP.INITIALCOMBOBOX = controller.id
					+ initialcombobox;
			callWebservice(null, "getListDataAllByTextType",
					[ window.models.PROGRAM_RETURN_REC ], "CHTXCBLService",
					COMBOBOX, "CHTXCBLBYTXTTPServiceCallback");
		}
		return COMBOBOX.CHTXCBLBYTXTTP;
	};
	COMBOBOX.CHTXCBLBYTXTTPServiceCallback = function(data) {
		COMBOBOX.CHTXCBLBYTXTTP.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].codevalue,
				id : data.result[i].codevalue
			};
			COMBOBOX.CHTXCBLBYTXTTP.put(obj);
		}
		
		setComboboxDefaultValue(COMBOBOX.CHTXCBLBYTXTTP);
		COMBOBOX.CHTXCBLBYTXTTP.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / codevalue / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHTXCBLByAction
	//
	COMBOBOX.CHTXCBLBYACTION = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTXCBLBYACTION.LOADED = false;
	COMBOBOX.CHTXCBLBYACTION.INITIALCOMBOBOX = null;

	COMBOBOX.getCHTXCBLByActionComboValues = function(controller,
			initialcombobox) {
		if (!COMBOBOX.CHTXCBLBYACTION.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTXCBLBYACTION.INITIALController = controller;
			COMBOBOX.CHTXCBLBYACTION.INITIALCOMBOBOX = controller.id
					+ initialcombobox;
			callWebservice(null, "getListDataAllByAction",
					[ window.models.PROGRAM_RETURN_REC ], "CHTXCBLService",
					COMBOBOX, "CHTXCBLBYACTIONServiceCallback");
		}
		return COMBOBOX.CHTXCBLBYACTION;
	};
	COMBOBOX.CHTXCBLBYACTIONServiceCallback = function(data) {
		COMBOBOX.CHTXCBLBYACTION.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].codevalue,
				id : data.result[i].codevalue
			};
			COMBOBOX.CHTXCBLBYACTION.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTXCBLBYACTION);
		COMBOBOX.CHTXCBLBYACTION.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / codevalue / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH74EUL
	//
	COMBOBOX.CH74EUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH74EUL.LOADED = false;

	COMBOBOX.CH74EUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH74EULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH74EUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH74EUL.INITIALController = controller;
			COMBOBOX.CH74EUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH74EULService",
					COMBOBOX, "CH74EULServiceCallback");
		}
		return COMBOBOX.CH74EUL;
	};

	COMBOBOX.CH74EULServiceCallback = function(data) {
		COMBOBOX.CH74EUL.LOADED = true;
		COMBOBOX.CH74EUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].accdte,
				id : data.result[i].accdte
			};
			COMBOBOX.CH74EUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH74EUL);
		COMBOBOX.CH74EUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / bcurdebitamnt / debitcredit / curcd / curdamnt /
	// dqty / accdteto / prodfamid / prodtypeid / prodstypid / origin /
	// termsofdel / locid / postp / posseqno / fmsledgerid / journalid /
	// fmsregionid

	//
	// CHHFIBL
	//
	COMBOBOX.CHHFIBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHHFIBL.LOADED = false;

	COMBOBOX.CHHFIBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHHFIBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHHFIBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHHFIBL.INITIALController = controller;
			COMBOBOX.CHHFIBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHHFIBLService",
					COMBOBOX, "CHHFIBLServiceCallback");
		}
		return COMBOBOX.CHHFIBL;
	};

	COMBOBOX.CHHFIBLServiceCallback = function(data) {
		COMBOBOX.CHHFIBL.LOADED = true;
		COMBOBOX.CHHFIBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].fpano,
				id : data.result[i].fpano
			};
			COMBOBOX.CHHFIBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHHFIBL);
		COMBOBOX.CHHFIBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / supplcustrelid / pursalind / prodfamid /
	// prodtypeid / prodstypid / fixno / custref / storeref / qtyinmt / colldate
	// / colltime / fixdte / deltime / weekend / haulref / haulrelid / curcd /
	// haulrte / prefrelid / prefcurcd / prefpric / description / storelocid /
	// storezipcd / haulagelocid / confhauldte / haulname / haulzipcd /
	// haulsupintname / haulphonenumber / custrelid / rechargecurcd /
	// rechargerte / extwbtno / wbtstorelocid / wbtdlvdte / wbtdlvtime /
	// wbtqtyinmt / wbtstate / alttod / status / haulstatus / lastupdatedby /
	// lastupdate / vcolldatelower / vcolldategreater / vcollregion / vdelregion
	// / excludebsrelid / excludedelarea / excludedelregion / excludeprodfamid /
	// vmailingtp / timestamphaulier / userhaulier / lastupdateconcurrencycolumn

	//
	// CH01AUL
	//
	COMBOBOX.CH01AUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH01AUL.LOADED = false;

	COMBOBOX.CH01AUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH01AULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH01AUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH01AUL.INITIALController = controller;
			COMBOBOX.CH01AUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH01AULService",
					COMBOBOX, "CH01AULServiceCallback");
		}
		return COMBOBOX.CH01AUL;
	};

	COMBOBOX.CH01AULServiceCallback = function(data) {
		COMBOBOX.CH01AUL.LOADED = true;
		COMBOBOX.CH01AUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].entity_type,
				id : data.result[i].entity_type
			};
			COMBOBOX.CH01AUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH01AUL);
		COMBOBOX.CH01AUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / entity_id / auth_level / auth_read / auth_update /
	// auth_create / auth_delete / lastupdateconcurrencycolumn

	//
	// CHBFHBL
	//
	COMBOBOX.CHBFHBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBFHBL.LOADED = false;

	COMBOBOX.CHBFHBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBFHBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBFHBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBFHBL.INITIALController = controller;
			COMBOBOX.CHBFHBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBFHBLService",
					COMBOBOX, "CHBFHBLServiceCallback");
		}
		return COMBOBOX.CHBFHBL;
	};

	COMBOBOX.CHBFHBLServiceCallback = function(data) {
		COMBOBOX.CHBFHBL.LOADED = true;
		COMBOBOX.CHBFHBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].budgetid,
				id : data.result[i].budgetid
			};
			COMBOBOX.CHBFHBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBFHBL);
		COMBOBOX.CHBFHBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / budgettp / prodfamid / prodtypeid / prodstypid /
	// area / locid / relid / storageid / year / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHPTDBL
	//
	COMBOBOX.CHPTDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPTDBL.LOADED = false;

	COMBOBOX.CHPTDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPTDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPTDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPTDBL.INITIALController = controller;
			COMBOBOX.CHPTDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPTDBLService",
					COMBOBOX, "CHPTDBLServiceCallback");
		}
		return COMBOBOX.CHPTDBL;
	};

	COMBOBOX.CHPTDBLServiceCallback = function(data) {
		COMBOBOX.CHPTDBL.LOADED = true;
		COMBOBOX.CHPTDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHPTDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPTDBL);
		COMBOBOX.CHPTDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / prodtypeid / description / status /
	// lastupdatedby / lastupdateconcurrencycolumn

	//
	// CH31GBL
	//
	COMBOBOX.CH31GBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31GBL.LOADED = false;

	COMBOBOX.CH31GBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31GBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31GBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31GBL.INITIALController = controller;
			COMBOBOX.CH31GBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31GBLService",
					COMBOBOX, "CH31GBLServiceCallback");
		}
		return COMBOBOX.CH31GBL;
	};

	COMBOBOX.CH31GBLServiceCallback = function(data) {
		COMBOBOX.CH31GBL.LOADED = true;
		COMBOBOX.CH31GBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH31GBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31GBL);
		COMBOBOX.CH31GBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / ctrtp / pursalind / bsrelid /
	// brokerrelid / prodfamid / prodtypeid / prodstypid / origin / termsofdel /
	// locid / postp / posseqno / perstartdte / perenddte / quantity /
	// trdunitidqty / curcd / price / trdunitidpric / curcdprem / premium /
	// trdunitidprem / status / statuscdt / openind / deliveredqty /
	// circleflatqty / circlepremqty / statuscds / certificatesystem /
	// certificatenumber / certificatecalcind / co2value / statuscss

	//
	// CH18IBL
	//
	COMBOBOX.CH18IBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH18IBL.LOADED = false;

	COMBOBOX.CH18IBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH18IBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH18IBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH18IBL.INITIALController = controller;
			COMBOBOX.CH18IBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH18IBLService",
					COMBOBOX, "CH18IBLServiceCallback");
		}
		return COMBOBOX.CH18IBL;
	};

	COMBOBOX.CH18IBLServiceCallback = function(data) {
		COMBOBOX.CH18IBL.LOADED = true;
		COMBOBOX.CH18IBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH18IBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH18IBL);
		COMBOBOX.CH18IBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / prodfamid / prodtypeid / prodstypid /
	// origin / termsofdel / locid / descriptionspec / quantity / trdunitidqty /
	// quantityctr / trdunitidqtyctr / balopen / trdunitqtyopen / description /
	// budgetid / month / periodid / status / lastupdatedby / lastupdate /
	// pursalind / bsrelid / brokerrelid / postp / posseqno / parcno /
	// lastupdateconcurrencycolumn

	//
	// CHUGPBL
	//
	COMBOBOX.CHUGPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHUGPBL.LOADED = false;

	COMBOBOX.CHUGPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHUGPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHUGPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHUGPBL.INITIALController = controller;
			COMBOBOX.CHUGPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHUGPBLService",
					COMBOBOX, "CHUGPBLServiceCallback");
		}
		return COMBOBOX.CHUGPBL;
	};

	COMBOBOX.CHUGPBLServiceCallback = function(data) {
		COMBOBOX.CHUGPBL.LOADED = true;
		COMBOBOX.CHUGPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].usergrpno,
				id : data.result[i].usergrpno
			};
			COMBOBOX.CHUGPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHUGPBL);
		COMBOBOX.CHUGPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / usergrp / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHROABL
	//
	COMBOBOX.CHROABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHROABL.LOADED = false;

	COMBOBOX.CHROABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHROABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHROABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHROABL.INITIALController = controller;
			COMBOBOX.CHROABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHROABLService",
					COMBOBOX, "CHROABLServiceCallback");
		}
		return COMBOBOX.CHROABL;
	};

	COMBOBOX.CHROABLServiceCallback = function(data) {
		COMBOBOX.CHROABL.LOADED = true;
		COMBOBOX.CHROABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHROABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHROABL);
		COMBOBOX.CHROABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / seqno / department / contactperson / phonenumber /
	// countrycd / typeaddroffice / addressnooffice / addressline_office /
	// place_office / status / lastupdateconcurrencycolumn

	//
	// CHBFPBL
	//
	COMBOBOX.CHBFPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBFPBL.LOADED = false;

	COMBOBOX.CHBFPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBFPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBFPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBFPBL.INITIALController = controller;
			COMBOBOX.CHBFPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBFPBLService",
					COMBOBOX, "CHBFPBLServiceCallback");
		}
		return COMBOBOX.CHBFPBL;
	};

	COMBOBOX.CHBFPBLServiceCallback = function(data) {
		COMBOBOX.CHBFPBL.LOADED = true;
		COMBOBOX.CHBFPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].periodid,
				id : data.result[i].periodid
			};
			COMBOBOX.CHBFPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBFPBL);
		COMBOBOX.CHBFPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / order / pername / status / lastupdatedby /
	// lastupdate

	//
	// CHBAHBL
	//
	COMBOBOX.CHBAHBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBAHBL.LOADED = false;

	COMBOBOX.CHBAHBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBAHBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBAHBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBAHBL.INITIALController = controller;
			COMBOBOX.CHBAHBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBAHBLService",
					COMBOBOX, "CHBAHBLServiceCallback");
		}
		return COMBOBOX.CHBAHBL;
	};

	COMBOBOX.CHBAHBLServiceCallback = function(data) {
		COMBOBOX.CHBAHBL.LOADED = true;
		COMBOBOX.CHBAHBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].bankaccntseqno,
				id : data.result[i].bankaccntseqno
			};
			COMBOBOX.CHBAHBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBAHBL);
		COMBOBOX.CHBAHBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / bankaccntno / descrbankaccnt

	//
	// CHCRPBL
	//
	COMBOBOX.CHCRPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCRPBL.LOADED = false;

	COMBOBOX.CHCRPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCRPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCRPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCRPBL.INITIALController = controller;
			COMBOBOX.CHCRPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCRPBLService",
					COMBOBOX, "CHCRPBLServiceCallback");
		}
		return COMBOBOX.CHCRPBL;
	};

	COMBOBOX.CHCRPBLServiceCallback = function(data) {
		COMBOBOX.CHCRPBL.LOADED = true;
		COMBOBOX.CHCRPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].transactiondte,
				id : data.result[i].transactiondte
			};
			COMBOBOX.CHCRPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCRPBL);
		COMBOBOX.CHCRPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / curcd / curamntstart / curamnttrn / basamntstart /
	// basamnttrn / curamntpos / basamntpos / curunit / reverserteind /
	// valuationrte / basamntvaluated / basamntres / actualind / clrtestartdte /
	// clrtespot / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH19BBL
	//
	COMBOBOX.CH19BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH19BBL.LOADED = false;

	COMBOBOX.CH19BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH19BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH19BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH19BBL.INITIALController = controller;
			COMBOBOX.CH19BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH19BBLService",
					COMBOBOX, "CH19BBLServiceCallback");
		}
		return COMBOBOX.CH19BBL;
	};

	COMBOBOX.CH19BBLServiceCallback = function(data) {
		COMBOBOX.CH19BBL.LOADED = true;
		COMBOBOX.CH19BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].lttid,
				id : data.result[i].lttid
			};
			COMBOBOX.CH19BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH19BBL);
		COMBOBOX.CH19BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / relid / freetext / created / useridcreator /
	// priorityind / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH81FBL
	//
	COMBOBOX.CH81FBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH81FBL.LOADED = false;

	COMBOBOX.CH81FBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH81FBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH81FBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH81FBL.INITIALController = controller;
			COMBOBOX.CH81FBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH81FBLService",
					COMBOBOX, "CH81FBLServiceCallback");
		}
		return COMBOBOX.CH81FBL;
	};

	COMBOBOX.CH81FBLServiceCallback = function(data) {
		COMBOBOX.CH81FBL.LOADED = true;
		COMBOBOX.CH81FBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].samplparcno,
				id : data.result[i].samplparcno
			};
			COMBOBOX.CH81FBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH81FBL);
		COMBOBOX.CH81FBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / sdlseqno / parcno / ppaplanningno / ppaseqno /
	// status / prodtypeid / ctrno / subctrno / ctrtp / ctrdte / pursalind /
	// bsrelid / docnobldo / docnobl / qtyinkg / qty_in_mt / sum_qtyinkg /
	// ppa_qtyinmt / open_qty_in_mt / ppa_qtydischarged / ppa_trdunitqtydisc /
	// prodfamid / prodstypid / origin / termsofdel / locid / postp / posseqno /
	// transportno / price / trdunitidpric / curcd / storageid /
	// lastupdateconcurrencycolumn

	//
	// CHRADBL
	//
	COMBOBOX.CHRADBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRADBL.LOADED = false;

	COMBOBOX.CHRADBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRADBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRADBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRADBL.INITIALController = controller;
			COMBOBOX.CHRADBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRADBLService",
					COMBOBOX, "CHRADBLServiceCallback");
		}
		return COMBOBOX.CHRADBL;
	};

	COMBOBOX.CHRADBLServiceCallback = function(data) {
		COMBOBOX.CHRADBL.LOADED = true;
		COMBOBOX.CHRADBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHRADBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRADBL);
		COMBOBOX.CHRADBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / countrycd / addresstp / addressno / addressline /
	// prefixedline / zipcd / place / region / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH12PBL
	//
	COMBOBOX.CH12PBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH12PBL.LOADED = false;

	COMBOBOX.CH12PBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH12PBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH12PBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH12PBL.INITIALController = controller;
			COMBOBOX.CH12PBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH12PBLService",
					COMBOBOX, "CH12PBLServiceCallback");
		}
		return COMBOBOX.CH12PBL;
	};

	COMBOBOX.CH12PBLServiceCallback = function(data) {
		COMBOBOX.CH12PBL.LOADED = true;
		COMBOBOX.CH12PBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH12PBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH12PBL);
		COMBOBOX.CH12PBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / posscnversionno
	// / priority / status / lastupdatedby / lastupdate

	//
	// CH5EABL
	//
	COMBOBOX.CH5EABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5EABL.LOADED = false;

	COMBOBOX.CH5EABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5EABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5EABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5EABL.INITIALController = controller;
			COMBOBOX.CH5EABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5EABLService",
					COMBOBOX, "CH5EABLServiceCallback");
		}
		return COMBOBOX.CH5EABL;
	};

	COMBOBOX.CH5EABLServiceCallback = function(data) {
		COMBOBOX.CH5EABL.LOADED = true;
		COMBOBOX.CH5EABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].circleno,
				id : data.result[i].circleno
			};
			COMBOBOX.CH5EABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5EABL);
		COMBOBOX.CH5EABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / planningno / prodfamid / termsofdel
	// / posmth / posyear / storageid / transportno / created / circlestatus /
	// curcd / price / trdunitidpric / quantity / trdunitidqty / text /
	// storageidtransport / lociddest / destinatstartdte /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2 / vctrno /
	// vextctrno / vprodstypid / vprodtypeid / vrelid

	//
	// CH3HABL
	//
	COMBOBOX.CH3HABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3HABL.LOADED = false;

	COMBOBOX.CH3HABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3HABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3HABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3HABL.INITIALController = controller;
			COMBOBOX.CH3HABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3HABLService",
					COMBOBOX, "CH3HABLServiceCallback");
		}
		return COMBOBOX.CH3HABL;
	};

	COMBOBOX.CH3HABLServiceCallback = function(data) {
		COMBOBOX.CH3HABL.LOADED = true;
		COMBOBOX.CH3HABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrnoframe,
				id : data.result[i].ctrnoframe
			};
			COMBOBOX.CH3HABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3HABL);
		COMBOBOX.CH3HABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrnoframe / ctrno / subctrno / ctrdte /
	// perstartdte / perenddte / ctrqty / trdunitidqty / fullypricedind /
	// curcdpriced / price / trdunitidpric / premium / trdunitidprem / status /
	// lastupdatedby / lastupdate / ctrtp / lastupdateconcurrencycolumn

	//
	// CH41EBL
	//
	COMBOBOX.CH41EBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH41EBL.LOADED = false;

	COMBOBOX.CH41EBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH41EBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH41EBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH41EBL.INITIALController = controller;
			COMBOBOX.CH41EBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH41EBLService",
					COMBOBOX, "CH41EBLServiceCallback");
		}
		return COMBOBOX.CH41EBL;
	};

	COMBOBOX.CH41EBLServiceCallback = function(data) {
		COMBOBOX.CH41EBL.LOADED = true;
		COMBOBOX.CH41EBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].fixdte,
				id : data.result[i].fixdte
			};
			COMBOBOX.CH41EBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH41EBL);
		COMBOBOX.CH41EBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / storeref / haulrelid / colldate / action_cd /
	// planningno / parcno / ppaseqno / ppasubno / parctp / pursalind / bsrelid
	// / termsofdel / locid / postp / posseqno / price / curcd / trdunitidpric /
	// prodfamid / prodtypeid / prodstypid / origin / qtyinmt / vopenqtymin /
	// vopenqtymax / descriptionspec / ctrno / subctrno / ctrdte / ctrnobs /
	// ctrnobroker / brokerrelid / releaseno / bldte / docno / requestsplitind /
	// ppatp / orderind / qtydischarged / trdunitqtydisc / circleno / picseqno /
	// statusppa / shipperrelid / samplparcno / qtyprorata / trdunitqtyprora /
	// docseqnobldo / planningnoprev / fpano / fpaseqno / parcnoperiod /
	// originalind / originateind / ctrtp / fullypricedind / quantitycdt /
	// minqtycdt / maxqtycdt / plannedqtycdt / weightinkgunt / quantity /
	// ppaquantity / qtyinkg / balinkg / startdte / paymtrmsid / methodofpaym /
	// invoicediaind / inviapaidind / fixno / custref / wbtno / extwbtno /
	// vsavedqtyinmt / vsumqty / vsortedind / gpllastupdate / ordernr /
	// nachfristno / vselectedcolumn / vctrtext / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / lastupdateconcurrencycolumn11 / venddate /
	// vparcdelind / vparcfixind / vparcforind / vparcinvind / vparcrelind /
	// vparctpapprind / vparctpdelind / vparctpdestind / vparctpfreeind /
	// vparctpopenind / vplanningtp / vstartdate / pardte

	//
	// CH57CBL
	//
	COMBOBOX.CH57CBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH57CBL.LOADED = false;

	COMBOBOX.CH57CBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH57CBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH57CBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH57CBL.INITIALController = controller;
			COMBOBOX.CH57CBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH57CBLService",
					COMBOBOX, "CH57CBLServiceCallback");
		}
		return COMBOBOX.CH57CBL;
	};

	COMBOBOX.CH57CBLServiceCallback = function(data) {
		COMBOBOX.CH57CBL.LOADED = true;
		COMBOBOX.CH57CBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].washoutno,
				id : data.result[i].washoutno
			};
			COMBOBOX.CH57CBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH57CBL);
		COMBOBOX.CH57CBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / seqno / ctrno / subctrno / status / pursalind /
	// quantity / unitoftradeid / curcd / price / trdunitidpric / parcnofulflmnt
	// / parcno / lastupdateconcurrencycolumn

	//
	// CH38ABL
	//
	COMBOBOX.CH38ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH38ABL.LOADED = false;

	COMBOBOX.CH38ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH38ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH38ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH38ABL.INITIALController = controller;
			COMBOBOX.CH38ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH38ABLService",
					COMBOBOX, "CH38ABLServiceCallback");
		}
		return COMBOBOX.CH38ABL;
	};

	COMBOBOX.CH38ABLServiceCallback = function(data) {
		COMBOBOX.CH38ABL.LOADED = true;
		COMBOBOX.CH38ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CH38ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH38ABL);
		COMBOBOX.CH38ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ctrno / pursalind / ctrdte / curcd / paymtrmsid /
	// supplcustrelid / prodfamid / prodtypeid / prodstypid / origin /
	// termsofdel / locid / postp / trdunitidqty / pertpid / webuser / webupdate
	// / status / rentalschemeid / quantity / minqty / maxqty / pric /
	// ctrnosuplcust / periodstartdte / perenddte / errortext / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH9AIBL
	//
	COMBOBOX.CH9AIBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH9AIBL.LOADED = false;

	COMBOBOX.CH9AIBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH9AIBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH9AIBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH9AIBL.INITIALController = controller;
			COMBOBOX.CH9AIBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH9AIBLService",
					COMBOBOX, "CH9AIBLServiceCallback");
		}
		return COMBOBOX.CH9AIBL;
	};

	COMBOBOX.CH9AIBLServiceCallback = function(data) {
		COMBOBOX.CH9AIBL.LOADED = true;
		COMBOBOX.CH9AIBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].transactiondte,
				id : data.result[i].transactiondte
			};
			COMBOBOX.CH9AIBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH9AIBL);
		COMBOBOX.CH9AIBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / curcd / curamntstart / curamnttrn / basamntstart /
	// basamnttrn / curamntpos / basamntpos / curunit / reverserteind /
	// valuationrte / basamntvaluated / basamntres / actualind / clrtestartdte /
	// clrtespot / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHCCBBL
	//
	COMBOBOX.CHCCBBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCCBBL.LOADED = false;

	COMBOBOX.CHCCBBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCCBBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCCBBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCCBBL.INITIALController = controller;
			COMBOBOX.CHCCBBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCCBBLService",
					COMBOBOX, "CHCCBBLServiceCallback");
		}
		return COMBOBOX.CHCCBBL;
	};

	COMBOBOX.CHCCBBLServiceCallback = function(data) {
		COMBOBOX.CHCCBBL.LOADED = true;
		COMBOBOX.CHCCBBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CHCCBBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCCBBL);
		COMBOBOX.CHCCBBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / version / subctrno / transactiontp / curcd /
	// reverseind / curamnt / basamntspot / basamntprem / basamntfrwd / curunit
	// / reverserteind / spotrte / premrte / frwdrte / finalind / curenroutedte
	// / invoiceno / invoicenobas / clrtespot / clrteprem / clrtefrwd / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHUSRBL
	//
	COMBOBOX.CHUSRBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHUSRBL.LOADED = false;

	COMBOBOX.CHUSRBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHUSRBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHUSRBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHUSRBL.INITIALController = controller;
			COMBOBOX.CHUSRBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHUSRBLService",
					COMBOBOX, "CHUSRBLServiceCallback");
		}
		return COMBOBOX.CHUSRBL;
	};

	COMBOBOX.CHUSRBLServiceCallback = function(data) {
		COMBOBOX.CHUSRBL.LOADED = true;
		COMBOBOX.CHUSRBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].userno,
				id : data.result[i].userno
			};
			COMBOBOX.CHUSRBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHUSRBL);
		COMBOBOX.CHUSRBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / username / description / status / lastupdatedby /
	// lastupdate / phonenumber / faxno / emailaddress /
	// lastupdateconcurrencycolumn

	//
	// CHCRHBL
	//
	COMBOBOX.CHCRHBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCRHBL.LOADED = false;

	COMBOBOX.CHCRHBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCRHBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCRHBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCRHBL.INITIALController = controller;
			COMBOBOX.CHCRHBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCRHBLService",
					COMBOBOX, "CHCRHBLServiceCallback");
		}
		return COMBOBOX.CHCRHBL;
	};

	COMBOBOX.CHCRHBLServiceCallback = function(data) {
		COMBOBOX.CHCRHBL.LOADED = true;
		COMBOBOX.CHCRHBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CHCRHBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCRHBL);
		COMBOBOX.CHCRHBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / costrteid / startdte / calculationqty / percentage
	// / price / explication / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHOPSBL
	//
	COMBOBOX.CHOPSBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHOPSBL.LOADED = false;

	COMBOBOX.CHOPSBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHOPSBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHOPSBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHOPSBL.INITIALController = controller;
			COMBOBOX.CHOPSBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHOPSBLService",
					COMBOBOX, "CHOPSBLServiceCallback");
		}
		return COMBOBOX.CHOPSBL;
	};

	COMBOBOX.CHOPSBLServiceCallback = function(data) {
		COMBOBOX.CHOPSBL.LOADED = true;
		COMBOBOX.CHOPSBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].positionlistid,
				id : data.result[i].positionlistid
			};
			COMBOBOX.CHOPSBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHOPSBL);
		COMBOBOX.CHOPSBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / headergen / specstoresind / specbargesind /
	// specvesselsind / specpushbargind / spectrucksind / spectrainsind /
	// linespstores / linespbarges / linespvessels / linesppushbarg /
	// linesptrucks / linesptrains / linespmths / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH011BL
	//
	COMBOBOX.CH011BL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH011BL.LOADED = false;

	COMBOBOX.CH011BL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH011BLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH011BL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH011BL.INITIALController = controller;
			COMBOBOX.CH011BL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH011BLService",
					COMBOBOX, "CH011BLServiceCallback");
		}
		return COMBOBOX.CH011BL;
	};

	COMBOBOX.CH011BLServiceCallback = function(data) {
		COMBOBOX.CH011BL.LOADED = true;
		COMBOBOX.CH011BL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].userno,
				id : data.result[i].userno
			};
			COMBOBOX.CH011BL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH011BL);
		COMBOBOX.CH011BL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / usergrpno / usergrp / description / status

	//
	// CH13BBL
	//
	COMBOBOX.CH13BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH13BBL.LOADED = false;

	COMBOBOX.CH13BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH13BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH13BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH13BBL.INITIALController = controller;
			COMBOBOX.CH13BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH13BBLService",
					COMBOBOX, "CH13BBLServiceCallback");
		}
		return COMBOBOX.CH13BBL;
	};

	COMBOBOX.CH13BBLServiceCallback = function(data) {
		COMBOBOX.CH13BBL.LOADED = true;
		COMBOBOX.CH13BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ledger_id,
				id : data.result[i].ledger_id
			};
			COMBOBOX.CH13BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH13BBL);
		COMBOBOX.CH13BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / d_c_ind / spec_group / cur_cd / sum_pos_cur /
	// sum_pos_bas / sum_pos_qty / sum_sbl_cur / sum_sbl_bas / sum_sbl_qty /
	// cur_pos_min_sbl / bas_pos_min_sbl / qty_pos_min_sbl / status /
	// last_update / last_updated_by / lastupdateconcurrencycolumn

	//
	// CHCH1RL
	//
	COMBOBOX.CHCH1RL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCH1RL.LOADED = false;

	COMBOBOX.CHCH1RL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCH1RLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCH1RL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCH1RL.INITIALController = controller;
			COMBOBOX.CHCH1RL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCH1RLService",
					COMBOBOX, "CHCH1RLServiceCallback");
		}
		return COMBOBOX.CHCH1RL;
	};

	COMBOBOX.CHCH1RLServiceCallback = function(data) {
		COMBOBOX.CHCH1RL.LOADED = true;
		COMBOBOX.CHCH1RL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CHCH1RL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCH1RL);
		COMBOBOX.CHCH1RL.INITIALCOMBOBOX = null;
	};

	//
	// CH34SBL
	//
	COMBOBOX.CH34SBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH34SBL.LOADED = false;

	COMBOBOX.CH34SBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH34SBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH34SBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH34SBL.INITIALController = controller;
			COMBOBOX.CH34SBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH34SBLService",
					COMBOBOX, "CH34SBLServiceCallback");
		}
		return COMBOBOX.CH34SBL;
	};

	COMBOBOX.CH34SBLServiceCallback = function(data) {
		COMBOBOX.CH34SBL.LOADED = true;
		COMBOBOX.CH34SBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].pursalind,
				id : data.result[i].pursalind
			};
			COMBOBOX.CH34SBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH34SBL);
		COMBOBOX.CH34SBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / bsrelid / ctrdte / qtytolink / remainingqty /
	// quantity / trdunitidqty / price / curcd / trdunitidpric / ctrnopgt /
	// subctrnopgt / status / premium / prodfamid / prodtypeid / posmth /
	// posyear / ctrno / subctrno / lastupdateconcurrencycolumn / tobecnfind

	//
	// CH5BCBL
	//
	COMBOBOX.CH5BCBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5BCBL.LOADED = false;

	COMBOBOX.CH5BCBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5BCBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5BCBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5BCBL.INITIALController = controller;
			COMBOBOX.CH5BCBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5BCBLService",
					COMBOBOX, "CH5BCBLServiceCallback");
		}
		return COMBOBOX.CH5BCBL;
	};

	COMBOBOX.CH5BCBLServiceCallback = function(data) {
		COMBOBOX.CH5BCBL.LOADED = true;
		COMBOBOX.CH5BCBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5BCBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5BCBL);
		COMBOBOX.CH5BCBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / pursalind / prodfamid /
	// transportno / loadingstartdte / departurestartdte / dischargestartdte /
	// dischargeenddte / destinatstartdte / destinatenddte / lociddest /
	// locidloading / supintrelid / mailingtpsuv / languageidsuv /
	// p_free_text_500 / parctp / statusppa / docseqnobldo / prodtypeid /
	// prodstypid / origin / termsofdel / locid / postp / posseqno / bsrelid /
	// pardte / orderstatusv / qtyinmt / trdunitidqty / originateind / quantity
	// / bal / qtyinkg / balinkg / orderdte / provorderdte / ctrno / subctrno /
	// statuspar / momentofdlvind / transshipcbv / supintrelidloc /
	// termsofdelcnv / locidcnv / storageid / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / lastupdateconcurrencycolumn4 /
	// lastupdateconcurrencycolumn5

	//
	// CHIHPBL
	//
	COMBOBOX.CHIHPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHIHPBL.LOADED = false;

	COMBOBOX.CHIHPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHIHPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHIHPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHIHPBL.INITIALController = controller;
			COMBOBOX.CHIHPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHIHPBLService",
					COMBOBOX, "CHIHPBLServiceCallback");
		}
		return COMBOBOX.CHIHPBL;
	};

	COMBOBOX.CHIHPBLServiceCallback = function(data) {
		COMBOBOX.CHIHPBL.LOADED = true;
		COMBOBOX.CHIHPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].invoiceno,
				id : data.result[i].invoiceno
			};
			COMBOBOX.CHIHPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHIHPBL);
		COMBOBOX.CHIHPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / invoicelayout / totamntexclvat / curcd /
	// invoicabledte / prodfamid / relid / lastupdatedby / lastupdate /
	// invpaidind / lastupdateconcurrencycolumn

	//
	// CH18ABL
	//
	COMBOBOX.CH18ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH18ABL.LOADED = false;

	COMBOBOX.CH18ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH18ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH18ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH18ABL.INITIALController = controller;
			COMBOBOX.CH18ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH18ABLService",
					COMBOBOX, "CH18ABLServiceCallback");
		}
		return COMBOBOX.CH18ABL;
	};

	COMBOBOX.CH18ABLServiceCallback = function(data) {
		COMBOBOX.CH18ABL.LOADED = true;
		COMBOBOX.CH18ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CH18ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH18ABL);
		COMBOBOX.CH18ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / budgettp / prodfamid / prodtypeid / prodstypid /
	// area / locid / storageid / year / month / endmonth / pername /
	// budgettonnage / forecast / actual / future / periodid / budgetid / order
	// / lastupdateconcurrencycolumn

	//
	// CH67ABL
	//
	COMBOBOX.CH67ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH67ABL.LOADED = false;

	COMBOBOX.CH67ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH67ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH67ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH67ABL.INITIALController = controller;
			COMBOBOX.CH67ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH67ABLService",
					COMBOBOX, "CH67ABLServiceCallback");
		}
		return COMBOBOX.CH67ABL;
	};

	COMBOBOX.CH67ABLServiceCallback = function(data) {
		COMBOBOX.CH67ABL.LOADED = true;
		COMBOBOX.CH67ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].liabilityno,
				id : data.result[i].liabilityno
			};
			COMBOBOX.CH67ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH67ABL);
		COMBOBOX.CH67ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / vselectedind / prodtypeid / liabilitytp /
	// costgrpid / rgtliaind / curcd / amntexclvat / pertpid / perstartdte /
	// perenddte / quantity / trdunitidqty / invoicabledte / completedind /
	// prodfamid / relid / countrycd / vatcd / prodstypid / origin / termsofdel
	// / locid / postp / posseqno / actpassind / voldamntexclvat / clrtespot /
	// clrteforward / regionfms / invoiceableind / linkedind / curcd1 / price /
	// trdunitidpric / ctrno / subctrno / lastupdateconcurrencycolumn

	//
	// CHLODBL
	//
	COMBOBOX.CHLODBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLODBL.LOADED = false;

	COMBOBOX.CHLODBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLODBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLODBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLODBL.INITIALController = controller;
			COMBOBOX.CHLODBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLODBLService",
					COMBOBOX, "CHLODBLServiceCallback");
		}
		return COMBOBOX.CHLODBL;
	};

	COMBOBOX.CHLODBLServiceCallback = function(data) {
		COMBOBOX.CHLODBL.LOADED = true;
		COMBOBOX.CHLODBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHLODBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLODBL);
		COMBOBOX.CHLODBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / locid / description / status / lastupdatedby /
	// lastupdateconcurrencycolumn

	//
	// CHBFHRL
	//
	COMBOBOX.CHBFHRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBFHRL.LOADED = false;

	COMBOBOX.CHBFHRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBFHRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBFHRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBFHRL.INITIALController = controller;
			COMBOBOX.CHBFHRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBFHRLService",
					COMBOBOX, "CHBFHRLServiceCallback");
		}
		return COMBOBOX.CHBFHRL;
	};

	COMBOBOX.CHBFHRLServiceCallback = function(data) {
		COMBOBOX.CHBFHRL.LOADED = true;
		COMBOBOX.CHBFHRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].budgetid,
				id : data.result[i].budgetid
			};
			COMBOBOX.CHBFHRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBFHRL);
		COMBOBOX.CHBFHRL.INITIALCOMBOBOX = null;
	};

	//
	// CHOPSRL
	//
	COMBOBOX.CHOPSRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHOPSRL.LOADED = false;

	COMBOBOX.CHOPSRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHOPSRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHOPSRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHOPSRL.INITIALController = controller;
			COMBOBOX.CHOPSRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHOPSRLService",
					COMBOBOX, "CHOPSRLServiceCallback");
		}
		return COMBOBOX.CHOPSRL;
	};

	COMBOBOX.CHOPSRLServiceCallback = function(data) {
		COMBOBOX.CHOPSRL.LOADED = true;
		COMBOBOX.CHOPSRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].positionlistid,
				id : data.result[i].positionlistid
			};
			COMBOBOX.CHOPSRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHOPSRL);
		COMBOBOX.CHOPSRL.INITIALCOMBOBOX = null;
	};

	//
	// CHUSRRL
	//
	COMBOBOX.CHUSRRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHUSRRL.LOADED = false;

	COMBOBOX.CHUSRRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHUSRRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHUSRRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHUSRRL.INITIALController = controller;
			COMBOBOX.CHUSRRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHUSRRLService",
					COMBOBOX, "CHUSRRLServiceCallback");
		}
		return COMBOBOX.CHUSRRL;
	};

	COMBOBOX.CHUSRRLServiceCallback = function(data) {
		COMBOBOX.CHUSRRL.LOADED = true;
		COMBOBOX.CHUSRRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].userno,
				id : data.result[i].userno
			};
			COMBOBOX.CHUSRRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHUSRRL);
		COMBOBOX.CHUSRRL.INITIALCOMBOBOX = null;
	};

	//
	// CH82EBL
	//
	COMBOBOX.CH82EBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH82EBL.LOADED = false;

	COMBOBOX.CH82EBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH82EBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH82EBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH82EBL.INITIALController = controller;
			COMBOBOX.CH82EBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH82EBLService",
					COMBOBOX, "CH82EBLServiceCallback");
		}
		return COMBOBOX.CH82EBL;
	};

	COMBOBOX.CH82EBLServiceCallback = function(data) {
		COMBOBOX.CH82EBL.LOADED = true;
		COMBOBOX.CH82EBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].samplparcno,
				id : data.result[i].samplparcno
			};
			COMBOBOX.CH82EBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH82EBL);
		COMBOBOX.CH82EBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / qualitytpid / description / percentage1 /
	// percentage2 / percentage3 / referenceperc / averageperc / deficiencyperc
	// / claimperc / ctrno / execsettlmperc / perc / qualitytrmstp / percdevto1
	// / multiplfactor1 / percdevto2 / multiplfactor2 / percdevto3 /
	// multiplfactor3 / percdevto4 / multiplfactor4 / percdevto5 /
	// multiplfactor5

	//
	// CH5HDBL
	//
	COMBOBOX.CH5HDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5HDBL.LOADED = false;

	COMBOBOX.CH5HDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5HDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5HDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5HDBL.INITIALController = controller;
			COMBOBOX.CH5HDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5HDBLService",
					COMBOBOX, "CH5HDBLServiceCallback");
		}
		return COMBOBOX.CH5HDBL;
	};

	COMBOBOX.CH5HDBLServiceCallback = function(data) {
		COMBOBOX.CH5HDBL.LOADED = true;
		COMBOBOX.CH5HDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].wbtno,
				id : data.result[i].wbtno
			};
			COMBOBOX.CH5HDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5HDBL);
		COMBOBOX.CH5HDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / wbtstate / lastupdateconcurrencycolumn

	//
	// CHTIMBL
	//
	COMBOBOX.CHTIMBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTIMBL.LOADED = false;

	COMBOBOX.CHTIMBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTIMBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTIMBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTIMBL.INITIALController = controller;
			COMBOBOX.CHTIMBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTIMBLService",
					COMBOBOX, "CHTIMBLServiceCallback");
		}
		return COMBOBOX.CHTIMBL;
	};

	COMBOBOX.CHTIMBLServiceCallback = function(data) {
		COMBOBOX.CHTIMBL.LOADED = true;
		COMBOBOX.CHTIMBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].pospertpid,
				id : data.result[i].pospertpid
			};
			COMBOBOX.CHTIMBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTIMBL);
		COMBOBOX.CHTIMBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / estpertpid / cnversionfactor / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHUGPRL
	//
	COMBOBOX.CHUGPRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHUGPRL.LOADED = false;

	COMBOBOX.CHUGPRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHUGPRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHUGPRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHUGPRL.INITIALController = controller;
			COMBOBOX.CHUGPRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHUGPRLService",
					COMBOBOX, "CHUGPRLServiceCallback");
		}
		return COMBOBOX.CHUGPRL;
	};

	COMBOBOX.CHUGPRLServiceCallback = function(data) {
		COMBOBOX.CHUGPRL.LOADED = true;
		COMBOBOX.CHUGPRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].usergrpno,
				id : data.result[i].usergrpno
			};
			COMBOBOX.CHUGPRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHUGPRL);
		COMBOBOX.CHUGPRL.INITIALCOMBOBOX = null;
	};

	//
	// CH33ABL
	//
	COMBOBOX.CH33ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH33ABL.LOADED = false;

	COMBOBOX.CH33ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH33ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH33ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH33ABL.INITIALController = controller;
			COMBOBOX.CH33ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH33ABLService",
					COMBOBOX, "CH33ABLServiceCallback");
		}
		return COMBOBOX.CH33ABL;
	};

	COMBOBOX.CH33ABLServiceCallback = function(data) {
		COMBOBOX.CH33ABL.LOADED = true;
		COMBOBOX.CH33ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].vconfirmationtype,
				id : data.result[i].vconfirmationtype
			};
			COMBOBOX.CH33ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH33ABL);
		COMBOBOX.CH33ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ctrdte / ctrno / subctrno / pursalind / prodfamid
	// / quantity / trdunitidqty / curcd / price / trdunitidpric / bsrelid /
	// ctrnobs / reccnfselbydte / brokerrelid / ctrnobroker / reccnfbrokerdte /
	// vconfirmed / origin / lastupdateconcurrencycolumn

	//
	// CHBFABL
	//
	COMBOBOX.CHBFABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBFABL.LOADED = false;

	COMBOBOX.CHBFABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBFABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBFABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBFABL.INITIALController = controller;
			COMBOBOX.CHBFABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBFABLService",
					COMBOBOX, "CHBFABLServiceCallback");
		}
		return COMBOBOX.CHBFABL;
	};

	COMBOBOX.CHBFABLServiceCallback = function(data) {
		COMBOBOX.CHBFABL.LOADED = true;
		COMBOBOX.CHBFABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].budgetareaid,
				id : data.result[i].budgetareaid
			};
			COMBOBOX.CHBFABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBFABL);
		COMBOBOX.CHBFABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / area / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH81CBL
	//
	COMBOBOX.CH81CBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH81CBL.LOADED = false;

	COMBOBOX.CH81CBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH81CBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH81CBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH81CBL.INITIALController = controller;
			COMBOBOX.CH81CBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH81CBLService",
					COMBOBOX, "CH81CBLServiceCallback");
		}
		return COMBOBOX.CH81CBL;
	};

	COMBOBOX.CH81CBLServiceCallback = function(data) {
		COMBOBOX.CH81CBL.LOADED = true;
		COMBOBOX.CH81CBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].samplparcno,
				id : data.result[i].samplparcno
			};
			COMBOBOX.CH81CBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH81CBL);
		COMBOBOX.CH81CBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / anaseqno / anaorderdte / recresultsdte /
	// supintrelid / labrelid / extanano / anacertno / anafeesamnt / curcd /
	// anafeestp / original_anafeestp / status / lastupdateconcurrencycolumn

	//
	// CH91QBL
	//
	COMBOBOX.CH91QBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH91QBL.LOADED = false;

	COMBOBOX.CH91QBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH91QBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH91QBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH91QBL.INITIALController = controller;
			COMBOBOX.CH91QBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH91QBLService",
					COMBOBOX, "CH91QBLServiceCallback");
		}
		return COMBOBOX.CH91QBL;
	};

	COMBOBOX.CH91QBLServiceCallback = function(data) {
		COMBOBOX.CH91QBL.LOADED = true;
		COMBOBOX.CH91QBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].coveringno,
				id : data.result[i].coveringno
			};
			COMBOBOX.CH91QBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH91QBL);
		COMBOBOX.CH91QBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / rterequestdte / reqrtetime / coveringtp /
	// journalid / pos_lia_ind / puchasesaleind / curcd / curamnt / ctr_no /
	// subctr_no / prodfamid / prodtypeid / prodstypid / origin / termsofdel /
	// locid / descr_spec_pos / status / lastupdatedby / lastupdate /
	// identsource / bcuramnt / reqatbankdte / requestbanktime / spotrte /
	// assignrtedte / rteassigntime / ftxtp / journallineno / postp / posseqno /
	// coveringnocbk / puchasesaleind1 / curcd1 / curamnt1 / assignrtedte1 /
	// rteassigntime1 / spotrte1

	//
	// CH31FBL
	//
	COMBOBOX.CH31FBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31FBL.LOADED = false;

	COMBOBOX.CH31FBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31FBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31FBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31FBL.INITIALController = controller;
			COMBOBOX.CH31FBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31FBLService",
					COMBOBOX, "CH31FBLServiceCallback");
		}
		return COMBOBOX.CH31FBL;
	};

	COMBOBOX.CH31FBLServiceCallback = function(data) {
		COMBOBOX.CH31FBL.LOADED = true;
		COMBOBOX.CH31FBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH31FBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31FBL);
		COMBOBOX.CH31FBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / fxpmth / fxpyear / lasttradingdate / status

	//
	// CH74KBL
	//
	COMBOBOX.CH74KBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH74KBL.LOADED = false;

	COMBOBOX.CH74KBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH74KBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH74KBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH74KBL.INITIALController = controller;
			COMBOBOX.CH74KBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH74KBLService",
					COMBOBOX, "CH74KBLServiceCallback");
		}
		return COMBOBOX.CH74KBL;
	};

	COMBOBOX.CH74KBLServiceCallback = function(data) {
		COMBOBOX.CH74KBL.LOADED = true;
		COMBOBOX.CH74KBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].journalid,
				id : data.result[i].journalid
			};
			COMBOBOX.CH74KBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH74KBL);
		COMBOBOX.CH74KBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / journallineno / journalcolumnno / seqno / dbjseqno
	// / fmsledgerid / basamnt / dcind / curcd / curamnt / quantity / prodfamid
	// / prodtypeid / prodstypid / srcidfinmut / srctpfinmut / locid /
	// termsofdel / origin / descrspecpos / postp / posseqno / parcno /
	// liabilityno / invoiceno / accdte

	//
	// CH12ABL
	//
	COMBOBOX.CH12ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH12ABL.LOADED = false;

	COMBOBOX.CH12ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH12ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH12ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH12ABL.INITIALController = controller;
			COMBOBOX.CH12ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH12ABLService",
					COMBOBOX, "CH12ABLServiceCallback");
		}
		return COMBOBOX.CH12ABL;
	};

	COMBOBOX.CH12ABLServiceCallback = function(data) {
		COMBOBOX.CH12ABL.LOADED = true;
		COMBOBOX.CH12ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].posscnversionno,
				id : data.result[i].posscnversionno
			};
			COMBOBOX.CH12ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH12ABL);
		COMBOBOX.CH12ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / prodtypeid / prodstypid / origin /
	// termsofdelfrom / locidfrom / termsofdelto / locidto / description /
	// xcsind / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHTXTBL
	//
	COMBOBOX.CHTXTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTXTBL.LOADED = false;

	COMBOBOX.CHTXTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTXTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTXTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTXTBL.INITIALController = controller;
			COMBOBOX.CHTXTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTXTBLService",
					COMBOBOX, "CHTXTBLServiceCallback");
		}
		return COMBOBOX.CHTXTBL;
	};

	COMBOBOX.CHTXTBLServiceCallback = function(data) {
		COMBOBOX.CHTXTBL.LOADED = true;
		COMBOBOX.CHTXTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].txtno,
				id : data.result[i].txtno
			};
			COMBOBOX.CHTXTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTXTBL);
		COMBOBOX.CHTXTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / keycd / keyvalue / txttp / txt / action / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHLTTRL
	//
	COMBOBOX.CHLTTRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLTTRL.LOADED = false;

	COMBOBOX.CHLTTRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLTTRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLTTRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLTTRL.INITIALController = controller;
			COMBOBOX.CHLTTRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLTTRLService",
					COMBOBOX, "CHLTTRLServiceCallback");
		}
		return COMBOBOX.CHLTTRL;
	};

	COMBOBOX.CHLTTRLServiceCallback = function(data) {
		COMBOBOX.CHLTTRL.LOADED = true;
		COMBOBOX.CHLTTRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].lttid,
				id : data.result[i].lttid
			};
			COMBOBOX.CHLTTRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLTTRL);
		COMBOBOX.CHLTTRL.INITIALCOMBOBOX = null;
	};

	//
	// CHRECBL
	//
	COMBOBOX.CHRECBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRECBL.LOADED = false;

	COMBOBOX.CHRECBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRECBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRECBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRECBL.INITIALController = controller;
			COMBOBOX.CHRECBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRECBLService",
					COMBOBOX, "CHRECBLServiceCallback");
		}
		return COMBOBOX.CHRECBL;
	};

	COMBOBOX.CHRECBLServiceCallback = function(data) {
		COMBOBOX.CHRECBL.LOADED = true;
		COMBOBOX.CHRECBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].recseqno,
				id : data.result[i].recseqno
			};
			COMBOBOX.CHRECBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRECBL);
		COMBOBOX.CHRECBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / headclass / subclass / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHDTDBL
	//
	COMBOBOX.CHDTDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHDTDBL.LOADED = false;

	COMBOBOX.CHDTDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHDTDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHDTDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHDTDBL.INITIALController = controller;
			COMBOBOX.CHDTDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHDTDBLService",
					COMBOBOX, "CHDTDBLServiceCallback");
		}
		return COMBOBOX.CHDTDBL;
	};

	COMBOBOX.CHDTDBLServiceCallback = function(data) {
		COMBOBOX.CHDTDBL.LOADED = true;
		COMBOBOX.CHDTDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHDTDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHDTDBL);
		COMBOBOX.CHDTDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / docidtp / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH83FBL
	//
	COMBOBOX.CH83FBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH83FBL.LOADED = false;

	COMBOBOX.CH83FBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH83FBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH83FBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH83FBL.INITIALController = controller;
			COMBOBOX.CH83FBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH83FBLService",
					COMBOBOX, "CH83FBLServiceCallback");
		}
		return COMBOBOX.CH83FBL;
	};

	COMBOBOX.CH83FBLServiceCallback = function(data) {
		COMBOBOX.CH83FBL.LOADED = true;
		COMBOBOX.CH83FBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].qualitycertid,
				id : data.result[i].qualitycertid
			};
			COMBOBOX.CH83FBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH83FBL);
		COMBOBOX.CH83FBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / qualitycertcd / qualitycertdesc / messagetext /
	// enddaterequired / nongmpmessageind / status / lastupdatedby / lastupdate
	// / lastupdateconcurrencycolumn

	//
	// CHSCNRL
	//
	COMBOBOX.CHSCNRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHSCNRL.LOADED = false;

	COMBOBOX.CHSCNRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHSCNRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHSCNRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHSCNRL.INITIALController = controller;
			COMBOBOX.CHSCNRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHSCNRLService",
					COMBOBOX, "CHSCNRLServiceCallback");
		}
		return COMBOBOX.CHSCNRL;
	};

	COMBOBOX.CHSCNRLServiceCallback = function(data) {
		COMBOBOX.CHSCNRL.LOADED = true;
		COMBOBOX.CHSCNRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].trmsofsalid,
				id : data.result[i].trmsofsalid
			};
			COMBOBOX.CHSCNRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHSCNRL);
		COMBOBOX.CHSCNRL.INITIALCOMBOBOX = null;
	};

	//
	// CHTSMRL
	//
	COMBOBOX.CHTSMRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTSMRL.LOADED = false;

	COMBOBOX.CHTSMRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTSMRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTSMRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTSMRL.INITIALController = controller;
			COMBOBOX.CHTSMRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTSMRLService",
					COMBOBOX, "CHTSMRLServiceCallback");
		}
		return COMBOBOX.CHTSMRL;
	};

	COMBOBOX.CHTSMRLServiceCallback = function(data) {
		COMBOBOX.CHTSMRL.LOADED = true;
		COMBOBOX.CHTSMRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].tsmno,
				id : data.result[i].tsmno
			};
			COMBOBOX.CHTSMRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTSMRL);
		COMBOBOX.CHTSMRL.INITIALCOMBOBOX = null;
	};

	//
	// CH57BBL
	//
	COMBOBOX.CH57BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH57BBL.LOADED = false;

	COMBOBOX.CH57BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH57BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH57BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH57BBL.INITIALController = controller;
			COMBOBOX.CH57BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH57BBLService",
					COMBOBOX, "CH57BBLServiceCallback");
		}
		return COMBOBOX.CH57BBL;
	};

	COMBOBOX.CH57BBLServiceCallback = function(data) {
		COMBOBOX.CH57BBL.LOADED = true;
		COMBOBOX.CH57BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].washoutno,
				id : data.result[i].washoutno
			};
			COMBOBOX.CH57BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH57BBL);
		COMBOBOX.CH57BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / lastupdate / quantity / unitoftradeid / relid /
	// curcd / amnt / prodfamid / prodtypeid / prodstypid / origin / termsofdel
	// / locid / postp / posseqno / posmth / posyear / descrpos / status /
	// lastupdatedby / lastupdateconcurrencycolumn

	//
	// CH17ABL
	//
	COMBOBOX.CH17ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH17ABL.LOADED = false;

	COMBOBOX.CH17ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH17ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH17ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH17ABL.INITIALController = controller;
			COMBOBOX.CH17ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH17ABLService",
					COMBOBOX, "CH17ABLServiceCallback");
		}
		return COMBOBOX.CH17ABL;
	};

	COMBOBOX.CH17ABLServiceCallback = function(data) {
		COMBOBOX.CH17ABL.LOADED = true;
		COMBOBOX.CH17ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].exchangeid,
				id : data.result[i].exchangeid
			};
			COMBOBOX.CH17ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH17ABL);
		COMBOBOX.CH17ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / year / month / quantity / trdunitidqty
	// / description / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHPSDBL
	//
	COMBOBOX.CHPSDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPSDBL.LOADED = false;

	COMBOBOX.CHPSDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPSDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPSDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPSDBL.INITIALController = controller;
			COMBOBOX.CHPSDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPSDBLService",
					COMBOBOX, "CHPSDBLServiceCallback");
		}
		return COMBOBOX.CHPSDBL;
	};

	COMBOBOX.CHPSDBLServiceCallback = function(data) {
		COMBOBOX.CHPSDBL.LOADED = true;
		COMBOBOX.CHPSDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHPSDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPSDBL);
		COMBOBOX.CHPSDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / prodstypid / description / status /
	// lastupdatedby / lastupdateconcurrencycolumn

	//
	// CH5EOBL
	//
	COMBOBOX.CH5EOBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5EOBL.LOADED = false;

	COMBOBOX.CH5EOBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5EOBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5EOBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5EOBL.INITIALController = controller;
			COMBOBOX.CH5EOBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5EOBLService",
					COMBOBOX, "CH5EOBLServiceCallback");
		}
		return COMBOBOX.CH5EOBL;
	};

	COMBOBOX.CH5EOBLServiceCallback = function(data) {
		COMBOBOX.CH5EOBL.LOADED = true;
		COMBOBOX.CH5EOBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].circleno,
				id : data.result[i].circleno
			};
			COMBOBOX.CH5EOBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5EOBL);
		COMBOBOX.CH5EOBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / actioncd / status / lastupdatedby / lastupdate /
	// circlestatus / description / planningno / created / proposaldte /
	// pursalind / parctp / prodfamid / termsofdel / posmth / posyear /
	// storageid / transportno / prictp / curcd / price / trdunitidpric /
	// quantity / trdunitidqty / initrelid / supplierrelid / mailingtp /
	// languageid / text / lastupdateconcurrencycolumn

	//
	// CHCTDBL
	//
	COMBOBOX.CHCTDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCTDBL.LOADED = false;

	COMBOBOX.CHCTDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCTDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCTDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCTDBL.INITIALController = controller;
			COMBOBOX.CHCTDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCTDBLService",
					COMBOBOX, "CHCTDBLServiceCallback");
		}
		return COMBOBOX.CHCTDBL;
	};

	COMBOBOX.CHCTDBLServiceCallback = function(data) {
		COMBOBOX.CHCTDBL.LOADED = true;
		COMBOBOX.CHCTDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHCTDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCTDBL);
		COMBOBOX.CHCTDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / certtype / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHPFYBL
	//
	COMBOBOX.CHPFYBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPFYBL.LOADED = false;

	COMBOBOX.CHPFYBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPFYBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPFYBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPFYBL.INITIALController = controller;
			COMBOBOX.CHPFYBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPFYBLService",
					COMBOBOX, "CHPFYBLServiceCallback");
		}
		return COMBOBOX.CHPFYBL;
	};

	COMBOBOX.CHPFYBLServiceCallback = function(data) {
		COMBOBOX.CHPFYBL.LOADED = true;
		COMBOBOX.CHPFYBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHPFYBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPFYBL);
		COMBOBOX.CHPFYBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / gnid / prodgroupid / resptrader /
	// respexecuter / poslimitlong / poslimitshort / prodfamfutexc /
	// prodtypefutexc / prodstypfutexc / originfutexc / trmsdlvfutexc /
	// futexclocid / futexcrelid / initmargnfutexc / pertpid / curcdcov /
	// curcdcovprem / limitpremium / cropyearind / curcddefault / curcddefprem /
	// sustsoyaind / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH012BL
	//
	COMBOBOX.CH012BL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH012BL.LOADED = false;

	COMBOBOX.CH012BL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH012BLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH012BL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH012BL.INITIALController = controller;
			COMBOBOX.CH012BL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH012BLService",
					COMBOBOX, "CH012BLServiceCallback");
		}
		return COMBOBOX.CH012BL;
	};

	COMBOBOX.CH012BLServiceCallback = function(data) {
		COMBOBOX.CH012BL.LOADED = true;
		COMBOBOX.CH012BL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].usergrpno,
				id : data.result[i].usergrpno
			};
			COMBOBOX.CH012BL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH012BL);
		COMBOBOX.CH012BL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / userno / username / description / status

	//
	// CHFLTBL
	//
	COMBOBOX.CHFLTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHFLTBL.LOADED = false;

	COMBOBOX.CHFLTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHFLTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHFLTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHFLTBL.INITIALController = controller;
			COMBOBOX.CHFLTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHFLTBLService",
					COMBOBOX, "CHFLTBLServiceCallback");
		}
		return COMBOBOX.CHFLTBL;
	};

	COMBOBOX.CHFLTBLServiceCallback = function(data) {
		COMBOBOX.CHFLTBL.LOADED = true;
		COMBOBOX.CHFLTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHFLTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHFLTBL);
		COMBOBOX.CHFLTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / fxpmth / fxpyear / lasttradingdate / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHUNTBL
	//
	COMBOBOX.CHUNTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHUNTBL.LOADED = false;

	COMBOBOX.CHUNTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHUNTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHUNTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHUNTBL.INITIALController = controller;
			COMBOBOX.CHUNTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHUNTBLService",
					COMBOBOX, "CHUNTBLServiceCallback");
		}
		return COMBOBOX.CHUNTBL;
	};

	COMBOBOX.CHUNTBLServiceCallback = function(data) {
		COMBOBOX.CHUNTBL.LOADED = true;
		COMBOBOX.CHUNTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].trdunitid,
				id : data.result[i].trdunitid
			};
			COMBOBOX.CHUNTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHUNTBL);
		COMBOBOX.CHUNTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / weightinkg / noofdecimals / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHEFUBL
	//
	COMBOBOX.CHEFUBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHEFUBL.LOADED = false;

	COMBOBOX.CHEFUBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHEFUBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHEFUBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHEFUBL.INITIALController = controller;
			COMBOBOX.CHEFUBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHEFUBLService",
					COMBOBOX, "CHEFUBLServiceCallback");
		}
		return COMBOBOX.CHEFUBL;
	};

	COMBOBOX.CHEFUBLServiceCallback = function(data) {
		COMBOBOX.CHEFUBL.LOADED = true;
		COMBOBOX.CHEFUBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CHEFUBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHEFUBL);
		COMBOBOX.CHEFUBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / planningno / ppaseqno / fixstate / reason
	// / lastupdateconcurrencycolumn

	//
	// CHBFARL
	//
	COMBOBOX.CHBFARL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBFARL.LOADED = false;

	COMBOBOX.CHBFARL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBFARLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBFARL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBFARL.INITIALController = controller;
			COMBOBOX.CHBFARL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBFARLService",
					COMBOBOX, "CHBFARLServiceCallback");
		}
		return COMBOBOX.CHBFARL;
	};

	COMBOBOX.CHBFARLServiceCallback = function(data) {
		COMBOBOX.CHBFARL.LOADED = true;
		COMBOBOX.CHBFARL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].budgetareaid,
				id : data.result[i].budgetareaid
			};
			COMBOBOX.CHBFARL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBFARL);
		COMBOBOX.CHBFARL.INITIALCOMBOBOX = null;
	};

	//
	// CHTSMBL
	//
	COMBOBOX.CHTSMBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTSMBL.LOADED = false;

	COMBOBOX.CHTSMBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTSMBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTSMBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTSMBL.INITIALController = controller;
			COMBOBOX.CHTSMBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTSMBLService",
					COMBOBOX, "CHTSMBLServiceCallback");
		}
		return COMBOBOX.CHTSMBL;
	};

	COMBOBOX.CHTSMBLServiceCallback = function(data) {
		COMBOBOX.CHTSMBL.LOADED = true;
		COMBOBOX.CHTSMBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].tsmno,
				id : data.result[i].tsmno
			};
			COMBOBOX.CHTSMBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTSMBL);
		COMBOBOX.CHTSMBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / module / description / status / lastupdatedby /
	// lastupdate

	//
	// CHPGRRL
	//
	COMBOBOX.CHPGRRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPGRRL.LOADED = false;

	COMBOBOX.CHPGRRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPGRRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPGRRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPGRRL.INITIALController = controller;
			COMBOBOX.CHPGRRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPGRRLService",
					COMBOBOX, "CHPGRRLServiceCallback");
		}
		return COMBOBOX.CHPGRRL;
	};

	COMBOBOX.CHPGRRLServiceCallback = function(data) {
		COMBOBOX.CHPGRRL.LOADED = true;
		COMBOBOX.CHPGRRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodgroupid,
				id : data.result[i].prodgroupid
			};
			COMBOBOX.CHPGRRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPGRRL);
		COMBOBOX.CHPGRRL.INITIALCOMBOBOX = null;
	};

	//
	// CHRDCBL
	//
	COMBOBOX.CHRDCBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRDCBL.LOADED = false;

	COMBOBOX.CHRDCBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRDCBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRDCBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRDCBL.INITIALController = controller;
			COMBOBOX.CHRDCBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRDCBLService",
					COMBOBOX, "CHRDCBLServiceCallback");
		}
		return COMBOBOX.CHRDCBL;
	};

	COMBOBOX.CHRDCBLServiceCallback = function(data) {
		COMBOBOX.CHRDCBL.LOADED = true;
		COMBOBOX.CHRDCBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].rdcno,
				id : data.result[i].rdcno
			};
			COMBOBOX.CHRDCBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRDCBL);
		COMBOBOX.CHRDCBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / relid / doctype / mailingtp / prodfamid /
	// prodtypeid / prodstypid / priority / channeladdress / docreference1 /
	// docreference2 / docreference3 / channelusagecd / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH51BUL
	//
	COMBOBOX.CH51BUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH51BUL.LOADED = false;

	COMBOBOX.CH51BUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH51BULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH51BUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH51BUL.INITIALController = controller;
			COMBOBOX.CH51BUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH51BULService",
					COMBOBOX, "CH51BULServiceCallback");
		}
		return COMBOBOX.CH51BUL;
	};

	COMBOBOX.CH51BULServiceCallback = function(data) {
		COMBOBOX.CH51BUL.LOADED = true;
		COMBOBOX.CH51BUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH51BUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH51BUL);
		COMBOBOX.CH51BUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / ppaseqno / pursalind / parctp / bsrelid /
	// sellbuychoicind / mailing_tp_bs / language_id_bs / prodfamid / prodtypeid
	// / prodstypid / origin / termsofdel / locid / quantity / bal / ctrdte /
	// trdunitidqty / ctrno / subctrno / p_free_text_500 /
	// lastupdateconcurrencycolumn
	//
	// CH5JFBL
	//
	COMBOBOX.CH5JFBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5JFBL.LOADED = false;

	COMBOBOX.CH5JFBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5JFBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5JFBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5JFBL.INITIALController = controller;
			COMBOBOX.CH5JFBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5JFBLService",
					COMBOBOX, "CH5JFBLServiceCallback");
		}
		return COMBOBOX.CH5JFBL;
	};

	COMBOBOX.CH5JFBLServiceCallback = function(data) {
		COMBOBOX.CH5JFBL.LOADED = true;
		COMBOBOX.CH5JFBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parcno,
				id : data.result[i].parcno
			};
			COMBOBOX.CH5JFBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5JFBL);
		COMBOBOX.CH5JFBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ctrdte / perstartdte / perenddte / ctrno /
	// subctrno / descriptionspec / prodfamid / prodtypeid / prodstypid / origin
	// / termsofdel / locid / bsrelid / bal / trdunitidqty / curcd / price /
	// trdunitidpric / orderid / ctrnobs / ctrnobroker / brokerrelid / parbal

	//
	// CH3IABL
	//
	COMBOBOX.CH3IABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3IABL.LOADED = false;

	COMBOBOX.CH3IABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3IABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3IABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3IABL.INITIALController = controller;
			COMBOBOX.CH3IABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3IABLService",
					COMBOBOX, "CH3IABLServiceCallback");
		}
		return COMBOBOX.CH3IABL;
	};

	COMBOBOX.CH3IABLServiceCallback = function(data) {
		COMBOBOX.CH3IABL.LOADED = true;
		COMBOBOX.CH3IABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH3IABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3IABL);
		COMBOBOX.CH3IABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / seqnoframe / bsrelid / quantity /
	// trdunitidqty / storagetp / storageid / transportno / transportoutput /
	// useridcreator / created / status / lastupdatedby / lastupdate / frameqty
	// / nominatedqty / destinatstartdte / lociddest / locidloading /
	// lastupdateconcurrencycolumn

	//
	// CHANPBL
	//
	COMBOBOX.CHANPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHANPBL.LOADED = false;

	COMBOBOX.CHANPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHANPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHANPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHANPBL.INITIALController = controller;
			COMBOBOX.CHANPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHANPBLService",
					COMBOBOX, "CHANPBLServiceCallback");
		}
		return COMBOBOX.CHANPBL;
	};

	COMBOBOX.CHANPBLServiceCallback = function(data) {
		COMBOBOX.CHANPBL.LOADED = true;
		COMBOBOX.CHANPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parameterid,
				id : data.result[i].parameterid
			};
			COMBOBOX.CHANPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHANPBL);
		COMBOBOX.CHANPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parametername / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHUNTRL
	//
	COMBOBOX.CHUNTRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHUNTRL.LOADED = false;

	COMBOBOX.CHUNTRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHUNTRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHUNTRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHUNTRL.INITIALController = controller;
			COMBOBOX.CHUNTRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHUNTRLService",
					COMBOBOX, "CHUNTRLServiceCallback");
		}
		return COMBOBOX.CHUNTRL;
	};

	COMBOBOX.CHUNTRLServiceCallback = function(data) {
		COMBOBOX.CHUNTRL.LOADED = true;
		COMBOBOX.CHUNTRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].trdunitid,
				id : data.result[i].trdunitid
			};
			COMBOBOX.CHUNTRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHUNTRL);
		COMBOBOX.CHUNTRL.INITIALCOMBOBOX = null;
	};

	//
	// CHUNDBL
	//
	COMBOBOX.CHUNDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHUNDBL.LOADED = false;

	COMBOBOX.CHUNDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHUNDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHUNDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHUNDBL.INITIALController = controller;
			COMBOBOX.CHUNDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHUNDBLService",
					COMBOBOX, "CHUNDBLServiceCallback");
		}
		return COMBOBOX.CHUNDBL;
	};

	COMBOBOX.CHUNDBLServiceCallback = function(data) {
		COMBOBOX.CHUNDBL.LOADED = true;
		COMBOBOX.CHUNDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHUNDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHUNDBL);
		COMBOBOX.CHUNDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / trdunitid / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH5BDUL
	//
	COMBOBOX.CH5BDUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5BDUL.LOADED = false;

	COMBOBOX.CH5BDUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5BDULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5BDUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5BDUL.INITIALController = controller;
			COMBOBOX.CH5BDUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5BDULService",
					COMBOBOX, "CH5BDULServiceCallback");
		}
		return COMBOBOX.CH5BDUL;
	};

	COMBOBOX.CH5BDULServiceCallback = function(data) {
		COMBOBOX.CH5BDUL.LOADED = true;
		COMBOBOX.CH5BDUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5BDUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5BDUL);
		COMBOBOX.CH5BDUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / pursalind / prodfamid /
	// transportno / loadingstartdte / departurestartdte / dischargestartdte /
	// dischargeenddte / destinatstartdte / destinatenddte / lociddest /
	// locidloading / supintrelid / mailingtpsuv / languageidsuv / parctp /
	// statusppa / docseqnobldo / prodtypeid / prodstypid / origin / termsofdel
	// / locid / postp / posseqno / bsrelid / pardte / orderstatusv / qtyinmt /
	// trdunitidqty / originateind / quantity / bal / qtyinkg / balinkg /
	// orderdte / provorderdte / ctrno / subctrno / statuspar / momentofdlvind /
	// transshipcbv / supintrelidloc / termsofdelcnv / locidcnv / storageid /
	// p_free_text_500 / lastupdateconcurrencycolumn

	//
	// CH56ABL
	//
	COMBOBOX.CH56ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH56ABL.LOADED = false;

	COMBOBOX.CH56ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH56ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH56ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH56ABL.INITIALController = controller;
			COMBOBOX.CH56ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH56ABLService",
					COMBOBOX, "CH56ABLServiceCallback");
		}
		return COMBOBOX.CH56ABL;
	};

	COMBOBOX.CH56ABLServiceCallback = function(data) {
		COMBOBOX.CH56ABL.LOADED = true;
		COMBOBOX.CH56ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH56ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH56ABL);
		COMBOBOX.CH56ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / cwdseqno / claimstatus / dlvdte /
	// prodfamid / prodtypeid / prodstypid / origin / termsofdel / locid / postp
	// / posseqno / descriptionspec / docno / relid / claimcurcd / claimprice /
	// claimtrdunitidpric / claimamnt / claimquantity / claimqtyinkg / prictpind
	// / proratasettlmind / parcno / weightcldlvind / ctrno / subctrno / ctrtp /
	// docqtyinkg / docquantity / doctrdunitidqty / qtydischarged /
	// trdunitqtydisc / transportno / status / parsupplcustrelid /
	// parsupintrelid / claimtrdunitidqty / contractcurcd / contractprice /
	// contracttrdunitidpric / spotprice / spotpricecurcd / spotpricetrdunitid /
	// spotpricefactor / pursalind / docseqnobldo / qtyprorata / trdunitqtyprora
	// / action_cd / statusprovisionalind / statusfinalind / statusinvoicedind /
	// statusbookedind / ppatp / lastupdateconcurrencycolumn

	//
	// CHANGBL
	//
	COMBOBOX.CHANGBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHANGBL.LOADED = false;

	COMBOBOX.CHANGBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHANGBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHANGBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHANGBL.INITIALController = controller;
			COMBOBOX.CHANGBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHANGBLService",
					COMBOBOX, "CHANGBLServiceCallback");
		}
		return COMBOBOX.CHANGBL;
	};

	COMBOBOX.CHANGBLServiceCallback = function(data) {
		COMBOBOX.CHANGBL.LOADED = true;
		COMBOBOX.CHANGBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parametergroupid,
				id : data.result[i].parametergroupid
			};
			COMBOBOX.CHANGBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHANGBL);
		COMBOBOX.CHANGBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parametergroupname / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHCSSRL
	//
	COMBOBOX.CHCSSRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCSSRL.LOADED = false;

	COMBOBOX.CHCSSRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCSSRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCSSRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCSSRL.INITIALController = controller;
			COMBOBOX.CHCSSRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCSSRLService",
					COMBOBOX, "CHCSSRLServiceCallback");
		}
		return COMBOBOX.CHCSSRL;
	};

	COMBOBOX.CHCSSRLServiceCallback = function(data) {
		COMBOBOX.CHCSSRL.LOADED = true;
		COMBOBOX.CHCSSRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CHCSSRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCSSRL);
		COMBOBOX.CHCSSRL.INITIALCOMBOBOX = null;
	};

	//
	// CH12BBL
	//
	COMBOBOX.CH12BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH12BBL.LOADED = false;

	COMBOBOX.CH12BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH12BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH12BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH12BBL.INITIALController = controller;
			COMBOBOX.CH12BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH12BBLService",
					COMBOBOX, "CH12BBLServiceCallback");
		}
		return COMBOBOX.CH12BBL;
	};

	COMBOBOX.CH12BBLServiceCallback = function(data) {
		COMBOBOX.CH12BBL.LOADED = true;
		COMBOBOX.CH12BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH12BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH12BBL);
		COMBOBOX.CH12BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / priority /
	// posscnversionno / termsofdelfrom / locidfrom / termsofdelto / locidto /
	// description / xdfstatus / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHZ1AUL
	//
	COMBOBOX.CHZ1AUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHZ1AUL.LOADED = false;

	COMBOBOX.CHZ1AUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHZ1AULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHZ1AUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHZ1AUL.INITIALController = controller;
			COMBOBOX.CHZ1AUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHZ1AULService",
					COMBOBOX, "CHZ1AULServiceCallback");
		}
		return COMBOBOX.CHZ1AUL;
	};

	COMBOBOX.CHZ1AULServiceCallback = function(data) {
		COMBOBOX.CHZ1AUL.LOADED = true;
		COMBOBOX.CHZ1AUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].tablename,
				id : data.result[i].tablename
			};
			COMBOBOX.CHZ1AUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHZ1AUL);
		COMBOBOX.CHZ1AUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / count / oldest / latest

	//
	// CH91BBL
	//
	COMBOBOX.CH91BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH91BBL.LOADED = false;

	COMBOBOX.CH91BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH91BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH91BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH91BBL.INITIALController = controller;
			COMBOBOX.CH91BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH91BBLService",
					COMBOBOX, "CH91BBLServiceCallback");
		}
		return COMBOBOX.CH91BBL;
	};

	COMBOBOX.CH91BBLServiceCallback = function(data) {
		COMBOBOX.CH91BBL.LOADED = true;
		COMBOBOX.CH91BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].assignrtedte,
				id : data.result[i].assignrtedte
			};
			COMBOBOX.CH91BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH91BBL);
		COMBOBOX.CH91BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / rteassigntime / coveringnocbk / vcuramntp /
	// spotrte / curcd / vcuramnts / curamnt / puchasesaleind

	//
	// CHANGRL
	//
	COMBOBOX.CHANGRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHANGRL.LOADED = false;

	COMBOBOX.CHANGRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHANGRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHANGRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHANGRL.INITIALController = controller;
			COMBOBOX.CHANGRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHANGRLService",
					COMBOBOX, "CHANGRLServiceCallback");
		}
		return COMBOBOX.CHANGRL;
	};

	COMBOBOX.CHANGRLServiceCallback = function(data) {
		COMBOBOX.CHANGRL.LOADED = true;
		COMBOBOX.CHANGRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parametergroupid,
				id : data.result[i].parametergroupid
			};
			COMBOBOX.CHANGRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHANGRL);
		COMBOBOX.CHANGRL.INITIALCOMBOBOX = null;
	};

	//
	// CH81DBL
	//
	COMBOBOX.CH81DBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH81DBL.LOADED = false;

	COMBOBOX.CH81DBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH81DBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH81DBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH81DBL.INITIALController = controller;
			COMBOBOX.CH81DBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH81DBLService",
					COMBOBOX, "CH81DBLServiceCallback");
		}
		return COMBOBOX.CH81DBL;
	};

	COMBOBOX.CH81DBLServiceCallback = function(data) {
		COMBOBOX.CH81DBL.LOADED = true;
		COMBOBOX.CH81DBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].samplparcno,
				id : data.result[i].samplparcno
			};
			COMBOBOX.CH81DBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH81DBL);
		COMBOBOX.CH81DBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / qualitytpid / description / percentage1 /
	// calcpercentage / refpercentage / execsettlmperc / perc / prodfamid /
	// prodtypeid / percentage2 / percentage3

	//
	// CH83GBL
	//
	COMBOBOX.CH83GBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH83GBL.LOADED = false;

	COMBOBOX.CH83GBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH83GBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH83GBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH83GBL.INITIALController = controller;
			COMBOBOX.CH83GBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH83GBLService",
					COMBOBOX, "CH83GBLServiceCallback");
		}
		return COMBOBOX.CH83GBL;
	};

	COMBOBOX.CH83GBLServiceCallback = function(data) {
		COMBOBOX.CH83GBL.LOADED = true;
		COMBOBOX.CH83GBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].qualitycertid,
				id : data.result[i].qualitycertid
			};
			COMBOBOX.CH83GBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH83GBL);
		COMBOBOX.CH83GBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / qualitycertcd / prodfamid / status / lastupdatedby
	// / lastupdate / lastupdateconcurrencycolumn

	//
	// CH01BBL
	//
	COMBOBOX.CH01BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH01BBL.LOADED = false;

	COMBOBOX.CH01BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH01BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH01BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH01BBL.INITIALController = controller;
			COMBOBOX.CH01BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH01BBLService",
					COMBOBOX, "CH01BBLServiceCallback");
		}
		return COMBOBOX.CH01BBL;
	};

	COMBOBOX.CH01BBLServiceCallback = function(data) {
		COMBOBOX.CH01BBL.LOADED = true;
		COMBOBOX.CH01BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].username,
				id : data.result[i].username
			};
			COMBOBOX.CH01BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH01BBL);
		COMBOBOX.CH01BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / authgrp / authlvl

	//
	// CHRELBL
	//
	COMBOBOX.CHRELBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRELBL.LOADED = false;

	COMBOBOX.CHRELBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRELBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRELBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRELBL.INITIALController = controller;
			COMBOBOX.CHRELBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRELBLService",
					COMBOBOX, "CHRELBLServiceCallback");
		}
		return COMBOBOX.CHRELBL;
	};

	COMBOBOX.CHRELBLServiceCallback = function(data) {
		COMBOBOX.CHRELBL.LOADED = true;
		COMBOBOX.CHRELBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHRELBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRELBL);
		COMBOBOX.CHRELBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / name / place / buyerind / bankind / coopind /
	// supplierind / brokerind / sundriesind / agentind / comiteind / cuminvind
	// / supintind / laboratoryind / participantind / confctrind /
	// consumptionind / percquaclaref / shipownerind / insurancecoind / restind
	// / entryinsertdte / procescrdinvind / procesdebinvind / runningaccnt /
	// regionfms / vatnumber / fmsnameno / fmssubbookingid / languageid /
	// seqnoprimary / seqnotrade / seqnosettlement / seqnodocpres /
	// seqnofinancial / adoptrelid / partofrelid / rsprelid / curcd / paymtrmsid
	// / paymtsleadind / status / lastupdatedby / lastupdate / gmpind /
	// gmpenddte / vgmptext / sustainableind / sustainableenddte /
	// certificatesystem / certificatenumber / vsustainabletext /
	// certificatecalcind / qualitycertid / qualitycertcd /
	// lastupdateconcurrencycolumn

	//
	// CHPFYRL
	//
	COMBOBOX.CHPFYRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPFYRL.LOADED = false;

	COMBOBOX.CHPFYRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPFYRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPFYRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPFYRL.INITIALController = controller;
			COMBOBOX.CHPFYRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPFYRLService",
					COMBOBOX, "CHPFYRLServiceCallback");
		}
		return COMBOBOX.CHPFYRL;
	};

	COMBOBOX.CHPFYRLServiceCallback = function(data) {
		COMBOBOX.CHPFYRL.LOADED = true;
		COMBOBOX.CHPFYRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHPFYRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPFYRL);
		COMBOBOX.CHPFYRL.INITIALCOMBOBOX = null;
	};

	//
	// CH12RBL
	//
	COMBOBOX.CH12RBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH12RBL.LOADED = false;

	COMBOBOX.CH12RBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH12RBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH12RBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH12RBL.INITIALController = controller;
			COMBOBOX.CH12RBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH12RBLService",
					COMBOBOX, "CH12RBLServiceCallback");
		}
		return COMBOBOX.CH12RBL;
	};

	COMBOBOX.CH12RBLServiceCallback = function(data) {
		COMBOBOX.CH12RBL.LOADED = true;
		COMBOBOX.CH12RBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].posscnversionno,
				id : data.result[i].posscnversionno
			};
			COMBOBOX.CH12RBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH12RBL);
		COMBOBOX.CH12RBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / sortno / costgrpid / costrteid / costctrind /
	// liabilityind / delayrealisation / rgtliaind / relid / paymtrmsid /
	// costrtetp / description / startdte / calculationqty / percentage / price
	// / curcd / trdunitid / xcsstatus / cststatus / crtstatus / estcostngsepind

	//
	// CH9ABBL
	//
	COMBOBOX.CH9ABBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH9ABBL.LOADED = false;

	COMBOBOX.CH9ABBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH9ABBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH9ABBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH9ABBL.INITIALController = controller;
			COMBOBOX.CH9ABBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH9ABBLService",
					COMBOBOX, "CH9ABBLServiceCallback");
		}
		return COMBOBOX.CH9ABBL;
	};

	COMBOBOX.CH9ABBLServiceCallback = function(data) {
		COMBOBOX.CH9ABBL.LOADED = true;
		COMBOBOX.CH9ABBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH9ABBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH9ABBL);
		COMBOBOX.CH9ABBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / version / subctrno / duedate / curcdbuy /
	// amntspotbuy / amntprembuy / amntfrwdbuy / curcdsell / amntspotsell /
	// amntpremsell / amntfrwdsell / spotrtectr / premrtectr / frwdrtectr /
	// vfinalind / status / lastupdatedby / lastupdate / vtobecnfind /
	// vlanguageid / vmailingtp / vctr_date / vbuy_sell_ind / vcross_rte_ctr /
	// vctr_tp_fx / leadingcalcamntind / vleadingagioind / vsubctrupdated /
	// lastupdateconcurrencycolumn

	//
	// CH34ABL
	//
	COMBOBOX.CH34ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH34ABL.LOADED = false;

	COMBOBOX.CH34ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH34ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH34ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH34ABL.INITIALController = controller;
			COMBOBOX.CH34ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH34ABLService",
					COMBOBOX, "CH34ABLServiceCallback");
		}
		return COMBOBOX.CH34ABL;
	};

	COMBOBOX.CH34ABLServiceCallback = function(data) {
		COMBOBOX.CH34ABL.LOADED = true;
		COMBOBOX.CH34ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH34ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH34ABL);
		COMBOBOX.CH34ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / ctrnobs / ctrnobroker / ctrdte /
	// bsrelid / pursalind / fullypricedind / brokerrelid / quantity /
	// trdunitidqty / qtytoprice / posmth / posyear / premium / curcdprem /
	// trdunitidprem / price / curcdpriced / trdunitidpric / prodfamid /
	// prodtypeid / prodstypid / origin / termsofdel / locid / descriptionspec /
	// pricpremctrind / perstartdte / perenddte / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2 /
	// lastupdateconcurrencycolumn6 / lastupdateconcurrencycolumn9 /
	// lastupdateconcurrencycolumn10 / completelypriced / notpriced /
	// partiallypriced

	//
	// CH5AAUL
	//
	COMBOBOX.CH5AAUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5AAUL.LOADED = false;

	COMBOBOX.CH5AAUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5AAULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5AAUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5AAUL.INITIALController = controller;
			COMBOBOX.CH5AAUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5AAULService",
					COMBOBOX, "CH5AAULServiceCallback");
		}
		return COMBOBOX.CH5AAUL;
	};

	COMBOBOX.CH5AAULServiceCallback = function(data) {
		COMBOBOX.CH5AAUL.LOADED = true;
		COMBOBOX.CH5AAUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5AAUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5AAUL);
		COMBOBOX.CH5AAUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / ppaseqno / ppasubno / postp / ctrno /
	// subctrno / prodfamid / locidloading / mapdte / loadingstartdte /
	// loadingenddte / lociddest / receiverrelid / destinatstartdte /
	// destinatenddte / storagetp / storageid / transportno / chartererrelid /
	// mailing_tp_char / language_id_char / supintrelid / mailing_tp_sup /
	// language_id_sup / p_free_text_500 / parctp / qtyinmt / prodtypeid /
	// prodstypid / termsofdel / origin / locid / descriptionspec / pursalind /
	// bsrelid / brorelind / mailing_tp_bs / language_id_bs / shipperrelid /
	// mailing_tp_ship / language_id_ship / status / ctrdte / balinkg / ordernr
	// / lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2 /
	// lastupdateconcurrencycolumn3 / lastupdateconcurrencycolumn4 /
	// lastupdateconcurrencycolumn5 / lastupdateconcurrencycolumn6

	//
	// CHCGRBL
	//
	COMBOBOX.CHCGRBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCGRBL.LOADED = false;

	COMBOBOX.CHCGRBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCGRBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCGRBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCGRBL.INITIALController = controller;
			COMBOBOX.CHCGRBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCGRBLService",
					COMBOBOX, "CHCGRBLServiceCallback");
		}
		return COMBOBOX.CHCGRBL;
	};

	COMBOBOX.CHCGRBLServiceCallback = function(data) {
		COMBOBOX.CHCGRBL.LOADED = true;
		COMBOBOX.CHCGRBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CHCGRBL.put(obj);
		}
		
		setComboboxDefaultValue(COMBOBOX.CHCGRBL);
		COMBOBOX.CHCGRBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / vatcalcind / ownvatind /
	// journalident / estcostngsepind / settlmreservation / vatcd / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH9AGBL
	//
	COMBOBOX.CH9AGBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH9AGBL.LOADED = false;

	COMBOBOX.CH9AGBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH9AGBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH9AGBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH9AGBL.INITIALController = controller;
			COMBOBOX.CH9AGBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH9AGBLService",
					COMBOBOX, "CH9AGBLServiceCallback");
		}
		return COMBOBOX.CH9AGBL;
	};

	COMBOBOX.CH9AGBLServiceCallback = function(data) {
		COMBOBOX.CH9AGBL.LOADED = true;
		COMBOBOX.CH9AGBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].transactiondte,
				id : data.result[i].transactiondte
			};
			COMBOBOX.CH9AGBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH9AGBL);
		COMBOBOX.CH9AGBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / coverpriorityid / curcd / curamntstart /
	// curamnttrn / curamntpos / basamntpos / valuationrte / basamntvaluated /
	// basamntres / curunit / reverserteind / lastupdatedby / status /
	// lastupdate / basamntstart / basamnttrn / actualind / clrtestartdte /
	// clrtespot / lastupdateconcurrencycolumn

	//
	// CHADRBL
	//
	COMBOBOX.CHADRBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHADRBL.LOADED = false;

	COMBOBOX.CHADRBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHADRBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHADRBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHADRBL.INITIALController = controller;
			COMBOBOX.CHADRBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHADRBLService",
					COMBOBOX, "CHADRBLServiceCallback");
		}
		return COMBOBOX.CHADRBL;
	};

	COMBOBOX.CHADRBLServiceCallback = function(data) {
		COMBOBOX.CHADRBL.LOADED = true;
		COMBOBOX.CHADRBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].addressid,
				id : data.result[i].addressid
			};
			COMBOBOX.CHADRBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHADRBL);
		COMBOBOX.CHADRBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / addresstype / name / department / addressline /
	// prefixedline / zipcd / place / region / countrycd / vatnumber /
	// phonenumber / faxno / contact / defaultdate / defaulttime / status /
	// lastupdatedby / lastupdate / relid / comment / emailaddress /
	// lastupdateconcurrencycolumn

	//
	// CH57ABL
	//
	COMBOBOX.CH57ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH57ABL.LOADED = false;

	COMBOBOX.CH57ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH57ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH57ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH57ABL.INITIALController = controller;
			COMBOBOX.CH57ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH57ABLService",
					COMBOBOX, "CH57ABLServiceCallback");
		}
		return COMBOBOX.CH57ABL;
	};

	COMBOBOX.CH57ABLServiceCallback = function(data) {
		COMBOBOX.CH57ABL.LOADED = true;
		COMBOBOX.CH57ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parcno,
				id : data.result[i].parcno
			};
			COMBOBOX.CH57ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH57ABL);
		COMBOBOX.CH57ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / vselectedind / pursalind / vwashoutqty / bal /
	// trdunitidqty / ctrdte / curcd / price / trdunitidpric / ctrno /
	// originalind / ctrtp / quantity / prodfamid / prodtypeid / prodstypid /
	// origin / termsofdel / locid / postp / posseqno / bsrelid /
	// descriptionspec / subctrno / weightinkgqty / weightinkgprice /
	// lastupdateconcurrencycolumn

	//
	// CHTSVRL
	//
	COMBOBOX.CHTSVRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTSVRL.LOADED = false;

	COMBOBOX.CHTSVRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTSVRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTSVRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTSVRL.INITIALController = controller;
			COMBOBOX.CHTSVRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTSVRLService",
					COMBOBOX, "CHTSVRLServiceCallback");
		}
		return COMBOBOX.CHTSVRL;
	};

	COMBOBOX.CHTSVRLServiceCallback = function(data) {
		COMBOBOX.CHTSVRL.LOADED = true;
		COMBOBOX.CHTSVRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].tsvno,
				id : data.result[i].tsvno
			};
			COMBOBOX.CHTSVRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTSVRL);
		COMBOBOX.CHTSVRL.INITIALCOMBOBOX = null;
	};

	//
	// CH19EBL
	//
	COMBOBOX.CH19EBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH19EBL.LOADED = false;

	COMBOBOX.CH19EBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH19EBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH19EBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH19EBL.INITIALController = controller;
			COMBOBOX.CH19EBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH19EBLService",
					COMBOBOX, "CH19EBLServiceCallback");
		}
		return COMBOBOX.CH19EBL;
	};

	COMBOBOX.CH19EBLServiceCallback = function(data) {
		COMBOBOX.CH19EBL.LOADED = true;
		COMBOBOX.CH19EBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].routingcode,
				id : data.result[i].routingcode
			};
			COMBOBOX.CH19EBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH19EBL);
		COMBOBOX.CH19EBL.INITIALCOMBOBOX = null;
	};

	//
	// CHCNTRL
	//
	COMBOBOX.CHCNTRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCNTRL.LOADED = false;

	COMBOBOX.CHCNTRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCNTRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCNTRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCNTRL.INITIALController = controller;
			COMBOBOX.CHCNTRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCNTRLService",
					COMBOBOX, "CHCNTRLServiceCallback");
		}
		return COMBOBOX.CHCNTRL;
	};

	COMBOBOX.CHCNTRLServiceCallback = function(data) {
		COMBOBOX.CHCNTRL.LOADED = true;
		COMBOBOX.CHCNTRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].countrycd,
				id : data.result[i].countrycd
			};
			COMBOBOX.CHCNTRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCNTRL);
		COMBOBOX.CHCNTRL.INITIALCOMBOBOX = null;
	};

	//
	// CH013BL
	//
	COMBOBOX.CH013BL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH013BL.LOADED = false;

	COMBOBOX.CH013BL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH013BLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH013BL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH013BL.INITIALController = controller;
			COMBOBOX.CH013BL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH013BLService",
					COMBOBOX, "CH013BLServiceCallback");
		}
		return COMBOBOX.CH013BL;
	};

	COMBOBOX.CH013BLServiceCallback = function(data) {
		COMBOBOX.CH013BL.LOADED = true;
		COMBOBOX.CH013BL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].authgrpno,
				id : data.result[i].authgrpno
			};
			COMBOBOX.CH013BL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH013BL);
		COMBOBOX.CH013BL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / usergrpno / authlvlno / status / lastupdatedby /
	// lastupdate / authlvl / authlvldescription / authlvlstatus / usergrp /
	// usergrpdescription / usergrpstatus / authgrp / authgrpdescription /
	// authgrpstatus / lastupdateconcurrencycolumn

	//
	// CHLIIRL
	//
	COMBOBOX.CHLIIRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLIIRL.LOADED = false;

	COMBOBOX.CHLIIRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLIIRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLIIRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLIIRL.INITIALController = controller;
			COMBOBOX.CHLIIRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLIIRLService",
					COMBOBOX, "CHLIIRLServiceCallback");
		}
		return COMBOBOX.CHLIIRL;
	};

	COMBOBOX.CHLIIRLServiceCallback = function(data) {
		COMBOBOX.CHLIIRL.LOADED = true;
		COMBOBOX.CHLIIRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].liino,
				id : data.result[i].liino
			};
			COMBOBOX.CHLIIRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLIIRL);
		COMBOBOX.CHLIIRL.INITIALCOMBOBOX = null;
	};

	//
	// CH11ABL
	//
	COMBOBOX.CH11ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH11ABL.LOADED = false;

	COMBOBOX.CH11ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH11ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH11ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH11ABL.INITIALController = controller;
			COMBOBOX.CH11ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH11ABLService",
					COMBOBOX, "CH11ABLServiceCallback");
		}
		return COMBOBOX.CH11ABL;
	};

	COMBOBOX.CH11ABLServiceCallback = function(data) {
		COMBOBOX.CH11ABL.LOADED = true;
		COMBOBOX.CH11ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH11ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH11ABL);
		COMBOBOX.CH11ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / termsofdel /
	// locid / prodfamidbase / prodtypeidbase / prodstypidbase / originbase /
	// termsofdelbase / locidbase / priority / cnversioncostind / reverseind /
	// posscnversionno / xdfdescription / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH5BABL
	//
	COMBOBOX.CH5BABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5BABL.LOADED = false;

	COMBOBOX.CH5BABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5BABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5BABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5BABL.INITIALController = controller;
			COMBOBOX.CH5BABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5BABLService",
					COMBOBOX, "CH5BABLServiceCallback");
		}
		return COMBOBOX.CH5BABL;
	};

	COMBOBOX.CH5BABLServiceCallback = function(data) {
		COMBOBOX.CH5BABL.LOADED = true;
		COMBOBOX.CH5BABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5BABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5BABL);
		COMBOBOX.CH5BABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / pursalind / prodfamid /
	// transportno / loadingstartdte / departurestartdte / dischargeenddte /
	// dischargestartdte / destinatenddte / lociddest / locidloading /
	// supintrelid / mailingtpsuv / languageidsuv / destinatstartdte / parctp /
	// statusppa / docseqnobldo / invcopyindv / orderstatusv / originateind /
	// prodtypeid / prodstypid / origin / termsofdel / locid / postp / posseqno
	// / pardte / bsrelid / docno / qtyinmt / trdunitidqty / quantity / bal /
	// qtyinkg / balinkg / orderdte / provorderdte / ctrno / subctrno /
	// statuspar / momentofdlvind / notorderedcbv / provisionalcbv / finalcbv /
	// supintrelidloc / price / curcd / trdunitidpric / storageid / docidtp /
	// statusppasalev / ppatp / orderind / orderactionv /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2 /
	// lastupdateconcurrencycolumn4 / lastupdateconcurrencycolumn5

	//
	// CH02EBL
	//
	COMBOBOX.CH02EBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH02EBL.LOADED = false;

	COMBOBOX.CH02EBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH02EBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH02EBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH02EBL.INITIALController = controller;
			COMBOBOX.CH02EBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH02EBLService",
					COMBOBOX, "CH02EBLServiceCallback");
		}
		return COMBOBOX.CH02EBL;
	};

	COMBOBOX.CH02EBLServiceCallback = function(data) {
		COMBOBOX.CH02EBL.LOADED = true;
		COMBOBOX.CH02EBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].doctype,
				id : data.result[i].doctype
			};
			COMBOBOX.CH02EBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH02EBL);
		COMBOBOX.CH02EBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / docseq / reccreated / recupdated / requser /
	// reqstate / vreqstatechar / reqcount / reqresponsecode /
	// reqresponsemessage / recupdatedconcurrencycolumn

	//
	// CHCGRRL
	//
	COMBOBOX.CHCGRRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCGRRL.LOADED = false;

	COMBOBOX.CHCGRRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCGRRLComboValues = function(controller, widgetId) {
		if (!COMBOBOX.CHCGRRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCGRRL.INITIALController = controller;
			COMBOBOX.CHCGRRL.INITIALCOMBOBOX = controller.id + widgetId;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCGRRLService",
					COMBOBOX, "CHCGRRLServiceCallback");
		}
		return COMBOBOX.CHCGRRL;
	};

	COMBOBOX.CHCGRRLServiceCallback = function(data) {
		COMBOBOX.CHCGRRL.LOADED = true;
		COMBOBOX.CHCGRRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CHCGRRL.put(obj);
		}
		
		setComboboxDefaultValue(COMBOBOX.CHCGRRL);
		COMBOBOX.CHCGRRL.INITIALCOMBOBOX = null;
	};

	//
	// CHEFTBL
	//
	COMBOBOX.CHEFTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHEFTBL.LOADED = false;

	COMBOBOX.CHEFTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHEFTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHEFTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHEFTBL.INITIALController = controller;
			COMBOBOX.CHEFTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHEFTBLService",
					COMBOBOX, "CHEFTBLServiceCallback");
		}
		return COMBOBOX.CHEFTBL;
	};

	COMBOBOX.CHEFTBLServiceCallback = function(data) {
		COMBOBOX.CHEFTBL.LOADED = true;
		COMBOBOX.CHEFTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CHEFTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHEFTBL);
		COMBOBOX.CHEFTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / planningno / ppaseqno / reason /
	// lastupdateconcurrencycolumn

	//
	// CHADRRL
	//
	COMBOBOX.CHADRRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHADRRL.LOADED = false;

	COMBOBOX.CHADRRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHADRRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHADRRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHADRRL.INITIALController = controller;
			COMBOBOX.CHADRRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHADRRLService",
					COMBOBOX, "CHADRRLServiceCallback");
		}
		return COMBOBOX.CHADRRL;
	};

	COMBOBOX.CHADRRLServiceCallback = function(data) {
		COMBOBOX.CHADRRL.LOADED = true;
		COMBOBOX.CHADRRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].addressid,
				id : data.result[i].addressid
			};
			COMBOBOX.CHADRRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHADRRL);
		COMBOBOX.CHADRRL.INITIALCOMBOBOX = null;
	};

	//
	// CH69BBL
	//
	COMBOBOX.CH69BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH69BBL.LOADED = false;

	COMBOBOX.CH69BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH69BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH69BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH69BBL.INITIALController = controller;
			COMBOBOX.CH69BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH69BBLService",
					COMBOBOX, "CH69BBLServiceCallback");
		}
		return COMBOBOX.CH69BBL;
	};

	COMBOBOX.CH69BBLServiceCallback = function(data) {
		COMBOBOX.CH69BBL.LOADED = true;
		COMBOBOX.CH69BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].rundate,
				id : data.result[i].rundate
			};
			COMBOBOX.CH69BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH69BBL);
		COMBOBOX.CH69BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / runtime / relid / name / limitstatus / notdue /
	// duenext7 / overdue7 / overdue714 / overduegt15 / total / totalyesterday /
	// routingcode / trader / execution / status / lastupdatedby / lastupdate /
	// debtxt / debtxtentry / lastupdateconcurrencycolumn

	//
	// CH51AUL
	//
	COMBOBOX.CH51AUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH51AUL.LOADED = false;

	COMBOBOX.CH51AUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH51AULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH51AUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH51AUL.INITIALController = controller;
			COMBOBOX.CH51AUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH51AULService",
					COMBOBOX, "CH51AULServiceCallback");
		}
		return COMBOBOX.CH51AUL;
	};

	COMBOBOX.CH51AULServiceCallback = function(data) {
		COMBOBOX.CH51AUL.LOADED = true;
		COMBOBOX.CH51AUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH51AUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH51AUL);
		COMBOBOX.CH51AUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / ppaseqno / prodfamid / locid / origin /
	// supintrelid / mailing_tp_sup / language_id_sup / chartererrelid /
	// mailing_tp_char / language_id_char / prodtypeid / prodstypid /
	// descriptionspec / termsofdel / pursalind / bsrelid / qtyinmt / parctp /
	// pardte / sellbuychoicind / dest_details / mailing_tp_bs / language_id_bs
	// / mailing_tp_bro / language_id_bro / postp / p_free_text_500 / status /
	// ctrno / subctrno / balinkg / vppiordernr / vppilastupdate /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2

	//
	// CHTSVBL
	//
	COMBOBOX.CHTSVBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTSVBL.LOADED = false;

	COMBOBOX.CHTSVBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTSVBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTSVBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTSVBL.INITIALController = controller;
			COMBOBOX.CHTSVBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTSVBLService",
					COMBOBOX, "CHTSVBLServiceCallback");
		}
		return COMBOBOX.CHTSVBL;
	};

	COMBOBOX.CHTSVBLServiceCallback = function(data) {
		COMBOBOX.CHTSVBL.LOADED = true;
		COMBOBOX.CHTSVBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].tsvno,
				id : data.result[i].tsvno
			};
			COMBOBOX.CHTSVBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTSVBL);
		COMBOBOX.CHTSVBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / tsmno / module / description1 / variable /
	// description / type / numvalue / charvalue / datevalue / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH55GUL
	//
	COMBOBOX.CH55GUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH55GUL.LOADED = false;

	COMBOBOX.CH55GUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH55GULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH55GUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH55GUL.INITIALController = controller;
			COMBOBOX.CH55GUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH55GULService",
					COMBOBOX, "CH55GULServiceCallback");
		}
		return COMBOBOX.CH55GUL;
	};

	COMBOBOX.CH55GULServiceCallback = function(data) {
		COMBOBOX.CH55GUL.LOADED = true;
		COMBOBOX.CH55GUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH55GUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH55GUL);
		COMBOBOX.CH55GUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / prodfamid / transportno /
	// destinatstartdte / storagetp / locidloading / lociddest / storageid /
	// docno / qtyinkg_dpr / quantity_dpr / trdunitidqty_dpr / qtydischarged /
	// trdunitqtydisc / prodtypeid / prodstypid / origin / termsofdel / locid /
	// ctrno / subctrno / bsrelid / curcd / price / trdunitidpric /
	// weightcldlvind_chd / ctrtp / brokerrelid / extparcelno / qtyinmt /
	// descriptionspec / pursalind / parctp / statusppa / docseqnobldo / postp /
	// posseqno / originateind / pardte / weightcldlvind_par / cnversionno /
	// statuspar / momentofdlvind / ctrnobs / sellonindv / planningnocoupled /
	// ppaseqnocoupled / lastupdate / ppatp / orderind /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn8

	//
	// CHCSTBL
	//
	COMBOBOX.CHCSTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCSTBL.LOADED = false;

	COMBOBOX.CHCSTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCSTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCSTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCSTBL.INITIALController = controller;
			COMBOBOX.CHCSTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCSTBLService",
					COMBOBOX, "CHCSTBLServiceCallback");
		}
		return COMBOBOX.CHCSTBL;
	};

	COMBOBOX.CHCSTBLServiceCallback = function(data) {
		COMBOBOX.CHCSTBL.LOADED = true;
		COMBOBOX.CHCSTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CHCSTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCSTBL);
		COMBOBOX.CHCSTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / costrteid / costrtetp / description / curcd /
	// trdunitid / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH63IBL
	//
	COMBOBOX.CH63IBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH63IBL.LOADED = false;

	COMBOBOX.CH63IBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH63IBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH63IBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH63IBL.INITIALController = controller;
			COMBOBOX.CH63IBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH63IBLService",
					COMBOBOX, "CH63IBLServiceCallback");
		}
		return COMBOBOX.CH63IBL;
	};

	COMBOBOX.CH63IBLServiceCallback = function(data) {
		COMBOBOX.CH63IBL.LOADED = true;
		COMBOBOX.CH63IBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].incinvoiceid,
				id : data.result[i].incinvoiceid
			};
			COMBOBOX.CH63IBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH63IBL);
		COMBOBOX.CH63IBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / fmsinvoiceno / relid / description / curcd /
	// invoiceamnt / countrycd / amntfulfilled / amnttofulfill / invoicedte /
	// receivaldte / duedte / fmscompletedind / externinvoiceno / routingcd /
	// paymentcd / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH3JABL
	//
	COMBOBOX.CH3JABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3JABL.LOADED = false;

	COMBOBOX.CH3JABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3JABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3JABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3JABL.INITIALController = controller;
			COMBOBOX.CH3JABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3JABLService",
					COMBOBOX, "CH3JABLServiceCallback");
		}
		return COMBOBOX.CH3JABL;
	};

	COMBOBOX.CH3JABLServiceCallback = function(data) {
		COMBOBOX.CH3JABL.LOADED = true;
		COMBOBOX.CH3JABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctaseqno,
				id : data.result[i].ctaseqno
			};
			COMBOBOX.CH3JABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3JABL);
		COMBOBOX.CH3JABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / prodtypeid / prodstypid / origin /
	// pursalind / certtype / ctadte / supplcustrelid / description / quantity /
	// price / curcd / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHT51BL
	//
	COMBOBOX.CHT51BL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHT51BL.LOADED = false;

	COMBOBOX.CHT51BL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHT51BLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHT51BL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHT51BL.INITIALController = controller;
			COMBOBOX.CHT51BL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHT51BLService",
					COMBOBOX, "CHT51BLServiceCallback");
		}
		return COMBOBOX.CHT51BL;
	};

	COMBOBOX.CHT51BLServiceCallback = function(data) {
		COMBOBOX.CHT51BL.LOADED = true;
		COMBOBOX.CHT51BL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqnot51,
				id : data.result[i].seqnot51
			};
			COMBOBOX.CHT51BL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHT51BL);
		COMBOBOX.CHT51BL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / fmssystemno / fmsledgerid / invoiceno / pursalind
	// / invoicedte / accdte / peryear / permth / bookyear / bookmth /
	// reportyear / reportmth / qtyinkg / curcd / vatamnt / invoiceamnt /
	// fmsvatamnt / fmsinvoiceamnt / countrycd / vatcd / vatrte / relid / name /
	// prodfamid / fmsdescription / dlvno / matchingno / planningno / ppaseqno /
	// ppasubno / ppaqtyinkg / finalind / status / lastupdatedby / lastupdate /
	// liabilityno / lastupdateconcurrencycolumn

	//
	// CH81ABL
	//
	COMBOBOX.CH81ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH81ABL.LOADED = false;

	COMBOBOX.CH81ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH81ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH81ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH81ABL.INITIALController = controller;
			COMBOBOX.CH81ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH81ABLService",
					COMBOBOX, "CH81ABLServiceCallback");
		}
		return COMBOBOX.CH81ABL;
	};

	COMBOBOX.CH81ABLServiceCallback = function(data) {
		COMBOBOX.CH81ABL.LOADED = true;
		COMBOBOX.CH81ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].samplparcno,
				id : data.result[i].samplparcno
			};
			COMBOBOX.CH81ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH81ABL);
		COMBOBOX.CH81ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / transportno / transportdescription / prodfamid /
	// prodtypeid / prodstypid / origin / sampletp / sealtp / qtyinkg / sealdte
	// / holdno / shipper / agreedind / status / utilstorageid / utilstoragetp /
	// trastorageid / tradestinatstartdte / tralociddest /
	// lastupdateconcurrencycolumn

	//
	// CHZLGBL
	//
	COMBOBOX.CHZLGBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHZLGBL.LOADED = false;

	COMBOBOX.CHZLGBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHZLGBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHZLGBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHZLGBL.INITIALController = controller;
			COMBOBOX.CHZLGBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHZLGBLService",
					COMBOBOX, "CHZLGBLServiceCallback");
		}
		return COMBOBOX.CHZLGBL;
	};

	COMBOBOX.CHZLGBLServiceCallback = function(data) {
		COMBOBOX.CHZLGBL.LOADED = true;
		COMBOBOX.CHZLGBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].logtimestamp,
				id : data.result[i].logtimestamp
			};
			COMBOBOX.CHZLGBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHZLGBL);
		COMBOBOX.CHZLGBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / programname / c_logtimestamp / seqno / userid /
	// jobnumber / jobname / luwtimestamp / logtype / logentryid / description

	//
	// CH74IBL
	//
	COMBOBOX.CH74IBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH74IBL.LOADED = false;

	COMBOBOX.CH74IBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH74IBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH74IBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH74IBL.INITIALController = controller;
			COMBOBOX.CH74IBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH74IBLService",
					COMBOBOX, "CH74IBLServiceCallback");
		}
		return COMBOBOX.CH74IBL;
	};

	COMBOBOX.CH74IBLServiceCallback = function(data) {
		COMBOBOX.CH74IBL.LOADED = true;
		COMBOBOX.CH74IBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH74IBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH74IBL);
		COMBOBOX.CH74IBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / journalid /
	// journallineno / journalcolumnno / seqno / dbjseqno / basamnt / dcind /
	// curcd / curamnt / quantity / srcidfinmut / srctpfinmut / origin /
	// termsofdel / locid / postp / posseqno / descrspecpos / invoiceno / parcno
	// / liabilityno / accdte / fmsledgerid / fmsregionid

	//
	// CHANPRL
	//
	COMBOBOX.CHANPRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHANPRL.LOADED = false;

	COMBOBOX.CHANPRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHANPRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHANPRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHANPRL.INITIALController = controller;
			COMBOBOX.CHANPRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHANPRLService",
					COMBOBOX, "CHANPRLServiceCallback");
		}
		return COMBOBOX.CHANPRL;
	};

	COMBOBOX.CHANPRLServiceCallback = function(data) {
		COMBOBOX.CHANPRL.LOADED = true;
		COMBOBOX.CHANPRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parameterid,
				id : data.result[i].parameterid
			};
			COMBOBOX.CHANPRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHANPRL);
		COMBOBOX.CHANPRL.INITIALCOMBOBOX = null;
	};

	//
	// CH31DBL
	//
	COMBOBOX.CH31DBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31DBL.LOADED = false;

	COMBOBOX.CH31DBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31DBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31DBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31DBL.INITIALController = controller;
			COMBOBOX.CH31DBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31DBLService",
					COMBOBOX, "CH31DBLServiceCallback");
		}
		return COMBOBOX.CH31DBL;
	};

	COMBOBOX.CH31DBLServiceCallback = function(data) {
		COMBOBOX.CH31DBL.LOADED = true;
		COMBOBOX.CH31DBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH31DBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31DBL);
		COMBOBOX.CH31DBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / perstartdte / perenddte / price /
	// premium / quantity / minqty / maxqty / ctrnobs / ctrnobroker / posseqno /
	// status / fxpmth / fxpyear / subctrnopgt / ctrnopgt / actioncd /
	// qtytoprice / confirmwarning / altyear / altmth /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2

	//
	// CH12CBL
	//
	COMBOBOX.CH12CBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH12CBL.LOADED = false;

	COMBOBOX.CH12CBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH12CBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH12CBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH12CBL.INITIALController = controller;
			COMBOBOX.CH12CBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH12CBLService",
					COMBOBOX, "CH12CBLServiceCallback");
		}
		return COMBOBOX.CH12CBL;
	};

	COMBOBOX.CH12CBLServiceCallback = function(data) {
		COMBOBOX.CH12CBL.LOADED = true;
		COMBOBOX.CH12CBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].posscnversionno,
				id : data.result[i].posscnversionno
			};
			COMBOBOX.CH12CBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH12CBL);
		COMBOBOX.CH12CBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / sortno / costgrpid / costrteid / costctrind /
	// liabilityind / delayrealisation / rgtliaind / relid / paymtrmsid / status
	// / lastupdatedby / lastupdate / cststatus / lastupdateconcurrencycolumn

	//
	// CHPFDBL
	//
	COMBOBOX.CHPFDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPFDBL.LOADED = false;

	COMBOBOX.CHPFDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPFDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPFDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPFDBL.INITIALController = controller;
			COMBOBOX.CHPFDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPFDBLService",
					COMBOBOX, "CHPFDBLServiceCallback");
		}
		return COMBOBOX.CHPFDBL;
	};

	COMBOBOX.CHPFDBLServiceCallback = function(data) {
		COMBOBOX.CHPFDBL.LOADED = true;
		COMBOBOX.CHPFDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHPFDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPFDBL);
		COMBOBOX.CHPFDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHBACBL
	//
	COMBOBOX.CHBACBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBACBL.LOADED = false;

	COMBOBOX.CHBACBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBACBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBACBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBACBL.INITIALController = controller;
			COMBOBOX.CHBACBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBACBLService",
					COMBOBOX, "CHBACBLServiceCallback");
		}
		return COMBOBOX.CHBACBL;
	};

	COMBOBOX.CHBACBLServiceCallback = function(data) {
		COMBOBOX.CHBACBL.LOADED = true;
		COMBOBOX.CHBACBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].bankaccntseqno,
				id : data.result[i].bankaccntseqno
			};
			COMBOBOX.CHBACBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBACBL);
		COMBOBOX.CHBACBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / bankaccntno / descrbankaccnt / countrycd / curcd /
	// status / ibanno / bicno / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHPTYBL
	//
	COMBOBOX.CHPTYBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPTYBL.LOADED = false;

	COMBOBOX.CHPTYBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPTYBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPTYBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPTYBL.INITIALController = controller;
			COMBOBOX.CHPTYBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPTYBLService",
					COMBOBOX, "CHPTYBLServiceCallback");
		}
		return COMBOBOX.CHPTYBL;
	};

	COMBOBOX.CHPTYBLServiceCallback = function(data) {
		COMBOBOX.CHPTYBL.LOADED = true;
		COMBOBOX.CHPTYBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHPTYBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPTYBL);
		COMBOBOX.CHPTYBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / description / descrext /
	// prodtypegroup / markettp / vatcd / trdunitidpric / trdunitidqty /
	// trdunitidprem / originindocsind / sustainableind / vsustainabletext /
	// status / lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH1AABL
	//
	COMBOBOX.CH1AABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH1AABL.LOADED = false;

	COMBOBOX.CH1AABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH1AABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH1AABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH1AABL.INITIALController = controller;
			COMBOBOX.CH1AABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH1AABLService",
					COMBOBOX, "CH1AABLServiceCallback");
		}
		return COMBOBOX.CH1AABL;
	};

	COMBOBOX.CH1AABLServiceCallback = function(data) {
		COMBOBOX.CH1AABL.LOADED = true;
		COMBOBOX.CH1AABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].wpcseqno,
				id : data.result[i].wpcseqno
			};
			COMBOBOX.CH1AABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH1AABL);
		COMBOBOX.CH1AABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / prodtypeid / prodstypid / origin /
	// area / pursalind / key / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH54FUL
	//
	COMBOBOX.CH54FUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH54FUL.LOADED = false;

	COMBOBOX.CH54FUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH54FULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH54FUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH54FUL.INITIALController = controller;
			COMBOBOX.CH54FUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH54FULService",
					COMBOBOX, "CH54FULServiceCallback");
		}
		return COMBOBOX.CH54FUL;
	};

	COMBOBOX.CH54FULServiceCallback = function(data) {
		COMBOBOX.CH54FUL.LOADED = true;
		COMBOBOX.CH54FUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parcno,
				id : data.result[i].parcno
			};
			COMBOBOX.CH54FUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH54FUL);
		COMBOBOX.CH54FUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / postp / posseqno / lociddest / locidloading /
	// destinatstartdte / loadingstartdte / departurestartdte / prodfamid /
	// storagetp / storageid / transportno / majorationdte / purqtyv /
	// trduntpurqtyv / salqtyv / trduntsalqtyv / saldoqtyv / trduntsaldoqtyv /
	// pursalind / bsrelid / prodtypeid / prodstypid / origin / locid / pardte /
	// quantity / trdunitidqty / fulflmntindv / diffqtytobookv / supintrelid /
	// diffctrprreext / vattp / termsofdel / descriptionspec / ctrno / subctrno
	// / extparcelno / ctrdte / parctp / bal / trdunt_balv / curcd / price /
	// trdunitidpric / extensionctrind / stringno / origultmtapprdte /
	// cdtquantity / minqty / maxqty / seqno_stringv / name_stringv /
	// locid_stringv / status / planningnov / ppaseqnov / sumbalv /
	// fullypricedind / ctrtp / plannedqty / ordernrv / orderid / orderline /
	// ordertp / vppilastupdate / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / lastupdateconcurrencycolumn3 /
	// lastupdateconcurrencycolumn4 / lastupdateconcurrencycolumn6

	//
	// CHPVTBL
	//
	COMBOBOX.CHPVTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPVTBL.LOADED = false;

	COMBOBOX.CHPVTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPVTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPVTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPVTBL.INITIALController = controller;
			COMBOBOX.CHPVTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPVTBLService",
					COMBOBOX, "CHPVTBLServiceCallback");
		}
		return COMBOBOX.CHPVTBL;
	};

	COMBOBOX.CHPVTBLServiceCallback = function(data) {
		COMBOBOX.CHPVTBL.LOADED = true;
		COMBOBOX.CHPVTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHPVTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPVTBL);
		COMBOBOX.CHPVTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / countrycd / vatcd / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH014BL
	//
	COMBOBOX.CH014BL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH014BL.LOADED = false;

	COMBOBOX.CH014BL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH014BLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH014BL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH014BL.INITIALController = controller;
			COMBOBOX.CH014BL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH014BLService",
					COMBOBOX, "CH014BLServiceCallback");
		}
		return COMBOBOX.CH014BL;
	};

	COMBOBOX.CH014BLServiceCallback = function(data) {
		COMBOBOX.CH014BL.LOADED = true;
		COMBOBOX.CH014BL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].authgrpno,
				id : data.result[i].authgrpno
			};
			COMBOBOX.CH014BL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH014BL);
		COMBOBOX.CH014BL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / usergrpno / authlvlno / status / lastupdatedby /
	// lastupdate / authlvl / authlvldescription / authlvlstatus / usergrp /
	// usergrpdescription / usergrpstatus / authgrp / authgrpdescription /
	// authgrpstatus / lastupdateconcurrencycolumn

	//
	// CH61EBL
	//
	COMBOBOX.CH61EBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH61EBL.LOADED = false;

	COMBOBOX.CH61EBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH61EBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH61EBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH61EBL.INITIALController = controller;
			COMBOBOX.CH61EBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH61EBLService",
					COMBOBOX, "CH61EBLServiceCallback");
		}
		return COMBOBOX.CH61EBL;
	};

	COMBOBOX.CH61EBLServiceCallback = function(data) {
		COMBOBOX.CH61EBL.LOADED = true;
		COMBOBOX.CH61EBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].liabilityno,
				id : data.result[i].liabilityno
			};
			COMBOBOX.CH61EBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH61EBL);
		COMBOBOX.CH61EBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / invoicabledte / liabilitytp / costgrpid /
	// amntexclvat / curcd / countrycd / vatcd / rgtliaind / invoiceableind /
	// actpassind / quantity / trdunitidqty / relid / prodfamid / prodtypeid /
	// prodstypid / origin / termsofdel / locid / incinvoiceid / status /
	// lastupdatedby / descriptionspec / lastupdateconcurrencycolumn / invoiceid

	//
	// CHLANRL
	//
	COMBOBOX.CHLANRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLANRL.LOADED = false;

	COMBOBOX.CHLANRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLANRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLANRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLANRL.INITIALController = controller;
			COMBOBOX.CHLANRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLANRLService",
					COMBOBOX, "CHLANRLServiceCallback");
		}
		return COMBOBOX.CHLANRL;
	};

	COMBOBOX.CHLANRLServiceCallback = function(data) {
		COMBOBOX.CHLANRL.LOADED = true;
		COMBOBOX.CHLANRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHLANRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLANRL);
		COMBOBOX.CHLANRL.INITIALCOMBOBOX = null;
	};

	//
	// CH9AHBL
	//
	COMBOBOX.CH9AHBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH9AHBL.LOADED = false;

	COMBOBOX.CH9AHBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH9AHBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH9AHBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH9AHBL.INITIALController = controller;
			COMBOBOX.CH9AHBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH9AHBLService",
					COMBOBOX, "CH9AHBLServiceCallback");
		}
		return COMBOBOX.CH9AHBL;
	};

	COMBOBOX.CH9AHBLServiceCallback = function(data) {
		COMBOBOX.CH9AHBL.LOADED = true;
		COMBOBOX.CH9AHBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].transactiondte,
				id : data.result[i].transactiondte
			};
			COMBOBOX.CH9AHBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH9AHBL);
		COMBOBOX.CH9AHBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / curcd / curamntstart / curamnttrn / curamntpos /
	// basamntpos / valuationrte / basamntvaluated / basamntres / clrtestartdte
	// / clrtespot / status / lastupdatedby / lastupdate / basamntstart /
	// basamnttrn / curunit / reverserteind / actualind

	//
	// CHAULBL
	//
	COMBOBOX.CHAULBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHAULBL.LOADED = false;

	COMBOBOX.CHAULBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHAULBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHAULBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHAULBL.INITIALController = controller;
			COMBOBOX.CHAULBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHAULBLService",
					COMBOBOX, "CHAULBLServiceCallback");
		}
		return COMBOBOX.CHAULBL;
	};

	COMBOBOX.CHAULBLServiceCallback = function(data) {
		COMBOBOX.CHAULBL.LOADED = true;
		COMBOBOX.CHAULBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].authlvlno,
				id : data.result[i].authlvlno
			};
			COMBOBOX.CHAULBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHAULBL);
		COMBOBOX.CHAULBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / authlvl / description / status / lastupdatedby /
	// lastupdate

	//
	// CH19FBL
	//
	COMBOBOX.CH19FBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH19FBL.LOADED = false;

	COMBOBOX.CH19FBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH19FBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH19FBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH19FBL.INITIALController = controller;
			COMBOBOX.CH19FBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH19FBLService",
					COMBOBOX, "CH19FBLServiceCallback");
		}
		return COMBOBOX.CH19FBL;
	};

	COMBOBOX.CH19FBLServiceCallback = function(data) {
		COMBOBOX.CH19FBL.LOADED = true;
		COMBOBOX.CH19FBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CH19FBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH19FBL);
		COMBOBOX.CH19FBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / masterrelid / limit / freetext / opensal / openpur
	// / limitsal / limitpur / userid / gmpind / status / useridexecution /
	// routingcode / limitstartdate / salesturnovermt / profitcurcd /
	// profitamount / equitycurcd / equityamount / attentionind /
	// paymentarrearsind / tradecategory / ltp2seqno / finratng / finratngdesc /
	// lastupdatedby / lastupdate / guarantyind / guarantyenddate /
	// lastupdateconcurrencycolumn

	//
	// CH11BBL
	//
	COMBOBOX.CH11BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH11BBL.LOADED = false;

	COMBOBOX.CH11BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH11BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH11BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH11BBL.INITIALController = controller;
			COMBOBOX.CH11BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH11BBLService",
					COMBOBOX, "CH11BBLServiceCallback");
		}
		return COMBOBOX.CH11BBL;
	};

	COMBOBOX.CH11BBLServiceCallback = function(data) {
		COMBOBOX.CH11BBL.LOADED = true;
		COMBOBOX.CH11BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH11BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH11BBL);
		COMBOBOX.CH11BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / termsofdel /
	// locid / posyear / posmth / startdte / basepric / curcd / trdunitidpric /
	// status / lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH3ACBL
	//
	COMBOBOX.CH3ACBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3ACBL.LOADED = false;

	COMBOBOX.CH3ACBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3ACBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3ACBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3ACBL.INITIALController = controller;
			COMBOBOX.CH3ACBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3ACBLService",
					COMBOBOX, "CH3ACBLServiceCallback");
		}
		return COMBOBOX.CH3ACBL;
	};

	COMBOBOX.CH3ACBLServiceCallback = function(data) {
		COMBOBOX.CH3ACBL.LOADED = true;
		COMBOBOX.CH3ACBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH3ACBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3ACBL);
		COMBOBOX.CH3ACBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / bsrelid / prodtypeid / prodstypid / origin /
	// termsofdel / locid / vyear / vmonth / perstartdte / perenddte / ctrno /
	// subctrno / curcdprem / premium / trdunitidprem / vfrmqty / vfixedqty /
	// vtofixqty

	//
	// CH69ABL
	//
	COMBOBOX.CH69ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH69ABL.LOADED = false;

	COMBOBOX.CH69ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH69ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH69ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH69ABL.INITIALController = controller;
			COMBOBOX.CH69ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH69ABLService",
					COMBOBOX, "CH69ABLServiceCallback");
		}
		return COMBOBOX.CH69ABL;
	};

	COMBOBOX.CH69ABLServiceCallback = function(data) {
		COMBOBOX.CH69ABL.LOADED = true;
		COMBOBOX.CH69ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].rundate,
				id : data.result[i].rundate
			};
			COMBOBOX.CH69ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH69ABL);
		COMBOBOX.CH69ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / runtime / relid / name / limitstatus / invoice /
	// invoicelayout / invdate / duedate / duedatefrom / duedateto / prodfamid /
	// currcd / days / notdue / duenext7 / overdue7 / overdue714 / overduegt15 /
	// total / routingcode / trader / execution / status / txt / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHLANBL
	//
	COMBOBOX.CHLANBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLANBL.LOADED = false;

	COMBOBOX.CHLANBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLANBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLANBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLANBL.INITIALController = controller;
			COMBOBOX.CHLANBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLANBLService",
					COMBOBOX, "CHLANBLServiceCallback");
		}
		return COMBOBOX.CHLANBL;
	};

	COMBOBOX.CHLANBLServiceCallback = function(data) {
		COMBOBOX.CHLANBL.LOADED = true;
		COMBOBOX.CHLANBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHLANBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLANBL);
		COMBOBOX.CHLANBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / descrlanguage / decimalpoint / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHAULRL
	//
	COMBOBOX.CHAULRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHAULRL.LOADED = false;

	COMBOBOX.CHAULRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHAULRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHAULRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHAULRL.INITIALController = controller;
			COMBOBOX.CHAULRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHAULRLService",
					COMBOBOX, "CHAULRLServiceCallback");
		}
		return COMBOBOX.CHAULRL;
	};

	COMBOBOX.CHAULRLServiceCallback = function(data) {
		COMBOBOX.CHAULRL.LOADED = true;
		COMBOBOX.CHAULRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].authlvlno,
				id : data.result[i].authlvlno
			};
			COMBOBOX.CHAULRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHAULRL);
		COMBOBOX.CHAULRL.INITIALCOMBOBOX = null;
	};

	//
	// CHLOCBL
	//
	COMBOBOX.CHLOCBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLOCBL.LOADED = false;

	COMBOBOX.CHLOCBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLOCBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLOCBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLOCBL.INITIALController = controller;
			COMBOBOX.CHLOCBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLOCBLService",
					COMBOBOX, "CHLOCBLServiceCallback");
		}
		return COMBOBOX.CHLOCBL;
	};

	COMBOBOX.CHLOCBLServiceCallback = function(data) {
		COMBOBOX.CHLOCBL.LOADED = true;
		COMBOBOX.CHLOCBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].locid,
				id : data.result[i].locid
			};
			COMBOBOX.CHLOCBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLOCBL);
		COMBOBOX.CHLOCBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / name / loctype / loclevel / countrycd / status /
	// lastupdatedby / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / search_loc

	//
	// CH5HABL
	//
	COMBOBOX.CH5HABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5HABL.LOADED = false;

	COMBOBOX.CH5HABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5HABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5HABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5HABL.INITIALController = controller;
			COMBOBOX.CH5HABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5HABLService",
					COMBOBOX, "CH5HABLServiceCallback");
		}
		return COMBOBOX.CH5HABL;
	};

	COMBOBOX.CH5HABLServiceCallback = function(data) {
		COMBOBOX.CH5HABL.LOADED = true;
		COMBOBOX.CH5HABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].wbtno,
				id : data.result[i].wbtno
			};
			COMBOBOX.CH5HABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5HABL);
		COMBOBOX.CH5HABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / extwbtno / storelocid / dlvdte / dlvtime /
	// wbtstate / exceptiontp / description / wbtfixno / vehregno / haulier /
	// qtyinmt / cust / status / wbtnolinked / pursalind / arrivaldte /
	// arrivaltime / collqty / delqty / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHRFXRL
	//
	COMBOBOX.CHRFXRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRFXRL.LOADED = false;

	COMBOBOX.CHRFXRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRFXRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRFXRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRFXRL.INITIALController = controller;
			COMBOBOX.CHRFXRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRFXRLService",
					COMBOBOX, "CHRFXRLServiceCallback");
		}
		return COMBOBOX.CHRFXRL;
	};

	COMBOBOX.CHRFXRLServiceCallback = function(data) {
		COMBOBOX.CHRFXRL.LOADED = true;
		COMBOBOX.CHRFXRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relidfx,
				id : data.result[i].relidfx
			};
			COMBOBOX.CHRFXRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRFXRL);
		COMBOBOX.CHRFXRL.INITIALCOMBOBOX = null;
	};

	//
	// CH55FUL
	//
	COMBOBOX.CH55FUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH55FUL.LOADED = false;

	COMBOBOX.CH55FUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH55FULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH55FUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH55FUL.INITIALController = controller;
			COMBOBOX.CH55FUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH55FULService",
					COMBOBOX, "CH55FULServiceCallback");
		}
		return COMBOBOX.CH55FUL;
	};

	COMBOBOX.CH55FULServiceCallback = function(data) {
		COMBOBOX.CH55FUL.LOADED = true;
		COMBOBOX.CH55FUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH55FUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH55FUL);
		COMBOBOX.CH55FUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / prodfamid / prodtypeid /
	// prodstypid / origin / termsofdel / locid / descriptionspec / pursalind /
	// parctp / bsrelid / qtyinmt / curcd / price / trdunitidpric / ctrtp /
	// brokerrelid / docno / ctrno / subctrno / ctrnobs_cdt / extparcelno /
	// qtydischarged / trdunitqtydisc / statusppa / docseqnobldo / postp /
	// posseqno / originateind / pardte / weightcldlvind_par / cnversionno /
	// statuspar / transportno / storageid / destinatstartdte / lociddest /
	// locidloading / storagetp / momentofdlvind / qtyinkg_dpr / quantity_dpr /
	// trdunitidqty_dpr / weightcldlvind_chd / selloncbv / lastupdate /
	// searchgroup / ppatp / orderind / lastupdateconcurrencycolumn

	//
	// CH15PBL
	//
	COMBOBOX.CH15PBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH15PBL.LOADED = false;

	COMBOBOX.CH15PBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH15PBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH15PBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH15PBL.INITIALController = controller;
			COMBOBOX.CH15PBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH15PBLService",
					COMBOBOX, "CH15PBLServiceCallback");
		}
		return COMBOBOX.CH15PBL;
	};

	COMBOBOX.CH15PBLServiceCallback = function(data) {
		COMBOBOX.CH15PBL.LOADED = true;
		COMBOBOX.CH15PBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].curcd,
				id : data.result[i].curcd
			};
			COMBOBOX.CH15PBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH15PBL);
		COMBOBOX.CH15PBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / year / month / amntfliab / amntfright / amntgpos /
	// amntrequiredliq / amntcover / amntdistrovermth / amntrequest / //
	// lastupdateconcurrencycolumn

	//
	// CHEFSBL
	//
	COMBOBOX.CHEFSBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHEFSBL.LOADED = false;

	COMBOBOX.CHEFSBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHEFSBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHEFSBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHEFSBL.INITIALController = controller;
			COMBOBOX.CHEFSBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHEFSBLService",
					COMBOBOX, "CHEFSBLServiceCallback");
		}
		return COMBOBOX.CHEFSBL;
	};

	COMBOBOX.CHEFSBLServiceCallback = function(data) {
		COMBOBOX.CHEFSBL.LOADED = true;
		COMBOBOX.CHEFSBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CHEFSBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHEFSBL);
		COMBOBOX.CHEFSBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / planningno / ppaseqno / fixstate / reason
	// / lastupdateconcurrencycolumn

	//
	// CH11CUL
	//
	COMBOBOX.CH11CUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH11CUL.LOADED = false;

	COMBOBOX.CH11CUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH11CULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH11CUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH11CUL.INITIALController = controller;
			COMBOBOX.CH11CUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH11CULService",
					COMBOBOX, "CH11CULServiceCallback");
		}
		return COMBOBOX.CH11CUL;
	};

	COMBOBOX.CH11CULServiceCallback = function(data) {
		COMBOBOX.CH11CUL.LOADED = true;
		COMBOBOX.CH11CUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH11CUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH11CUL);
		COMBOBOX.CH11CUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / termsofdel /
	// locid / valuationprice / basepricval / spreadval / costval / basepricbas
	// / spreadbas / costbas / prodfamidbase / prodtypeidbase / prodstypidbase /
	// originbase / termsofdelbase / locidbase / priority / posscnversionno /
	// reverseind / status / startdte / duedate / posyear / posmth

	//
	// CH5JDBL
	//
	COMBOBOX.CH5JDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5JDBL.LOADED = false;

	COMBOBOX.CH5JDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5JDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5JDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5JDBL.INITIALController = controller;
			COMBOBOX.CH5JDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5JDBLService",
					COMBOBOX, "CH5JDBLServiceCallback");
		}
		return COMBOBOX.CH5JDBL;
	};

	COMBOBOX.CH5JDBLServiceCallback = function(data) {
		COMBOBOX.CH5JDBL.LOADED = true;
		COMBOBOX.CH5JDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parcno,
				id : data.result[i].parcno
			};
			COMBOBOX.CH5JDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5JDBL);
		COMBOBOX.CH5JDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ctrdte / perstartdte / perenddte / ctrno /
	// subctrno / descriptionspec / prodfamid / prodtypeid / prodstypid / origin
	// / termsofdel / locid / bsrelid / bal / trdunitidqty / curcd / price /
	// trdunitidpric / orderid / ctrnobs / ctrnobroker / parbal

	//
	// CHBFDBL
	//
	COMBOBOX.CHBFDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHBFDBL.LOADED = false;

	COMBOBOX.CHBFDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHBFDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHBFDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHBFDBL.INITIALController = controller;
			COMBOBOX.CHBFDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHBFDBLService",
					COMBOBOX, "CHBFDBLServiceCallback");
		}
		return COMBOBOX.CHBFDBL;
	};

	COMBOBOX.CHBFDBLServiceCallback = function(data) {
		COMBOBOX.CHBFDBL.LOADED = true;
		COMBOBOX.CHBFDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].budgetid,
				id : data.result[i].budgetid
			};
			COMBOBOX.CHBFDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHBFDBL);
		COMBOBOX.CHBFDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / month / periodid / budgettonnage / forecast /
	// actual / future / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH91PBL
	//
	COMBOBOX.CH91PBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH91PBL.LOADED = false;

	COMBOBOX.CH91PBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH91PBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH91PBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH91PBL.INITIALController = controller;
			COMBOBOX.CH91PBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH91PBLService",
					COMBOBOX, "CH91PBLServiceCallback");
		}
		return COMBOBOX.CH91PBL;
	};

	COMBOBOX.CH91PBLServiceCallback = function(data) {
		COMBOBOX.CH91PBL.LOADED = true;
		COMBOBOX.CH91PBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].curcd,
				id : data.result[i].curcd
			};
			COMBOBOX.CH91PBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH91PBL);
		COMBOBOX.CH91PBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / limitexceedind / priorityid / vamnt_pur /
	// vamnt_sal / reqatbankdte / requestbanktime

	//
	// CH81BBL
	//
	COMBOBOX.CH81BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH81BBL.LOADED = false;

	COMBOBOX.CH81BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH81BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH81BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH81BBL.INITIALController = controller;
			COMBOBOX.CH81BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH81BBLService",
					COMBOBOX, "CH81BBLServiceCallback");
		}
		return COMBOBOX.CH81BBL;
	};

	COMBOBOX.CH81BBLServiceCallback = function(data) {
		COMBOBOX.CH81BBL.LOADED = true;
		COMBOBOX.CH81BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].samplparcno,
				id : data.result[i].samplparcno
			};
			COMBOBOX.CH81BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH81BBL);
		COMBOBOX.CH81BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / sdlseqno / parcno / prodtypeid / ctrno / subctrno
	// / ctrdte / pursalind / bsrelid / docno_do / docno_bl / qtyinkg

	//
	// CH83EBL
	//
	COMBOBOX.CH83EBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH83EBL.LOADED = false;

	COMBOBOX.CH83EBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH83EBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH83EBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH83EBL.INITIALController = controller;
			COMBOBOX.CH83EBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH83EBLService",
					COMBOBOX, "CH83EBLServiceCallback");
		}
		return COMBOBOX.CH83EBL;
	};

	COMBOBOX.CH83EBLServiceCallback = function(data) {
		COMBOBOX.CH83EBL.LOADED = true;
		COMBOBOX.CH83EBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CH83EBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH83EBL);
		COMBOBOX.CH83EBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / name / gmpind / vgmptext / qualitycertid /
	// qualitycertcd / gmpenddte / sustainableind / sustainableenddte /
	// certificatesystem / certificatenumber / certificatecalcind / status /
	// lastupdatedby / lastupdate / enddaterequired /
	// lastupdateconcurrencycolumn

	//
	// CH74AUL
	//
	COMBOBOX.CH74AUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH74AUL.LOADED = false;

	COMBOBOX.CH74AUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH74AULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH74AUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH74AUL.INITIALController = controller;
			COMBOBOX.CH74AUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH74AULService",
					COMBOBOX, "CH74AULServiceCallback");
		}
		return COMBOBOX.CH74AUL;
	};

	COMBOBOX.CH74AULServiceCallback = function(data) {
		COMBOBOX.CH74AUL.LOADED = true;
		COMBOBOX.CH74AUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].fmsledgerid,
				id : data.result[i].fmsledgerid
			};
			COMBOBOX.CH74AUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH74AUL);
		COMBOBOX.CH74AUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / journalid / fmsregionid / bcurdebitamnt /
	// debitcredit / curcd / curdamnt / dqty / accdte / accdteto / prodfamid /
	// prodtypeid / prodstypid / origin / termsofdel / locid / postp / posseqno
	// / surpresszero

	//
	// CHRFXBL
	//
	COMBOBOX.CHRFXBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRFXBL.LOADED = false;

	COMBOBOX.CHRFXBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRFXBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRFXBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRFXBL.INITIALController = controller;
			COMBOBOX.CHRFXBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRFXBLService",
					COMBOBOX, "CHRFXBLServiceCallback");
		}
		return COMBOBOX.CHRFXBL;
	};

	COMBOBOX.CHRFXBLServiceCallback = function(data) {
		COMBOBOX.CHRFXBL.LOADED = true;
		COMBOBOX.CHRFXBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relidfx,
				id : data.result[i].relidfx
			};
			COMBOBOX.CHRFXBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRFXBL);
		COMBOBOX.CHRFXBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / relationtype / curcdbas / databasename /
	// confirmind / paymentind / lastcollectiondte / nextcollectiondte /
	// interval / intervaltype / owncompanyrelid / covcompanyrelid / status /
	// lastupdatedby / lastupdate / rel_id / mailingtpcnf /
	// lastupdateconcurrencycolumn

	//
	// CHAPDBL
	//
	COMBOBOX.CHAPDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHAPDBL.LOADED = false;

	COMBOBOX.CHAPDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHAPDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHAPDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHAPDBL.INITIALController = controller;
			COMBOBOX.CHAPDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHAPDBLService",
					COMBOBOX, "CHAPDBLServiceCallback");
		}
		return COMBOBOX.CHAPDBL;
	};

	COMBOBOX.CHAPDBLServiceCallback = function(data) {
		COMBOBOX.CHAPDBL.LOADED = true;
		COMBOBOX.CHAPDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].accyear,
				id : data.result[i].accyear
			};
			COMBOBOX.CHAPDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHAPDBL);
		COMBOBOX.CHAPDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / accper / startdte / enddte / operationtp / status
	// / lastupdatedby / lastupdate

	//
	// CH31CBL
	//
	COMBOBOX.CH31CBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31CBL.LOADED = false;

	COMBOBOX.CH31CBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31CBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31CBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31CBL.INITIALController = controller;
			COMBOBOX.CH31CBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31CBLService",
					COMBOBOX, "CH31CBLServiceCallback");
		}
		return COMBOBOX.CH31CBL;
	};

	COMBOBOX.CH31CBLServiceCallback = function(data) {
		COMBOBOX.CH31CBL.LOADED = true;
		COMBOBOX.CH31CBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH31CBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31CBL);
		COMBOBOX.CH31CBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / spotrtelia / frwdrtelia / curcd /
	// spotrtepos / frwdrtepos / curcdcov / price / vbasepriccur

	//
	// CH5BBUL
	//
	COMBOBOX.CH5BBUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5BBUL.LOADED = false;

	COMBOBOX.CH5BBUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5BBULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5BBUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5BBUL.INITIALController = controller;
			COMBOBOX.CH5BBUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5BBULService",
					COMBOBOX, "CH5BBULServiceCallback");
		}
		return COMBOBOX.CH5BBUL;
	};

	COMBOBOX.CH5BBULServiceCallback = function(data) {
		COMBOBOX.CH5BBUL.LOADED = true;
		COMBOBOX.CH5BBUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5BBUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5BBUL);
		COMBOBOX.CH5BBUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / pursalind / prodfamid /
	// transportno / loadingstartdte / departurestartdte / dischargeenddte /
	// dischargestartdte / destinatenddte / lociddest / locidloading /
	// supintrelid / mailingtpsuv / languageidsuv / destinatstartdte / parctp /
	// statusppa / docseqnobldo / invcopyindv / orderstatusv / originateind /
	// prodtypeid / prodstypid / origin / termsofdel / locid / postp / posseqno
	// / pardte / bsrelid / docno / qtyinmt / trdunitidqty / quantity / bal /
	// qtyinkg / balinkg / orderdte / provorderdte / ctrno / subctrno /
	// statuspar / momentofdlvind / notorderedcbv / provisionalcbv / finalcbv /
	// supintrelidloc / price / curcd / trdunitidpric / storageid / docidtp /
	// statussaleppav / ppatp / orderind / orderactionv /
	// lastupdateconcurrencycolumn

	//
	// CH195PL
	//
	COMBOBOX.CH195PL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH195PL.LOADED = false;

	COMBOBOX.CH195PL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH195PLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH195PL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH195PL.INITIALController = controller;
			COMBOBOX.CH195PL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH195PLService",
					COMBOBOX, "CH195PLServiceCallback");
		}
		return COMBOBOX.CH195PL;
	};

	COMBOBOX.CH195PLServiceCallback = function(data) {
		COMBOBOX.CH195PL.LOADED = true;
		COMBOBOX.CH195PL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CH195PL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH195PL);
		COMBOBOX.CH195PL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / actioncd / masterrelid / limit / freetext /
	// opensal / openpur / limitsal / limitpur / userid / gmpind / status /
	// useridexecution / routingcode / limitstartdate / salesturnovermt /
	// profitcurcd / profitamount / equitycurcd / equityamount / attentionind /
	// paymentarrearsind / lastupdate / lastupdatedby / figuresyear /
	// hedgingcategory / tradecategory / salesturnover / salesturnover /
	// businesstype / guarantyind / guarantyenddate / dunsno / ltp1seqno /
	// compsize / compsizedesc / ltp2seqno / finratng / finratngdesc / rec1seqno
	// / indclass1 / indsubclass1 / rec2seqno / indclass2 / indsubclass2 /
	// rec3seqno / indclass3 / indsubclass3 / lastupdateconcurrencycolumn

	//
	// CHOKLBL
	//
	COMBOBOX.CHOKLBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHOKLBL.LOADED = false;

	COMBOBOX.CHOKLBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHOKLBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHOKLBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHOKLBL.INITIALController = controller;
			COMBOBOX.CHOKLBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHOKLBLService",
					COMBOBOX, "CHOKLBLServiceCallback");
		}
		return COMBOBOX.CHOKLBL;
	};

	COMBOBOX.CHOKLBLServiceCallback = function(data) {
		COMBOBOX.CHOKLBL.LOADED = true;
		COMBOBOX.CHOKLBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].positionlistid,
				id : data.result[i].positionlistid
			};
			COMBOBOX.CHOKLBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHOKLBL);
		COMBOBOX.CHOKLBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / poslistcolumnno / header1 / header2 / header3 /
	// physicallist / physicalcolumn / pricedunpricdind / poslistcolno1 /
	// factor1 / poslistcolno2 / factor2 / poslistcolno3 / factor3 / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH5CBBL
	//
	COMBOBOX.CH5CBBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5CBBL.LOADED = false;

	COMBOBOX.CH5CBBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5CBBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5CBBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5CBBL.INITIALController = controller;
			COMBOBOX.CH5CBBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5CBBLService",
					COMBOBOX, "CH5CBBLServiceCallback");
		}
		return COMBOBOX.CH5CBBL;
	};

	COMBOBOX.CH5CBBLServiceCallback = function(data) {
		COMBOBOX.CH5CBBL.LOADED = true;
		COMBOBOX.CH5CBBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH5CBBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5CBBL);
		COMBOBOX.CH5CBBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / ultimateapprdte / perenddte / prodfamid
	// / prodtypeid / prodstypid / termsofdel / origin / locid / descriptionspec
	// / ctrnobs / ctrnobroker / pursalind / bsrelid / mailingtpappr /
	// languageid / quantity / trdunitidqty / noofdaysext / extensionadvdte /
	// origultmtapprdte / brokerrelid / cdtlastupdatedby / vseqnod03 / ctrdte /
	// perstartdte / tolerance / parlastupdatedby / lastupdateconcurrencycolumn
	// / lastupdateconcurrencycolumn2

	//
	// CHMONBL
	//
	COMBOBOX.CHMONBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHMONBL.LOADED = false;

	COMBOBOX.CHMONBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHMONBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHMONBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHMONBL.INITIALController = controller;
			COMBOBOX.CHMONBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHMONBLService",
					COMBOBOX, "CHMONBLServiceCallback");
		}
		return COMBOBOX.CHMONBL;
	};

	COMBOBOX.CHMONBLServiceCallback = function(data) {
		COMBOBOX.CHMONBL.LOADED = true;
		COMBOBOX.CHMONBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHMONBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHMONBL);
		COMBOBOX.CHMONBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / mthno / descrlong / descrshort / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHLTCBL
	//
	COMBOBOX.CHLTCBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLTCBL.LOADED = false;

	COMBOBOX.CHLTCBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLTCBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLTCBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLTCBL.INITIALController = controller;
			COMBOBOX.CHLTCBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLTCBLService",
					COMBOBOX, "CHLTCBLServiceCallback");
		}
		return COMBOBOX.CHLTCBL;
	};

	COMBOBOX.CHLTCBLServiceCallback = function(data) {
		COMBOBOX.CHLTCBL.LOADED = true;
		COMBOBOX.CHLTCBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].tradecategory,
				id : data.result[i].tradecategory
			};
			COMBOBOX.CHLTCBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLTCBL);
		COMBOBOX.CHLTCBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / trademonth / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CH52BUL
	//
	COMBOBOX.CH52BUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH52BUL.LOADED = false;

	COMBOBOX.CH52BUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH52BULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH52BUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH52BUL.INITIALController = controller;
			COMBOBOX.CH52BUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH52BULService",
					COMBOBOX, "CH52BULServiceCallback");
		}
		return COMBOBOX.CH52BUL;
	};

	COMBOBOX.CH52BULServiceCallback = function(data) {
		COMBOBOX.CH52BUL.LOADED = true;
		COMBOBOX.CH52BUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH52BUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH52BUL);
		COMBOBOX.CH52BUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / ppaseqno / ppasubno / parctp / ctrno /
	// subctrno / ctrdte / prodfamid / prodtypeid / prodstypid / origin /
	// termsofdel / locid / descriptionspec / qtyinmt / postp / p_free_text_500
	// / pursalind / bsrelid / pardte / brorelindsend / mailing_tp_bs /
	// language_id / status / bal / trdunitidqty / planningtp / nachfristno /
	// curcd / price / trdunitidpric / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2

	//
	// CH54EUL
	//
	COMBOBOX.CH54EUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH54EUL.LOADED = false;

	COMBOBOX.CH54EUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH54EULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH54EUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH54EUL.INITIALController = controller;
			COMBOBOX.CH54EUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH54EULService",
					COMBOBOX, "CH54EULServiceCallback");
		}
		return COMBOBOX.CH54EUL;
	};

	COMBOBOX.CH54EULServiceCallback = function(data) {
		COMBOBOX.CH54EUL.LOADED = true;
		COMBOBOX.CH54EUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH54EUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH54EUL);
		COMBOBOX.CH54EUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / pursalind / parctp / prodfamid
	// / prodtypeid / prodstypid / origin / termsofdel / locid / storagetpv /
	// storageid / transportno / destinatstartdtev / loadingstartdtev /
	// lociddestv / locidloadingv / postp / posseqno / pardte / majorationdte /
	// qtyinmt / trdunitidqty / fulflmntindv / diffqtytobookv / supintrelid /
	// curcd / diffctrprreext / extensionpercv / price / trdunitidpric / vattp /
	// bldte / extensionctrind / bal / trdunt_balv / origultmtapprdtev /
	// stringno / seqno_stringv / name_stringv / locid_stringv / docseqno_dprv /
	// momentofdlvindv / planningtpv / delboindv / ppatp / orderind /
	// planningnoresav / ppaseqnoresav / ordernr / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / lastupdateconcurrencycolumn3 /
	// lastupdateconcurrencycolumn4 / lastupdateconcurrencycolumn5

	//
	// CHDTYRL
	//
	COMBOBOX.CHDTYRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHDTYRL.LOADED = false;

	COMBOBOX.CHDTYRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHDTYRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHDTYRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHDTYRL.INITIALController = controller;
			COMBOBOX.CHDTYRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHDTYRLService",
					COMBOBOX, "CHDTYRLServiceCallback");
		}
		return COMBOBOX.CHDTYRL;
	};

	COMBOBOX.CHDTYRLServiceCallback = function(data) {
		COMBOBOX.CHDTYRL.LOADED = true;
		COMBOBOX.CHDTYRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].docidtp,
				id : data.result[i].docidtp
			};
			COMBOBOX.CHDTYRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHDTYRL);
		COMBOBOX.CHDTYRL.INITIALCOMBOBOX = null;
	};

	//
	// CH41ABL
	//
	COMBOBOX.CH41ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH41ABL.LOADED = false;

	COMBOBOX.CH41ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH41ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH41ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH41ABL.INITIALController = controller;
			COMBOBOX.CH41ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH41ABLService",
					COMBOBOX, "CH41ABLServiceCallback");
		}
		return COMBOBOX.CH41ABL;
	};

	COMBOBOX.CH41ABLServiceCallback = function(data) {
		COMBOBOX.CH41ABL.LOADED = true;
		COMBOBOX.CH41ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH41ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH41ABL);
		COMBOBOX.CH41ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / planningtp / planningyear / planningmth /
	// qtyvesselinmt / description / notebook / transportno / storageidgpl /
	// status / lastupdatedby / finalind / prodtypeid / prodstypid / lciind /
	// destinatstartdte / storageidtra / lociddest / vsaldoplnpur / vsaldoplnsal
	// / vsaldoapppur / vsaldoappsal / vsaldodelpur / vsaldodelsal /
	// vsaldototpur / vsaldototsal / vcompletedind / vregion / planningno /
	// vsaldoapppurfix / vsaldoappsalfix / lastupdateconcurrencycolumn / origin
	// / dfthaulrelid / extdescription

	//
	// CH31SBL
	//
	COMBOBOX.CH31SBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31SBL.LOADED = false;

	COMBOBOX.CH31SBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31SBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31SBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31SBL.INITIALController = controller;
			COMBOBOX.CH31SBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31SBLService",
					COMBOBOX, "CH31SBLServiceCallback");
		}
		return COMBOBOX.CH31SBL;
	};

	COMBOBOX.CH31SBLServiceCallback = function(data) {
		COMBOBOX.CH31SBL.LOADED = true;
		COMBOBOX.CH31SBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH31SBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31SBL);
		COMBOBOX.CH31SBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / sortno / trmsofsalid / description /
	// standardsaltmind / status / languageid / tolerance / printonctr /
	// printoninv / lastupdateconcurrencycolumn

	//
	// CHCRTBL
	//
	COMBOBOX.CHCRTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCRTBL.LOADED = false;

	COMBOBOX.CHCRTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCRTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCRTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCRTBL.INITIALController = controller;
			COMBOBOX.CHCRTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCRTBLService",
					COMBOBOX, "CHCRTBLServiceCallback");
		}
		return COMBOBOX.CHCRTBL;
	};

	COMBOBOX.CHCRTBLServiceCallback = function(data) {
		COMBOBOX.CHCRTBL.LOADED = true;
		COMBOBOX.CHCRTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CHCRTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCRTBL);
		COMBOBOX.CHCRTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / costrteid / startdte / description / costrtetp /
	// calculationqty / percentage / price / curcd / trdunitid / status

	//
	// CHGMPBL
	//
	COMBOBOX.CHGMPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHGMPBL.LOADED = false;

	COMBOBOX.CHGMPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHGMPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHGMPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHGMPBL.INITIALController = controller;
			COMBOBOX.CHGMPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHGMPBLService",
					COMBOBOX, "CHGMPBLServiceCallback");
		}
		return COMBOBOX.CHGMPBL;
	};

	COMBOBOX.CHGMPBLServiceCallback = function(data) {
		COMBOBOX.CHGMPBL.LOADED = true;
		COMBOBOX.CHGMPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHGMPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHGMPBL);
		COMBOBOX.CHGMPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / gmpcode / status / prodtypeid / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHCCVRL
	//
	COMBOBOX.CHCCVRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCCVRL.LOADED = false;

	COMBOBOX.CHCCVRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCCVRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCCVRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCCVRL.INITIALController = controller;
			COMBOBOX.CHCCVRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCCVRLService",
					COMBOBOX, "CHCCVRLServiceCallback");
		}
		return COMBOBOX.CHCCVRL;
	};

	COMBOBOX.CHCCVRLServiceCallback = function(data) {
		COMBOBOX.CHCCVRL.LOADED = true;
		COMBOBOX.CHCCVRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].curcd,
				id : data.result[i].curcd
			};
			COMBOBOX.CHCCVRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCCVRL);
		COMBOBOX.CHCCVRL.INITIALCOMBOBOX = null;
	};

	//
	// CH59BBL
	//
	COMBOBOX.CH59BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH59BBL.LOADED = false;

	COMBOBOX.CH59BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH59BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH59BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH59BBL.INITIALController = controller;
			COMBOBOX.CH59BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH59BBLService",
					COMBOBOX, "CH59BBLServiceCallback");
		}
		return COMBOBOX.CH59BBL;
	};

	COMBOBOX.CH59BBLServiceCallback = function(data) {
		COMBOBOX.CH59BBL.LOADED = true;
		COMBOBOX.CH59BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].sortno,
				id : data.result[i].sortno
			};
			COMBOBOX.CH59BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH59BBL);
		COMBOBOX.CH59BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / cnversionno / seqno / costgrpid / relid /
	// rgtliaind / costrtetp / actualvalue / curcd / trdunitidpric / amnt /
	// quantity / valuecostest / costestamnt / costestqty / totamnt /
	// costesttotamnt / liabilityno / posscnversionno / costrteid /
	// invoicabledte / mutationtp / registrstatus / status / lastupdatedby /
	// lastupdate / estcostngsepind / lastupdateconcurrencycolumn

	//
	// CH82ABL
	//
	COMBOBOX.CH82ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH82ABL.LOADED = false;

	COMBOBOX.CH82ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH82ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH82ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH82ABL.INITIALController = controller;
			COMBOBOX.CH82ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH82ABLService",
					COMBOBOX, "CH82ABLServiceCallback");
		}
		return COMBOBOX.CH82ABL;
	};

	COMBOBOX.CH82ABLServiceCallback = function(data) {
		COMBOBOX.CH82ABL.LOADED = true;
		COMBOBOX.CH82ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].sdlseqno,
				id : data.result[i].sdlseqno
			};
			COMBOBOX.CH82ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH82ABL);
		COMBOBOX.CH82ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / claimseqno / claimstatus / pardte / prodfamid /
	// prodtypeid / prodstypid / origin / postp / posseqno / termsofdel / locid
	// / descriptionspec / relid / docno / holdno / devpercentage / anacurcd /
	// onchrgnganacost / vamountcurcd / amnt / qtyinkg / vqtyinmt / ctrno /
	// subctrno / contractcurcd / contractprice / trdunitidpric / parcno /
	// samplparcno / transportno / storageid / destinatstartdte / lociddest /
	// transport / settlepercentage / vpricecurcd / price / exchrteana /
	// exchrtectr / status / vstatusprovisionalind / vstatuswrittenoffind /
	// vstatusfinalind / vpricecorrection / vpricecorrectioncurcd / pursalind /
	// vaction_cd / sdllastupdate / storagetp / cqdtransportno / chdctrtp /
	// lastupdateconcurrencycolumn

	//
	// CHCGDBL
	//
	COMBOBOX.CHCGDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCGDBL.LOADED = false;

	COMBOBOX.CHCGDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCGDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCGDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCGDBL.INITIALController = controller;
			COMBOBOX.CHCGDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCGDBLService",
					COMBOBOX, "CHCGDBLServiceCallback");
		}
		return COMBOBOX.CHCGDBL;
	};

	COMBOBOX.CHCGDBLServiceCallback = function(data) {
		COMBOBOX.CHCGDBL.LOADED = true;
		COMBOBOX.CHCGDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CHCGDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCGDBL);
		COMBOBOX.CHCGDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / languageid / description / status / lastupdatedby
	// / lastupdate / lastupdateconcurrencycolumn

	//
	// CHDTYBL
	//
	COMBOBOX.CHDTYBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHDTYBL.LOADED = false;

	COMBOBOX.CHDTYBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHDTYBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHDTYBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHDTYBL.INITIALController = controller;
			COMBOBOX.CHDTYBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHDTYBLService",
					COMBOBOX, "CHDTYBLServiceCallback");
		}
		return COMBOBOX.CHDTYBL;
	};

	COMBOBOX.CHDTYBLServiceCallback = function(data) {
		COMBOBOX.CHDTYBL.LOADED = true;
		COMBOBOX.CHDTYBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].docidtp,
				id : data.result[i].docidtp
			};
			COMBOBOX.CHDTYBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHDTYBL);
		COMBOBOX.CHDTYBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / doctp / advicetp / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHEFRRL
	//
	COMBOBOX.CHEFRRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHEFRRL.LOADED = false;

	COMBOBOX.CHEFRRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHEFRRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHEFRRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHEFRRL.INITIALController = controller;
			COMBOBOX.CHEFRRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHEFRRLService",
					COMBOBOX, "CHEFRRLServiceCallback");
		}
		return COMBOBOX.CHEFRRL;
	};

	COMBOBOX.CHEFRRLServiceCallback = function(data) {
		COMBOBOX.CHEFRRL.LOADED = true;
		COMBOBOX.CHEFRRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CHEFRRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHEFRRL);
		COMBOBOX.CHEFRRL.INITIALCOMBOBOX = null;
	};

	//
	// CHIHDBL
	//
	COMBOBOX.CHIHDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHIHDBL.LOADED = false;

	COMBOBOX.CHIHDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHIHDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHIHDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHIHDBL.INITIALController = controller;
			COMBOBOX.CHIHDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHIHDBLService",
					COMBOBOX, "CHIHDBLServiceCallback");
		}
		return COMBOBOX.CHIHDBL;
	};

	COMBOBOX.CHIHDBLServiceCallback = function(data) {
		COMBOBOX.CHIHDBL.LOADED = true;
		COMBOBOX.CHIHDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].invoiceno,
				id : data.result[i].invoiceno
			};
			COMBOBOX.CHIHDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHIHDBL);
		COMBOBOX.CHIHDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / mailingtpinvoice / invoicelayout /
	// bankaccntowncomp / totamntexclvat / addtextinvoice / curcd /
	// invoicabledte / prodfamid / relid / languageid / duedate / currte /
	// countrycdours / countrycdothpty / status / lastupdate / lastupdatedby /
	// invpaidind / vpresdocselected / lastupdateconcurrencycolumn

	//
	// CH11SBL
	//
	COMBOBOX.CH11SBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH11SBL.LOADED = false;

	COMBOBOX.CH11SBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH11SBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH11SBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH11SBL.INITIALController = controller;
			COMBOBOX.CH11SBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH11SBLService",
					COMBOBOX, "CH11SBLServiceCallback");
		}
		return COMBOBOX.CH11SBL;
	};

	COMBOBOX.CH11SBLServiceCallback = function(data) {
		COMBOBOX.CH11SBL.LOADED = true;
		COMBOBOX.CH11SBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH11SBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH11SBL);
		COMBOBOX.CH11SBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / termsofdel /
	// locid / prodfamidbase / prodtypeidbase / prodstypidbase / originbase /
	// termsofdelbase / locidbase / priority / cnversioncostind / reverseind /
	// posscnversionno / status / search_pdv

	//
	// CH5DBBL
	//
	COMBOBOX.CH5DBBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5DBBL.LOADED = false;

	COMBOBOX.CH5DBBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5DBBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5DBBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5DBBL.INITIALController = controller;
			COMBOBOX.CH5DBBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5DBBLService",
					COMBOBOX, "CH5DBBLServiceCallback");
		}
		return COMBOBOX.CH5DBBL;
	};

	COMBOBOX.CH5DBBLServiceCallback = function(data) {
		COMBOBOX.CH5DBBL.LOADED = true;
		COMBOBOX.CH5DBBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5DBBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5DBBL);
		COMBOBOX.CH5DBBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / actioncode / funcind / lastupdatedby /
	// lastupdate / p_char26 / lastupdateconcurrencycolumn

	//
	// CH21ABL
	//
	COMBOBOX.CH21ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH21ABL.LOADED = false;

	COMBOBOX.CH21ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH21ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH21ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH21ABL.INITIALController = controller;
			COMBOBOX.CH21ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH21ABLService",
					COMBOBOX, "CH21ABLServiceCallback");
		}
		return COMBOBOX.CH21ABL;
	};

	COMBOBOX.CH21ABLServiceCallback = function(data) {
		COMBOBOX.CH21ABL.LOADED = true;
		COMBOBOX.CH21ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH21ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH21ABL);
		COMBOBOX.CH21ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / prodstypid / origin / termsofdel /
	// locid / descriptionspec / openind / balance / balpurctr / balsalctr /
	// balpurcnv / balsalcnv / balpurctrprem / balsalctrprem / techstockbal /
	// dlvpurctrqty / dlvsalctrqty / dlvsalcnvqty / dlvpurcnvqty / postp /
	// specification / posseqno / posmth / posyear / search_group /
	// lastupdateconcurrencycolumn / open / region / storageid / storagetp /
	// techstock / transportno / unpriced / gpldescription

	//
	// CHPETRL
	//
	COMBOBOX.CHPETRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPETRL.LOADED = false;

	COMBOBOX.CHPETRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPETRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPETRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPETRL.INITIALController = controller;
			COMBOBOX.CHPETRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPETRLService",
					COMBOBOX, "CHPETRLServiceCallback");
		}
		return COMBOBOX.CHPETRL;
	};

	COMBOBOX.CHPETRLServiceCallback = function(data) {
		COMBOBOX.CHPETRL.LOADED = true;
		COMBOBOX.CHPETRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].pertpid,
				id : data.result[i].pertpid
			};
			COMBOBOX.CHPETRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPETRL);
		COMBOBOX.CHPETRL.INITIALCOMBOBOX = null;
	};

	//
	// CH3ABBL
	//
	COMBOBOX.CH3ABBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3ABBL.LOADED = false;

	COMBOBOX.CH3ABBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3ABBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3ABBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3ABBL.INITIALController = controller;
			COMBOBOX.CH3ABBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3ABBLService",
					COMBOBOX, "CH3ABBLServiceCallback");
		}
		return COMBOBOX.CH3ABBL;
	};

	COMBOBOX.CH3ABBLServiceCallback = function(data) {
		COMBOBOX.CH3ABBL.LOADED = true;
		COMBOBOX.CH3ABBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH3ABBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3ABBL);
		COMBOBOX.CH3ABBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / origin / vyear / vmonth / vframeqty / vfixedqty /
	// vtofixqty / vctrbalance / vnetto / vargsanlotot / vargsanlorel /
	// vargsanlopaper / vargvicentot / vargvicenrel / vargvicenpaper /
	// vargotherloc

	//
	// CHOCTBL
	//
	COMBOBOX.CHOCTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHOCTBL.LOADED = false;

	COMBOBOX.CHOCTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHOCTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHOCTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHOCTBL.INITIALController = controller;
			COMBOBOX.CHOCTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHOCTBLService",
					COMBOBOX, "CHOCTBLServiceCallback");
		}
		return COMBOBOX.CHOCTBL;
	};

	COMBOBOX.CHOCTBLServiceCallback = function(data) {
		COMBOBOX.CHOCTBL.LOADED = true;
		COMBOBOX.CHOCTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].positionlistid,
				id : data.result[i].positionlistid
			};
			COMBOBOX.CHOCTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHOCTBL);
		COMBOBOX.CHOCTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / poslistcolumnno / prodfamid / prodtypeid /
	// prodstypid / origin / termsofdel / locid / status / lastupdatedby /
	// lastupdate / childlocsincluded / lastupdateconcurrencycolumn

	//
	// CHPEDBL
	//
	COMBOBOX.CHPEDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPEDBL.LOADED = false;

	COMBOBOX.CHPEDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPEDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPEDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPEDBL.INITIALController = controller;
			COMBOBOX.CHPEDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPEDBLService",
					COMBOBOX, "CHPEDBLServiceCallback");
		}
		return COMBOBOX.CHPEDBL;
	};

	COMBOBOX.CHPEDBLServiceCallback = function(data) {
		COMBOBOX.CHPEDBL.LOADED = true;
		COMBOBOX.CHPEDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHPEDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPEDBL);
		COMBOBOX.CHPEDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / pertpid / description / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH55EUL
	//
	COMBOBOX.CH55EUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH55EUL.LOADED = false;

	COMBOBOX.CH55EUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH55EULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH55EUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH55EUL.INITIALController = controller;
			COMBOBOX.CH55EUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH55EULService",
					COMBOBOX, "CH55EULServiceCallback");
		}
		return COMBOBOX.CH55EUL;
	};

	COMBOBOX.CH55EULServiceCallback = function(data) {
		COMBOBOX.CH55EUL.LOADED = true;
		COMBOBOX.CH55EUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH55EUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH55EUL);
		COMBOBOX.CH55EUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / pursalind / qtyinmtppa /
	// qtydischarged / statusppa / docseqnobldo / trdunitqtydisc / prodfamid /
	// totalqtydischv / transportno / loadingstartdte / departurestartdte /
	// destinatstartdte / locidloading / dischargeenddte / lociddest /
	// termsofdelfromv / termsofdeltov / dischqtyinmtv / prodtypeid / prodstypid
	// / origin / qtyinmtparv / weightcldlvind / cnversionno / docno / vattp /
	// termsofdel / locid / bsrelid / parctp / postp / posseqno / qtyinkg /
	// balinkg / bal / ctrno / subctrno / statuspar / momentofdlvind / storageid
	// / dischargecbv / momofdlvcbv / ctrtp / fullypricedind / supintrelid /
	// requestsplitind / ppatp / orderind / originateind /
	// lastupdateconcurrencycolumn

	//
	// CH5JKBL
	//
	COMBOBOX.CH5JKBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5JKBL.LOADED = false;

	COMBOBOX.CH5JKBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5JKBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5JKBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5JKBL.INITIALController = controller;
			COMBOBOX.CH5JKBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5JKBLService",
					COMBOBOX, "CH5JKBLServiceCallback");
		}
		return COMBOBOX.CH5JKBL;
	};

	COMBOBOX.CH5JKBLServiceCallback = function(data) {
		COMBOBOX.CH5JKBL.LOADED = true;
		COMBOBOX.CH5JKBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].orderid,
				id : data.result[i].orderid
			};
			COMBOBOX.CH5JKBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5JKBL);
		COMBOBOX.CH5JKBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / orderline / quantity / trdunitid / loadingnr /
	// loadingdate / dischargenr / dischargedate / dischargetime / comments /
	// sellerqty / buyerclosedind / sellerclosedind / status / transportno /
	// parcnobuyer / parcnoseller / vehregno / lastupdatedby / lastupdate /
	// c-lastupdate / lastupdateconcurrencycolumn

	//
	// CH5JCBL
	//
	COMBOBOX.CH5JCBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5JCBL.LOADED = false;

	COMBOBOX.CH5JCBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5JCBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5JCBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5JCBL.INITIALController = controller;
			COMBOBOX.CH5JCBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5JCBLService",
					COMBOBOX, "CH5JCBLServiceCallback");
		}
		return COMBOBOX.CH5JCBL;
	};

	COMBOBOX.CH5JCBLServiceCallback = function(data) {
		COMBOBOX.CH5JCBL.LOADED = true;
		COMBOBOX.CH5JCBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].orderid,
				id : data.result[i].orderid
			};
			COMBOBOX.CH5JCBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5JCBL);
		COMBOBOX.CH5JCBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ordertp / orderline / prodfamid / prodtypeid /
	// prodstypid / prodspec / sellerrelid / buyerrelid / agentrelid /
	// transprelid / productonstore / storageid / quantity / trdunitid /
	// sellerqty / loadingnr / dischargenr / loadingdate / dischargedate /
	// buyerclosedind / sellerclosedind / loadingaddressid / loadingname /
	// loadingplace / dischargeaddressid / dischargename / dischargeplace /
	// sellerdoctpsend / buyerdoctpsend / agentdoctpsend / transpdoctpsend /
	// loadingdoctpsend / p_yes_no_sellerdoctpsend / p_yes_no_buyerdoctpsend /
	// p_yes_no_agentdoctpsend / p_yes_no_transpdoctpsend /
	// p_yes_no_loadingdoctpsend / transpcurcd / transprate / transptrdunitid /
	// lastupdate

	//
	// CHLOHBL
	//
	COMBOBOX.CHLOHBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLOHBL.LOADED = false;

	COMBOBOX.CHLOHBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLOHBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLOHBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLOHBL.INITIALController = controller;
			COMBOBOX.CHLOHBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLOHBLService",
					COMBOBOX, "CHLOHBLServiceCallback");
		}
		return COMBOBOX.CHLOHBL;
	};

	COMBOBOX.CHLOHBLServiceCallback = function(data) {
		COMBOBOX.CHLOHBL.LOADED = true;
		COMBOBOX.CHLOHBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].locid,
				id : data.result[i].locid
			};
			COMBOBOX.CHLOHBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLOHBL);
		COMBOBOX.CHLOHBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / locname / supintrelid / relname / phonenumber /
	// faxno / contactperson / countrycd / addressline / prefixedline / zipcd /
	// place / region / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHEFRBL
	//
	COMBOBOX.CHEFRBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHEFRBL.LOADED = false;

	COMBOBOX.CHEFRBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHEFRBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHEFRBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHEFRBL.INITIALController = controller;
			COMBOBOX.CHEFRBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHEFRBLService",
					COMBOBOX, "CHEFRBLServiceCallback");
		}
		return COMBOBOX.CHEFRBL;
	};

	COMBOBOX.CHEFRBLServiceCallback = function(data) {
		COMBOBOX.CHEFRBL.LOADED = true;
		COMBOBOX.CHEFRBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CHEFRBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHEFRBL);
		COMBOBOX.CHEFRBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / planningno / ppaseqno / ctrno / subctrno
	// / fpano / combfixparcno / combplanningno / combppaseqno / combctrno /
	// combsubctrno / remark / reqdeldte / reqdeldtefrom / reqdeldteto / custref
	// / qtyinmt / timestampreq / timestampfix / reqrelid / requser / fixstate /
	// namerejecter / reason / status / lastupdatedby / lastupdate / reasonint /
	// fixno / vcombined / p_free_text_100 / provfixno / prodfamid / prodtypeid
	// / prodstypid / termsofdel / locid / routingcode /
	// lastupdateconcurrencycolumn

	//
	// CH32TBL
	//
	COMBOBOX.CH32TBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH32TBL.LOADED = false;

	COMBOBOX.CH32TBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH32TBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH32TBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH32TBL.INITIALController = controller;
			COMBOBOX.CH32TBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH32TBLService",
					COMBOBOX, "CH32TBLServiceCallback");
		}
		return COMBOBOX.CH32TBL;
	};

	COMBOBOX.CH32TBLServiceCallback = function(data) {
		COMBOBOX.CH32TBL.LOADED = true;
		COMBOBOX.CH32TBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH32TBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH32TBL);
		COMBOBOX.CH32TBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / actioncd / quantity / minqty / maxqty /
	// price / premium / ctrnobs / ctrnobroker / perstartdte / perenddte /
	// reccnfselbydte / reccnfbrokerdte / pricpremctrind / ultimateapprdte /
	// origultmtapprdte / extensionadvdte / pricperiodenddte / fullypricedind /
	// spotrtelia / frwdrtelia / spotrtepos / frwdrtepos / ctrnopgt /
	// subctrnopgt / posseqno / qtytoprice / qtypgt / futexcmth / futexcyear /
	// curcdpriced / plannedqty / status / lastupdatedby / lastupdate

	//
	// CH37CBL
	//
	COMBOBOX.CH37CBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH37CBL.LOADED = false;

	COMBOBOX.CH37CBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH37CBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH37CBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH37CBL.INITIALController = controller;
			COMBOBOX.CH37CBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH37CBLService",
					COMBOBOX, "CH37CBLServiceCallback");
		}
		return COMBOBOX.CH37CBL;
	};

	COMBOBOX.CH37CBLServiceCallback = function(data) {
		COMBOBOX.CH37CBL.LOADED = true;
		COMBOBOX.CH37CBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CH37CBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH37CBL);
		COMBOBOX.CH37CBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / prodtypeid / prodstypid / area /
	// curcdbas / valbase / curcdspread / valspread / curcdship / valship /
	// curcddischg / valdischg / curcdstore / valstore / curcdcarry / valcarry /
	// status / lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH91MBL
	//
	COMBOBOX.CH91MBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH91MBL.LOADED = false;

	COMBOBOX.CH91MBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH91MBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH91MBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH91MBL.INITIALController = controller;
			COMBOBOX.CH91MBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH91MBLService",
					COMBOBOX, "CH91MBLServiceCallback");
		}
		return COMBOBOX.CH91MBL;
	};

	COMBOBOX.CH91MBLServiceCallback = function(data) {
		COMBOBOX.CH91MBL.LOADED = true;
		COMBOBOX.CH91MBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].coveringnocbk,
				id : data.result[i].coveringnocbk
			};
			COMBOBOX.CH91MBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH91MBL);
		COMBOBOX.CH91MBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / puchasesaleind / curamnt / spotrte / bcuramnt /
	// hghstcovnoind / assignrtedte / rteassigntime / reqatbankdte /
	// requestbanktime / userid / curcd / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHDQLBL
	//
	COMBOBOX.CHDQLBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHDQLBL.LOADED = false;

	COMBOBOX.CHDQLBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHDQLBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHDQLBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHDQLBL.INITIALController = controller;
			COMBOBOX.CHDQLBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHDQLBLService",
					COMBOBOX, "CHDQLBLServiceCallback");
		}
		return COMBOBOX.CHDQLBL;
	};

	COMBOBOX.CHDQLBLServiceCallback = function(data) {
		COMBOBOX.CHDQLBL.LOADED = true;
		COMBOBOX.CHDQLBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHDQLBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHDQLBL);
		COMBOBOX.CHDQLBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodtypeid / sortno / description / qualitytpid /
	// qltdescription / explication / qualitytrmstp / anaind / perc / slashperc
	// / execsettlmperc / status / lastupdatedby / lastupdate / percdevto1 /
	// multiplfactor1 / percdevto2 / multiplfactor2 / percdevto3 /
	// multiplfactor3 / percdevto4 / multiplfactor4 / percdevto5 /
	// multiplfactor5 / qualitytrmsprt / lastupdateconcurrencycolumn

	//
	// CH83BBL
	//
	COMBOBOX.CH83BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH83BBL.LOADED = false;

	COMBOBOX.CH83BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH83BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH83BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH83BBL.INITIALController = controller;
			COMBOBOX.CH83BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH83BBLService",
					COMBOBOX, "CH83BBLServiceCallback");
		}
		return COMBOBOX.CH83BBL;
	};

	COMBOBOX.CH83BBLServiceCallback = function(data) {
		COMBOBOX.CH83BBL.LOADED = true;
		COMBOBOX.CH83BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].sampleid,
				id : data.result[i].sampleid
			};
			COMBOBOX.CH83BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH83BBL);
		COMBOBOX.CH83BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / reportversion / parameterid / parametername /
	// resultn / resultt / detectionlimit / unit / accreditation / outsourced /
	// resulttype / casnumber / method / methoddescription / uncertainty /
	// status / lastupdatedby / lastupdate / vresultnfilled / parametergroupid /
	// lastupdateconcurrencycolumn

	//
	// CH54CBL
	//
	COMBOBOX.CH54CBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH54CBL.LOADED = false;

	COMBOBOX.CH54CBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH54CBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH54CBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH54CBL.INITIALController = controller;
			COMBOBOX.CH54CBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH54CBLService",
					COMBOBOX, "CH54CBLServiceCallback");
		}
		return COMBOBOX.CH54CBL;
	};

	COMBOBOX.CH54CBLServiceCallback = function(data) {
		COMBOBOX.CH54CBL.LOADED = true;
		COMBOBOX.CH54CBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].docseqno,
				id : data.result[i].docseqno
			};
			COMBOBOX.CH54CBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH54CBL);
		COMBOBOX.CH54CBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / recprovidetime / recprovidedte / docno / curcd /
	// amnt / explication / docidtp / shipperrelid / docseqnosplit / docseqnobl
	// / quantity / qtyinkg / requestsplitind / reqsplitdte / recsplitdte /
	// splittingcost / transportno / trdunitidqty / curcdsplit / prodfamid /
	// prodtypeid / prodstypid / origin / status / lastupdatedby / lastupdate /
	// parcno_dfpv / planningno_dfpv / ppaseqno_dfpv / parctpv /
	// lastupdateconcurrencycolumn

	//
	// CHUPRBL
	//
	COMBOBOX.CHUPRBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHUPRBL.LOADED = false;

	COMBOBOX.CHUPRBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHUPRBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHUPRBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHUPRBL.INITIALController = controller;
			COMBOBOX.CHUPRBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHUPRBLService",
					COMBOBOX, "CHUPRBLServiceCallback");
		}
		return COMBOBOX.CHUPRBL;
	};

	COMBOBOX.CHUPRBLServiceCallback = function(data) {
		COMBOBOX.CHUPRBL.LOADED = true;
		COMBOBOX.CHUPRBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].userid,
				id : data.result[i].userid
			};
			COMBOBOX.CHUPRBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHUPRBL);
		COMBOBOX.CHUPRBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / doctype / printerid / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CHTPDBL
	//
	COMBOBOX.CHTPDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTPDBL.LOADED = false;

	COMBOBOX.CHTPDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTPDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTPDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTPDBL.INITIALController = controller;
			COMBOBOX.CHTPDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTPDBLService",
					COMBOBOX, "CHTPDBLServiceCallback");
		}
		return COMBOBOX.CHTPDBL;
	};

	COMBOBOX.CHTPDBLServiceCallback = function(data) {
		COMBOBOX.CHTPDBL.LOADED = true;
		COMBOBOX.CHTPDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHTPDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTPDBL);
		COMBOBOX.CHTPDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / paymtrmsid / text / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH5CABL
	//
	COMBOBOX.CH5CABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5CABL.LOADED = false;

	COMBOBOX.CH5CABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5CABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5CABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5CABL.INITIALController = controller;
			COMBOBOX.CH5CABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5CABLService",
					COMBOBOX, "CH5CABLServiceCallback");
		}
		return COMBOBOX.CH5CABL;
	};

	COMBOBOX.CH5CABLServiceCallback = function(data) {
		COMBOBOX.CH5CABL.LOADED = true;
		COMBOBOX.CH5CABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH5CABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5CABL);
		COMBOBOX.CH5CABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / prodfamid / prodtypeid / prodstypid /
	// origin / termsofdel / locid / ctrdte / ctrnobs / pursalind / bsrelid /
	// quantity / trdunitidqty / extensionadvdte / curcd / price / trdunitidpric
	// / noofdaysext / origultmtapprdte / ultimateapprdte / vultimateapprdte /
	// postp / extensionind / posseqno / lastupdateconcurrencycolumn

	//
	// CHCTPBL
	//
	COMBOBOX.CHCTPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCTPBL.LOADED = false;

	COMBOBOX.CHCTPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCTPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCTPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCTPBL.INITIALController = controller;
			COMBOBOX.CHCTPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCTPBLService",
					COMBOBOX, "CHCTPBLServiceCallback");
		}
		return COMBOBOX.CHCTPBL;
	};

	COMBOBOX.CHCTPBLServiceCallback = function(data) {
		COMBOBOX.CHCTPBL.LOADED = true;
		COMBOBOX.CHCTPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].certtype,
				id : data.result[i].certtype
			};
			COMBOBOX.CHCTPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCTPBL);
		COMBOBOX.CHCTPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / status / lastupdatedby / lastupdate
	// / lastupdateconcurrencycolumn

	//
	// CHGMPRL
	//
	COMBOBOX.CHGMPRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHGMPRL.LOADED = false;

	COMBOBOX.CHGMPRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHGMPRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHGMPRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHGMPRL.INITIALController = controller;
			COMBOBOX.CHGMPRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHGMPRLService",
					COMBOBOX, "CHGMPRLServiceCallback");
		}
		return COMBOBOX.CHGMPRL;
	};

	COMBOBOX.CHGMPRLServiceCallback = function(data) {
		COMBOBOX.CHGMPRL.LOADED = true;
		COMBOBOX.CHGMPRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHGMPRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHGMPRL);
		COMBOBOX.CHGMPRL.INITIALCOMBOBOX = null;
	};

	//
	// CH76BBL
	//
	COMBOBOX.CH76BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH76BBL.LOADED = false;

	COMBOBOX.CH76BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH76BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH76BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH76BBL.INITIALController = controller;
			COMBOBOX.CH76BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH76BBLService",
					COMBOBOX, "CH76BBLServiceCallback");
		}
		return COMBOBOX.CH76BBL;
	};

	COMBOBOX.CH76BBLServiceCallback = function(data) {
		COMBOBOX.CH76BBL.LOADED = true;
		COMBOBOX.CH76BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CH76BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH76BBL);
		COMBOBOX.CH76BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / prodtypeid / prodstypid / origin /
	// termsofdel / locid / posyear / posmth / postp / posseqno /
	// descriptionspec / estamntinbcur / realamntinbcur

	//
	// CH52AUL
	//
	COMBOBOX.CH52AUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH52AUL.LOADED = false;

	COMBOBOX.CH52AUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH52AULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH52AUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH52AUL.INITIALController = controller;
			COMBOBOX.CH52AUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH52AULService",
					COMBOBOX, "CH52AULServiceCallback");
		}
		return COMBOBOX.CH52AUL;
	};

	COMBOBOX.CH52AULServiceCallback = function(data) {
		COMBOBOX.CH52AUL.LOADED = true;
		COMBOBOX.CH52AUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH52AUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH52AUL);
		COMBOBOX.CH52AUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / ppaseqno / ppasubno / origin / postp /
	// stringno / prodfamid / locidav / bsrelidav / mailing_tp_sup /
	// language_id_sup / releaseno / p_free_text_500 / prodtypeid / prodstypid /
	// locid / descriptionspec / termsofdel / pursalind / bsrelid / qtyinmt /
	// parctp / pardte / p_bro_rel_ind / mailing_tp_bs / language_id_bs /
	// mailing_tp_bro / language_id_bro / chartererrelid / mailing_tp_char /
	// language_id_char / seq_no_string / name_string / loc_id_string / status /
	// ctrdte / ctrno / subctrno / balinkg / planningtp / vppiordernr /
	// vppilastupdate / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2

	//
	// CHRAABL
	//
	COMBOBOX.CHRAABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHRAABL.LOADED = false;

	COMBOBOX.CHRAABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHRAABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHRAABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHRAABL.INITIALController = controller;
			COMBOBOX.CHRAABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHRAABLService",
					COMBOBOX, "CHRAABLServiceCallback");
		}
		return COMBOBOX.CHRAABL;
	};

	COMBOBOX.CHRAABLServiceCallback = function(data) {
		COMBOBOX.CHRAABL.LOADED = true;
		COMBOBOX.CHRAABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHRAABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHRAABL);
		COMBOBOX.CHRAABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / namerelation / locid / namelocation / status /
	// lastupdatedby / lastupdate / addressid / name / department / prefixedline
	// / addressline / zipcd / place / region / countrycd / vatnumber /
	// phonenumber / faxno / statusadr / lastupdatedbyadr / lastupdateadr /
	// lastupdateconcurrencycolumn

	//
	// CH81GBL
	//
	COMBOBOX.CH81GBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH81GBL.LOADED = false;

	COMBOBOX.CH81GBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH81GBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH81GBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH81GBL.INITIALController = controller;
			COMBOBOX.CH81GBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH81GBLService",
					COMBOBOX, "CH81GBLServiceCallback");
		}
		return COMBOBOX.CH81GBL;
	};

	COMBOBOX.CH81GBLServiceCallback = function(data) {
		COMBOBOX.CH81GBL.LOADED = true;
		COMBOBOX.CH81GBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH81GBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH81GBL);
		COMBOBOX.CH81GBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / prodtypeid / vqtyinmt / ctrno /
	// subctrno / ctrdte / bsrelid / docnobldo / docnobl / open_qty_in_mt /
	// prodfamid / transportno / parcno / pursalind / sdl_qtyinkg / maxquantity
	// / trdunitidmaxqty / vmatchsealingtypeind / sealtp

	//
	// CHLTPBL
	//
	COMBOBOX.CHLTPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLTPBL.LOADED = false;

	COMBOBOX.CHLTPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLTPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLTPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLTPBL.INITIALController = controller;
			COMBOBOX.CHLTPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLTPBLService",
					COMBOBOX, "CHLTPBLServiceCallback");
		}
		return COMBOBOX.CHLTPBL;
	};

	COMBOBOX.CHLTPBLServiceCallback = function(data) {
		COMBOBOX.CHLTPBL.LOADED = true;
		COMBOBOX.CHLTPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ltpseqno,
				id : data.result[i].ltpseqno
			};
			COMBOBOX.CHLTPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLTPBL);
		COMBOBOX.CHLTPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / limittype / rating / description / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH59ABL
	//
	COMBOBOX.CH59ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH59ABL.LOADED = false;

	COMBOBOX.CH59ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH59ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH59ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH59ABL.INITIALController = controller;
			COMBOBOX.CH59ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH59ABLService",
					COMBOBOX, "CH59ABLServiceCallback");
		}
		return COMBOBOX.CH59ABL;
	};

	COMBOBOX.CH59ABLServiceCallback = function(data) {
		COMBOBOX.CH59ABL.LOADED = true;
		COMBOBOX.CH59ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].cnversionno,
				id : data.result[i].cnversionno
			};
			COMBOBOX.CH59ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH59ABL);
		COMBOBOX.CH59ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / dte / prodfamidfrom / prodtypeidfrom /
	// prodstypidfrom / originfrom / termsofdelfrom / locidfrom / postpfrom /
	// posseqnofrom / parcnofrom / descriptionspecfrom / storagefromid /
	// prodfamidto / prodtypeidto / prodstypidto / originto / termsofdelto /
	// locidto / postpto / posseqnoto / parcnoto / descriptionspecto /
	// storagetoid / transshipmentind / quantity / trdunitidqty /
	// posscnversionno / defined / vdescrtp / vdescr40 / vtransprelid /
	// vcarcostgroup / vtranspcurcd / vtransprate / vtransptrdunitid /
	// lastupdateconcurrencycolumn / lastupdateconcurrencycolumn4

	//
	// CH21JBL
	//
	COMBOBOX.CH21JBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH21JBL.LOADED = false;

	COMBOBOX.CH21JBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH21JBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH21JBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH21JBL.INITIALController = controller;
			COMBOBOX.CH21JBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH21JBLService",
					COMBOBOX, "CH21JBLServiceCallback");
		}
		return COMBOBOX.CH21JBL;
	};

	COMBOBOX.CH21JBLServiceCallback = function(data) {
		COMBOBOX.CH21JBL.LOADED = true;
		COMBOBOX.CH21JBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH21JBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH21JBL);
		COMBOBOX.CH21JBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / qtyinmt / parctp / description
	// / planningyear / planningmth / balinmtv / planningtp / circleno / fixno

	//
	// CHPSHBL
	//
	COMBOBOX.CHPSHBL = {};
	COMBOBOX.CHPSHBL.INSTANCES = {};
	//TODO
	COMBOBOX.getCHPSHBLComboValues = function(searchValue) {
		COMBOBOX.CHPSHBL.INSTANCES[this.id] = searchValue;
		
		// check if values exist in cache
		if(COMBOBOX.CHPSHBL[searchValue] === undefined){
			// cached value does not exist
			COMBOBOX.CHPSHBL[searchValue] = new dojo.store.Memory({ data : [ {name : LANGUAGE.LOADING_PLEASE_WAIT, id : "0"} ]});
			callWebservice(null, "getListDataAllWithFilter", [ window.models.PROGRAM_RETURN_REC, searchValue ], "CHPSHBLService", COMBOBOX, "CHPSHBLServiceCallback");
		} else {
			setNewDataInWidget(searchValue, COMBOBOX.CHPSHBL.INSTANCES, COMBOBOX.CHPSHBL[searchValue], 'CHPSHBL');
		}
	};

	COMBOBOX.CHPSHBLServiceCallback = function(data) {
		COMBOBOX.CHPSHBL[data.result[0]].remove("0");

		for (var i = 0; i < data.result[1].length; i++) {
			obj = {
				name : data.result[1][i].prodtypeid,
				id : data.result[1][i].prodtypeid
			};
			
			COMBOBOX.CHPSHBL[data.result[0]].put(obj);
		}

		setNewDataInWidget(data.result[0], COMBOBOX.CHPSHBL.INSTANCES, COMBOBOX.CHPSHBL[data.result[0]], 'CHPSHBL');
	};
	// -- Other key/values: / prodstypid / description
	
	/**
	COMBOBOX.CHPSHBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPSHBL.LOADED = false;
	
	COMBOBOX.CHPSHBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPSHBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPSHBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPSHBL.INITIALController = controller;
			COMBOBOX.CHPSHBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPSHBLService",
					COMBOBOX, "CHPSHBLServiceCallback");
		}
		return COMBOBOX.CHPSHBL;
	};

	COMBOBOX.CHPSHBLServiceCallback = function(data) {
		COMBOBOX.CHPSHBL.LOADED = true;
		COMBOBOX.CHPSHBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CHPSHBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPSHBL);
		COMBOBOX.CHPSHBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodstypid / description
	*/

	//
	// CH34FBL
	//
	COMBOBOX.CH34FBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH34FBL.LOADED = false;

	COMBOBOX.CH34FBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH34FBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH34FBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH34FBL.INITIALController = controller;
			COMBOBOX.CH34FBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH34FBLService",
					COMBOBOX, "CH34FBLServiceCallback");
		}
		return COMBOBOX.CH34FBL;
	};

	COMBOBOX.CH34FBLServiceCallback = function(data) {
		COMBOBOX.CH34FBL.LOADED = true;
		COMBOBOX.CH34FBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH34FBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH34FBL);
		COMBOBOX.CH34FBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / pursalind / ctrdte / prodfamid / curcd
	// / price / trdunitidpric / quantity / trdunitidqty / brokerrelid / bsrelid
	// / posmth / posyear / ctrnopgt / subctrnopgt / perenddte / perstartdte /
	// fxpmth / fxpyear / premium / actioncd / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / tobecnfind

	//
	// CHLCOBL
	//
	COMBOBOX.CHLCOBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHLCOBL.LOADED = false;

	COMBOBOX.CHLCOBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHLCOBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHLCOBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHLCOBL.INITIALController = controller;
			COMBOBOX.CHLCOBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHLCOBLService",
					COMBOBOX, "CHLCOBLServiceCallback");
		}
		return COMBOBOX.CHLCOBL;
	};

	COMBOBOX.CHLCOBLServiceCallback = function(data) {
		COMBOBOX.CHLCOBL.LOADED = true;
		COMBOBOX.CHLCOBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].containerlocid,
				id : data.result[i].containerlocid
			};
			COMBOBOX.CHLCOBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHLCOBL);
		COMBOBOX.CHLCOBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / containedlocid / excludeind / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH3AABL
	//
	COMBOBOX.CH3AABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3AABL.LOADED = false;

	COMBOBOX.CH3AABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3AABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3AABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3AABL.INITIALController = controller;
			COMBOBOX.CH3AABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3AABLService",
					COMBOBOX, "CH3AABLServiceCallback");
		}
		return COMBOBOX.CH3AABL;
	};

	COMBOBOX.CH3AABLServiceCallback = function(data) {
		COMBOBOX.CH3AABL.LOADED = true;
		COMBOBOX.CH3AABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].pursalind,
				id : data.result[i].pursalind
			};
			COMBOBOX.CH3AABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3AABL);
		COMBOBOX.CH3AABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ctrno / subctrno / ctrtp / ctrdte / bsrelid /
	// ctrnobs / brokerrelid / ctrnobroker / trdunitidqty / curcd /
	// trdunitidpric / premium / trdunitidprem / noofperiods / prodfamid /
	// prodtypeid / prodstypid / origin / termsofdel / locid / status / created
	// / termsofdelbase / locidbase / originbase / prodstypidbase /
	// prodtypeidbase / quantity / price / curcdcomm / curcdprem / vtotctrqty /
	// vopenind / lastupdateconcurrencycolumn / lastupdateconcurrencycolumn6 /
	// lastupdateconcurrencycolumn7

	//
	// CHCURBL
	//
	COMBOBOX.CHCURBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCURBL.LOADED = false;

	COMBOBOX.CHCURBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCURBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCURBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCURBL.INITIALController = controller;
			COMBOBOX.CHCURBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCURBLService",
					COMBOBOX, "CHCURBLServiceCallback");
		}
		return COMBOBOX.CHCURBL;
	};

	COMBOBOX.CHCURBLServiceCallback = function(data) {
		COMBOBOX.CHCURBL.LOADED = true;
		COMBOBOX.CHCURBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].curcd,
				id : data.result[i].curcd
			};
			COMBOBOX.CHCURBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCURBL);
		COMBOBOX.CHCURBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / curunit / diffrteabove /
	// diffrtebelow / coverlmtpur / coverlmtsal / coverpriorityid / relid /
	// reverserteind / poslimitlong / poslimitshort / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH53AUL
	//
	COMBOBOX.CH53AUL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH53AUL.LOADED = false;

	COMBOBOX.CH53AUL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH53AULComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH53AUL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH53AUL.INITIALController = controller;
			COMBOBOX.CH53AUL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH53AULService",
					COMBOBOX, "CH53AULServiceCallback");
		}
		return COMBOBOX.CH53AUL;
	};

	COMBOBOX.CH53AULServiceCallback = function(data) {
		COMBOBOX.CH53AUL.LOADED = true;
		COMBOBOX.CH53AUL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH53AUL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH53AUL);
		COMBOBOX.CH53AUL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / ppaseqno / ppasubno / qtyinmt / parctp /
	// ctrno / subctrno / destinatstartdte / lociddest / locidloading /
	// loadingstartdte / prodfamid / pardte / superintendrelid / mailtp_sup /
	// language_sup / bldte / storagetp / storageid / transportno /
	// p_free_text_500 / prodtypeid / prodstypid / origin / termsofdel / locid /
	// descriptionspec / pursalind / bsrelid / plannedqty / trdunitidqty /
	// diffqtytobook / fullflmntind / brorelindprofstr / mailtpapprprofstr /
	// language_profstr / brorelindsend / mailtpapprsend / language_send / curcd
	// / price / trdunitidpric / ultimateapprdte / bal / trdunt_balv / ctrdte /
	// quantity / minqty / maxqty / nomapprind / status / sumbalv /
	// mailingtpappr / movepurchasesv / ordernr / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2 / lastupdateconcurrencycolumn3 /
	// lastupdateconcurrencycolumn4 / lastupdateconcurrencycolumn5 /
	// lastupdateconcurrencycolumn9

	//
	// CH5JJBL
	//
	COMBOBOX.CH5JJBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5JJBL.LOADED = false;

	COMBOBOX.CH5JJBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5JJBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5JJBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5JJBL.INITIALController = controller;
			COMBOBOX.CH5JJBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5JJBLService",
					COMBOBOX, "CH5JJBLServiceCallback");
		}
		return COMBOBOX.CH5JJBL;
	};

	COMBOBOX.CH5JJBLServiceCallback = function(data) {
		COMBOBOX.CH5JJBL.LOADED = true;
		COMBOBOX.CH5JJBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5JJBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5JJBL);
		COMBOBOX.CH5JJBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / parcno / ordernr / bsrelid / pursalind
	// / qtyinmt / parctp / description / orderid / orderline / ordertp

	//
	// CHCATBL
	//
	COMBOBOX.CHCATBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCATBL.LOADED = false;

	COMBOBOX.CHCATBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCATBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCATBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCATBL.INITIALController = controller;
			COMBOBOX.CHCATBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCATBLService",
					COMBOBOX, "CHCATBLServiceCallback");
		}
		return COMBOBOX.CHCATBL;
	};

	COMBOBOX.CHCATBLServiceCallback = function(data) {
		COMBOBOX.CHCATBL.LOADED = true;
		COMBOBOX.CHCATBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].relid,
				id : data.result[i].relid
			};
			COMBOBOX.CHCATBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCATBL);
		COMBOBOX.CHCATBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / costgrpid / costrteid / timingind / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHEEGRL
	//
	COMBOBOX.CHEEGRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHEEGRL.LOADED = false;

	COMBOBOX.CHEEGRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHEEGRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHEEGRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHEEGRL.INITIALController = controller;
			COMBOBOX.CHEEGRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHEEGRLService",
					COMBOBOX, "CHEEGRLServiceCallback");
		}
		return COMBOBOX.CHEEGRL;
	};

	COMBOBOX.CHEEGRLServiceCallback = function(data) {
		COMBOBOX.CHEEGRL.LOADED = true;
		COMBOBOX.CHEEGRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].eegid,
				id : data.result[i].eegid
			};
			COMBOBOX.CHEEGRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHEEGRL);
		COMBOBOX.CHEEGRL.INITIALCOMBOBOX = null;
	};

	//
	// CHIRTBL
	//
	COMBOBOX.CHIRTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHIRTBL.LOADED = false;

	COMBOBOX.CHIRTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHIRTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHIRTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHIRTBL.INITIALController = controller;
			COMBOBOX.CHIRTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHIRTBLService",
					COMBOBOX, "CHIRTBLServiceCallback");
		}
		return COMBOBOX.CHIRTBL;
	};

	COMBOBOX.CHIRTBLServiceCallback = function(data) {
		COMBOBOX.CHIRTBL.LOADED = true;
		COMBOBOX.CHIRTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].curcd,
				id : data.result[i].curcd
			};
			COMBOBOX.CHIRTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHIRTBL);
		COMBOBOX.CHIRTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / startdte / percentageint / percentageext / status
	// / lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHT66RL
	//
	COMBOBOX.CHT66RL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHT66RL.LOADED = false;

	COMBOBOX.CHT66RL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHT66RLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHT66RL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHT66RL.INITIALController = controller;
			COMBOBOX.CHT66RL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHT66RLService",
					COMBOBOX, "CHT66RLServiceCallback");
		}
		return COMBOBOX.CHT66RL;
	};

	COMBOBOX.CHT66RLServiceCallback = function(data) {
		COMBOBOX.CHT66RL.LOADED = true;
		COMBOBOX.CHT66RL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].seqno,
				id : data.result[i].seqno
			};
			COMBOBOX.CHT66RL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHT66RL);
		COMBOBOX.CHT66RL.INITIALCOMBOBOX = null;
	};

	//
	// CH5DABL
	//
	COMBOBOX.CH5DABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5DABL.LOADED = false;

	COMBOBOX.CH5DABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5DABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5DABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5DABL.INITIALController = controller;
			COMBOBOX.CH5DABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5DABLService",
					COMBOBOX, "CH5DABLServiceCallback");
		}
		return COMBOBOX.CH5DABL;
	};

	COMBOBOX.CH5DABLServiceCallback = function(data) {
		COMBOBOX.CH5DABL.LOADED = true;
		COMBOBOX.CH5DABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5DABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5DABL);
		COMBOBOX.CH5DABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ppaseqno / actioncode / funcind / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH21BBL
	//
	COMBOBOX.CH21BBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH21BBL.LOADED = false;

	COMBOBOX.CH21BBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH21BBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH21BBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH21BBL.INITIALController = controller;
			COMBOBOX.CH21BBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH21BBLService",
					COMBOBOX, "CH21BBLServiceCallback");
		}
		return COMBOBOX.CH21BBL;
	};

	COMBOBOX.CH21BBLServiceCallback = function(data) {
		COMBOBOX.CH21BBL.LOADED = true;
		COMBOBOX.CH21BBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parcno,
				id : data.result[i].parcno
			};
			COMBOBOX.CH21BBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH21BBL);
		COMBOBOX.CH21BBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / posseqno / prodfamid / prodtypeid / prodstypid /
	// origin / termsofdel / locid / descriptionspec / ctrno / subctrno /
	// pursalind / parctp / supplcustrelid / ppaquantity / bal / trdunitidqty /
	// curcd / pric / trdunitidpric / ctrtp / trmsofsalid / postp / balinkg /
	// quantity / specificationpos / posmth / posyear / openstaandv /
	// originalind / bldte / pardte / ctrdte / cnversionno / parcnofulflmnt /
	// supintrelid / search_group / ctrnobs / ctrnobroker / pertpid /
	// ordquantity / routingcode / perenddte / perstartdte / region / storageid
	// / transportno / releaseno / ordernr

	//
	// CHPETBL
	//
	COMBOBOX.CHPETBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHPETBL.LOADED = false;

	COMBOBOX.CHPETBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHPETBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHPETBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHPETBL.INITIALController = controller;
			COMBOBOX.CHPETBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHPETBLService",
					COMBOBOX, "CHPETBLServiceCallback");
		}
		return COMBOBOX.CHPETBL;
	};

	COMBOBOX.CHPETBLServiceCallback = function(data) {
		COMBOBOX.CHPETBL.LOADED = true;
		COMBOBOX.CHPETBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].pertpid,
				id : data.result[i].pertpid
			};
			COMBOBOX.CHPETBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHPETBL);
		COMBOBOX.CHPETBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / periodtpind / status / lastupdatedby
	// / lastupdate / lastupdateconcurrencycolumn

	//
	// CHCURRL
	//
	COMBOBOX.CHCURRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCURRL.LOADED = false;

	COMBOBOX.CHCURRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCURRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCURRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCURRL.INITIALController = controller;
			COMBOBOX.CHCURRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCURRLService",
					COMBOBOX, "CHCURRLServiceCallback");
		}
		return COMBOBOX.CHCURRL;
	};

	COMBOBOX.CHCURRLServiceCallback = function(data) {
		COMBOBOX.CHCURRL.LOADED = true;
		COMBOBOX.CHCURRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].curcd,
				id : data.result[i].curcd
			};
			COMBOBOX.CHCURRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCURRL);
		COMBOBOX.CHCURRL.INITIALCOMBOBOX = null;
	};

	//
	// CHJOUBL
	//
	COMBOBOX.CHJOUBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHJOUBL.LOADED = false;

	COMBOBOX.CHJOUBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHJOUBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHJOUBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHJOUBL.INITIALController = controller;
			COMBOBOX.CHJOUBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHJOUBLService",
					COMBOBOX, "CHJOUBLServiceCallback");
		}
		return COMBOBOX.CHJOUBL;
	};

	COMBOBOX.CHJOUBLServiceCallback = function(data) {
		COMBOBOX.CHJOUBL.LOADED = true;
		COMBOBOX.CHJOUBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].journalid,
				id : data.result[i].journalid
			};
			COMBOBOX.CHJOUBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHJOUBL);
		COMBOBOX.CHJOUBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / fmsjournalid / batchfmstpind /
	// screennofms / indivbookingind / fmsinvoiceid / hghstlineno / coveringind
	// / lstunitseqno / status / lastupdatedby / lastupdate /
	// lastupdateconcurrencycolumn

	//
	// CHORHRL
	//
	COMBOBOX.CHORHRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHORHRL.LOADED = false;

	COMBOBOX.CHORHRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHORHRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHORHRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHORHRL.INITIALController = controller;
			COMBOBOX.CHORHRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHORHRLService",
					COMBOBOX, "CHORHRLServiceCallback");
		}
		return COMBOBOX.CHORHRL;
	};

	COMBOBOX.CHORHRLServiceCallback = function(data) {
		COMBOBOX.CHORHRL.LOADED = true;
		COMBOBOX.CHORHRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].orderid,
				id : data.result[i].orderid
			};
			COMBOBOX.CHORHRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHORHRL);
		COMBOBOX.CHORHRL.INITIALCOMBOBOX = null;
	};

	//
	// CHTPMRL
	//
	COMBOBOX.CHTPMRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTPMRL.LOADED = false;

	COMBOBOX.CHTPMRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTPMRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTPMRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTPMRL.INITIALController = controller;
			COMBOBOX.CHTPMRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTPMRLService",
					COMBOBOX, "CHTPMRLServiceCallback");
		}
		return COMBOBOX.CHTPMRL;
	};

	COMBOBOX.CHTPMRLServiceCallback = function(data) {
		COMBOBOX.CHTPMRL.LOADED = true;
		COMBOBOX.CHTPMRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].paymtrmsid,
				id : data.result[i].paymtrmsid
			};
			COMBOBOX.CHTPMRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTPMRL);
		COMBOBOX.CHTPMRL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description

	//
	// CH83CBL
	//
	COMBOBOX.CH83CBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH83CBL.LOADED = false;

	COMBOBOX.CH83CBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH83CBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH83CBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH83CBL.INITIALController = controller;
			COMBOBOX.CH83CBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH83CBLService",
					COMBOBOX, "CH83CBLServiceCallback");
		}
		return COMBOBOX.CH83CBL;
	};

	COMBOBOX.CH83CBLServiceCallback = function(data) {
		COMBOBOX.CH83CBL.LOADED = true;
		COMBOBOX.CH83CBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parametergroupid,
				id : data.result[i].parametergroupid
			};
			COMBOBOX.CH83CBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH83CBL);
		COMBOBOX.CH83CBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parametergroupname / parameterid / parametername /
	// status / lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CHEEGBL
	//
	COMBOBOX.CHEEGBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHEEGBL.LOADED = false;

	COMBOBOX.CHEEGBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHEEGBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHEEGBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHEEGBL.INITIALController = controller;
			COMBOBOX.CHEEGBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHEEGBLService",
					COMBOBOX, "CHEEGBLServiceCallback");
		}
		return COMBOBOX.CHEEGBL;
	};

	COMBOBOX.CHEEGBLServiceCallback = function(data) {
		COMBOBOX.CHEEGBL.LOADED = true;
		COMBOBOX.CHEEGBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].eegid,
				id : data.result[i].eegid
			};
			COMBOBOX.CHEEGBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHEEGBL);
		COMBOBOX.CHEEGBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamid / lastupdatedby / eegnumber / status /
	// lastupdate / addressid / name / addressline / zipcd / place / region /
	// countrycd / phonenumber / faxno / statusadr / lastupdatedbyadr /
	// lastupdateadr / lastupdateconcurrencycolumn

	//
	// CH5HPBL
	//
	COMBOBOX.CH5HPBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5HPBL.LOADED = false;

	COMBOBOX.CH5HPBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5HPBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5HPBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5HPBL.INITIALController = controller;
			COMBOBOX.CH5HPBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5HPBLService",
					COMBOBOX, "CH5HPBLServiceCallback");
		}
		return COMBOBOX.CH5HPBL;
	};

	COMBOBOX.CH5HPBLServiceCallback = function(data) {
		COMBOBOX.CH5HPBL.LOADED = true;
		COMBOBOX.CH5HPBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].planningno,
				id : data.result[i].planningno
			};
			COMBOBOX.CH5HPBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5HPBL);
		COMBOBOX.CH5HPBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / parcno / ppasubno / parctp / pursalind /
	// ppabsrelid / fixno / fpaseqno / ppaqtyinmt / price / haulrelid / haulrte
	// / parcurcd / fpadescription / locid / prodfamid / prodtypeid / prodstypid
	// / startdte / gpldescription / ctrno / subctrno / origin / vparcinvind /
	// vparcrelind / vparcfixind / vparcdelind / storelocid / vstartdte /
	// venddte / ppaseqno / bal / trdunitidqty / trdunitidpric / fpacurcd /
	// fpano / fixdte / fpaqtyinmt / custref / storeref / haulref / fpabsrelid /
	// wbtno / confsentind / confcusdte / confhauldte / confstoredte / status /
	// termsofdel / postp / posseqno / parcnofulflmnt / lociddest /
	// fpalastupdate / vfpalastupdate / ppalastupdate / vppalastupdate / alttod
	// / haulageloc / colldate / deltime / colltime / cust / rechargecurcd /
	// rechargerte / timestamphaulier / timestampstore / userhaulier / userstore
	// / description / zipcd / place

	//
	// CHQLTBL
	//
	COMBOBOX.CHQLTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHQLTBL.LOADED = false;

	COMBOBOX.CHQLTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHQLTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHQLTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHQLTBL.INITIALController = controller;
			COMBOBOX.CHQLTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHQLTBLService",
					COMBOBOX, "CHQLTBLServiceCallback");
		}
		return COMBOBOX.CHQLTBL;
	};

	COMBOBOX.CHQLTBLServiceCallback = function(data) {
		COMBOBOX.CHQLTBL.LOADED = true;
		COMBOBOX.CHQLTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].qualitytpid,
				id : data.result[i].qualitytpid
			};
			COMBOBOX.CHQLTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHQLTBL);
		COMBOBOX.CHQLTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / qualitytrmstp / qualitytpunitid /
	// status / lastupdatedby / lastupdate / lastupdateconcurrencycolumn

	//
	// CH31ABL
	//
	COMBOBOX.CH31ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31ABL.LOADED = false;

	COMBOBOX.CH31ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31ABL.INITIALController = controller;
			COMBOBOX.CH31ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31ABLService",
					COMBOBOX, "CH31ABLServiceCallback");
		}
		return COMBOBOX.CH31ABL;
	};

	COMBOBOX.CH31ABLServiceCallback = function(data) {
		COMBOBOX.CH31ABL.LOADED = true;
		COMBOBOX.CH31ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].pursalind,
				id : data.result[i].pursalind
			};
			COMBOBOX.CH31ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31ABL);
		COMBOBOX.CH31ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / ctrno / subctrno / ctrtp / ctrdte / bsrelid /
	// ctrnobs / brokerrelid / ctrnobroker / quantity / trdunitidqty / price /
	// curcd / trdunitidpric / premium / curcdprem / trdunitidprem / noofperiods
	// / prodfamid / prodtypeid / prodstypid / origin / termsofdel / locid /
	// postp / posseqno / descriptionspec / status / created / vctr_no /
	// vsubctr_no / lastupdateconcurrencycolumn / lastupdateconcurrencycolumn2 /
	// lastupdateconcurrencycolumn7 / lastupdateconcurrencycolumn8 /
	// lastupdateconcurrencycolumn10

	//
	// CHCVTBL
	//
	COMBOBOX.CHCVTBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHCVTBL.LOADED = false;

	COMBOBOX.CHCVTBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHCVTBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHCVTBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHCVTBL.INITIALController = controller;
			COMBOBOX.CHCVTBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHCVTBLService",
					COMBOBOX, "CHCVTBLServiceCallback");
		}
		return COMBOBOX.CHCVTBL;
	};

	COMBOBOX.CHCVTBLServiceCallback = function(data) {
		COMBOBOX.CHCVTBL.LOADED = true;
		COMBOBOX.CHCVTBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].costgrpid,
				id : data.result[i].costgrpid
			};
			COMBOBOX.CHCVTBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHCVTBL);
		COMBOBOX.CHCVTBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / countrycd / vatcd / status / lastupdatedby /
	// lastupdate / lastupdateconcurrencycolumn

	//
	// CH5ECBL
	//
	COMBOBOX.CH5ECBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH5ECBL.LOADED = false;

	COMBOBOX.CH5ECBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH5ECBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH5ECBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH5ECBL.INITIALController = controller;
			COMBOBOX.CH5ECBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH5ECBLService",
					COMBOBOX, "CH5ECBLServiceCallback");
		}
		return COMBOBOX.CH5ECBL;
	};

	COMBOBOX.CH5ECBLServiceCallback = function(data) {
		COMBOBOX.CH5ECBL.LOADED = true;
		COMBOBOX.CH5ECBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].parcno,
				id : data.result[i].parcno
			};
			COMBOBOX.CH5ECBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH5ECBL);
		COMBOBOX.CH5ECBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / planningno / ppaseqno / description / bsrelid /
	// pursalind / toplanqty / openqty / openqtymax / openqtymin / trdunitidqty
	// / curcd / price / trdunitidpric / ctrtp / ctrno / subctrno / extctrno /
	// parctp / prodfamid / prodtypeid / prodstypid / origin / termsofdel /
	// locid / postp / posseqno / descriptionspec / storageid / transportno /
	// posmth / posyear / fullypricedind / vprictp / lastupdateconcurrencycolumn
	// / lastupdateconcurrencycolumn4

	//
	// CH62UBL
	//
	COMBOBOX.CH62UBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH62UBL.LOADED = false;

	COMBOBOX.CH62UBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH62UBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH62UBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH62UBL.INITIALController = controller;
			COMBOBOX.CH62UBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH62UBLService",
					COMBOBOX, "CH62UBLServiceCallback");
		}
		return COMBOBOX.CH62UBL;
	};

	COMBOBOX.CH62UBLServiceCallback = function(data) {
		COMBOBOX.CH62UBL.LOADED = true;
		COMBOBOX.CH62UBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].invoiceid,
				id : data.result[i].invoiceid
			};
			COMBOBOX.CH62UBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH62UBL);
		COMBOBOX.CH62UBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / invoiceno / relid / prodfamid / prodtypeid /
	// prodstypid / origin / termsofdel / locid / storageid / descriptionspec /
	// trdunitidqty / quantity / curcd / totamntexclvat / actpassind /
	// paymtrmsid / duedate / vatcd / countrycd / mailingtpinvoice /
	// invoicelayout / holdind / bankaccntowncomp / countrycdours /
	// countrycdothpty / addtextinvoice / invoicabledte / noofliabil / levyamnt
	// / languageid / currte / status / lastupdatedby / lastupdate / liabilitytp
	// / identsource / liabilityno / invoicelineid / paymperindays /
	// strtdtpaympertp / fixno / routingcode / vatrte /
	// lastupdateconcurrencycolumn

	//
	// CHJOURL
	//
	COMBOBOX.CHJOURL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHJOURL.LOADED = false;

	COMBOBOX.CHJOURL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHJOURLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHJOURL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHJOURL.INITIALController = controller;
			COMBOBOX.CHJOURL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHJOURLService",
					COMBOBOX, "CHJOURLServiceCallback");
		}
		return COMBOBOX.CHJOURL;
	};

	COMBOBOX.CHJOURLServiceCallback = function(data) {
		COMBOBOX.CHJOURL.LOADED = true;
		COMBOBOX.CHJOURL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].journalid,
				id : data.result[i].journalid
			};
			COMBOBOX.CHJOURL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHJOURL);
		COMBOBOX.CHJOURL.INITIALCOMBOBOX = null;
	};

	//
	// CH93ABL
	//
	COMBOBOX.CH93ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH93ABL.LOADED = false;

	COMBOBOX.CH93ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH93ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH93ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH93ABL.INITIALController = controller;
			COMBOBOX.CH93ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH93ABLService",
					COMBOBOX, "CH93ABLServiceCallback");
		}
		return COMBOBOX.CH93ABL;
	};

	COMBOBOX.CH93ABLServiceCallback = function(data) {
		COMBOBOX.CH93ABL.LOADED = true;
		COMBOBOX.CH93ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].tradingpartner,
				id : data.result[i].tradingpartner
			};
			COMBOBOX.CH93ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH93ABL);
		COMBOBOX.CH93ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / aidadocno / relfixno / storelocid / extwbtno /
	// qtyinmt / aidadlvdatetime / description / cust / haulier / vehregno /
	// aidastatus / errordescr / arrivaldatetime / lastupdateconcurrencycolumn

	//
	// CHTPMBL
	//
	COMBOBOX.CHTPMBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHTPMBL.LOADED = false;

	COMBOBOX.CHTPMBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHTPMBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHTPMBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHTPMBL.INITIALController = controller;
			COMBOBOX.CHTPMBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHTPMBLService",
					COMBOBOX, "CHTPMBLServiceCallback");
		}
		return COMBOBOX.CHTPMBL;
	};

	COMBOBOX.CHTPMBLServiceCallback = function(data) {
		COMBOBOX.CHTPMBL.LOADED = true;
		COMBOBOX.CHTPMBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].paymtrmsid,
				id : data.result[i].paymtrmsid
			};
			COMBOBOX.CHTPMBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHTPMBL);
		COMBOBOX.CHTPMBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description / methodofpaym / paymperindays /
	// strtdtpaympertp / text / bankaccntseqno / bankaccntno / status /
	// lastupdatedby / lastupdate / lastupdateconcurrencycolumn /
	// lastupdateconcurrencycolumn2

	//
	// CH76ABL
	//
	COMBOBOX.CH76ABL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH76ABL.LOADED = false;

	COMBOBOX.CH76ABL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH76ABLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH76ABL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH76ABL.INITIALController = controller;
			COMBOBOX.CH76ABL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH76ABLService",
					COMBOBOX, "CH76ABLServiceCallback");
		}
		return COMBOBOX.CH76ABL;
	};

	COMBOBOX.CH76ABLServiceCallback = function(data) {
		COMBOBOX.CH76ABL.LOADED = true;
		COMBOBOX.CH76ABL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].prodfamid,
				id : data.result[i].prodfamid
			};
			COMBOBOX.CH76ABL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH76ABL);
		COMBOBOX.CH76ABL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / prodfamdescription / costgrpid /
	// costgroupdescription / settlmreservation / estamntinbcur / realamntinbcur
	// / curcd / lastupdateconcurrencycolumn

	//
	// CHQLTRL
	//
	COMBOBOX.CHQLTRL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHQLTRL.LOADED = false;

	COMBOBOX.CHQLTRL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHQLTRLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHQLTRL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHQLTRL.INITIALController = controller;
			COMBOBOX.CHQLTRL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHQLTRLService",
					COMBOBOX, "CHQLTRLServiceCallback");
		}
		return COMBOBOX.CHQLTRL;
	};

	COMBOBOX.CHQLTRLServiceCallback = function(data) {
		COMBOBOX.CHQLTRL.LOADED = true;
		COMBOBOX.CHQLTRL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].qualitytpid,
				id : data.result[i].qualitytpid
			};
			COMBOBOX.CHQLTRL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHQLTRL);
		COMBOBOX.CHQLTRL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / description

	//
	// CHQLDBL
	//
	COMBOBOX.CHQLDBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CHQLDBL.LOADED = false;

	COMBOBOX.CHQLDBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCHQLDBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CHQLDBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CHQLDBL.INITIALController = controller;
			COMBOBOX.CHQLDBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CHQLDBLService",
					COMBOBOX, "CHQLDBLServiceCallback");
		}
		return COMBOBOX.CHQLDBL;
	};

	COMBOBOX.CHQLDBLServiceCallback = function(data) {
		COMBOBOX.CHQLDBL.LOADED = true;
		COMBOBOX.CHQLDBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].languageid,
				id : data.result[i].languageid
			};
			COMBOBOX.CHQLDBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CHQLDBL);
		COMBOBOX.CHQLDBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / qualitytpid / description / status / lastupdatedby
	// / lastupdate / lastupdateconcurrencycolumn

	//
	// CH31QBL
	//
	COMBOBOX.CH31QBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH31QBL.LOADED = false;

	COMBOBOX.CH31QBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH31QBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH31QBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH31QBL.INITIALController = controller;
			COMBOBOX.CH31QBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH31QBLService",
					COMBOBOX, "CH31QBLServiceCallback");
		}
		return COMBOBOX.CH31QBL;
	};

	COMBOBOX.CH31QBLServiceCallback = function(data) {
		COMBOBOX.CH31QBL.LOADED = true;
		COMBOBOX.CH31QBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH31QBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH31QBL);
		COMBOBOX.CH31QBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / sortno / qualitytpid / qltdescription / anaind /
	// qualitytrmstp / qualitytrmsprt / perc / slashperc / execsettlmperc /
	// description / explication / percdevto1 / multiplfactor1 / percdevto2 /
	// multiplfactor2 / percdevto3 / multiplfactor3 / percdevto4 /
	// multiplfactor4 / percdevto5 / multiplfactor5 / status /
	// lastupdateconcurrencycolumn

	//
	// CH3HCBL
	//
	COMBOBOX.CH3HCBL = new dojo.store.Memory({
		data : [ {
			name : LANGUAGE.LOADING_PLEASE_WAIT,
			id : "0"
		} ]
	});
	COMBOBOX.CH3HCBL.LOADED = false;

	COMBOBOX.CH3HCBL.INITIALCOMBOBOX = null;
	COMBOBOX.getCH3HCBLComboValues = function(controller, initialcombobox) {
		if (!COMBOBOX.CH3HCBL.LOADED) {
			controller.addUnloadedCombo();
			COMBOBOX.CH3HCBL.INITIALController = controller;
			COMBOBOX.CH3HCBL.INITIALCOMBOBOX = controller.id + initialcombobox;
			callWebservice(null, "getListDataAll",
					[ window.models.PROGRAM_RETURN_REC ], "CH3HCBLService",
					COMBOBOX, "CH3HCBLServiceCallback");
		}
		return COMBOBOX.CH3HCBL;
	};

	COMBOBOX.CH3HCBLServiceCallback = function(data) {
		COMBOBOX.CH3HCBL.LOADED = true;
		COMBOBOX.CH3HCBL.remove("0");
		for (var i = 0; i < data.result.length; i++) {
			obj = {
				name : data.result[i].ctrno,
				id : data.result[i].ctrno
			};
			COMBOBOX.CH3HCBL.put(obj);
		}
		setComboboxDefaultValue(COMBOBOX.CH3HCBL);
		COMBOBOX.CH3HCBL.INITIALCOMBOBOX = null;
	};
	// -- Other key/values: / subctrno / lastupdate / lastupdatedby / status /
	// subctrnoframe / ctrnoframe / statusctr / lastupdateconcurrencycolumn

	/***************************************************************************
	 * CUSTOM
	 **************************************************************************/
	COMBOBOX.getYears = function() {
		var years = [];
		var currentYear = new Date().getFullYear();
		for (var i = 0; i < (currentYear + 10 - currentYear); i++) {
			years.push({
				name : currentYear + i,
				id : currentYear + i
			});
		}
		return new dojo.store.Memory({
			data : years
		});
	};

	COMBOBOX.getCurrentYearAnd2 = function() {
		var years = [];
		var currentYear = new Date().getFullYear();
		for (var i = 0; i < (currentYear + 2 - currentYear); i++) {
			years.push({
				name : currentYear + i,
				id : currentYear + i
			});
		}
		return new dojo.store.Memory({
			data : years
		});
	};

	COMBOBOX.getMonths = function() {
		var months = [];
		var month = new Array();
		month[0] = "January";
		month[1] = "February";
		month[2] = "March";
		month[3] = "April";
		month[4] = "May";
		month[5] = "June";
		month[6] = "July";
		month[7] = "August";
		month[8] = "September";
		month[9] = "October";
		month[10] = "November";
		month[11] = "December";
		for (var i = 0; i < 12; i++) {
			months.push({
				name : month[i],
				id : i + 1
			});
		}
		return new dojo.store.Memory({
			data : months
		});
	};

	COMBOBOX.getSpotMonths = function() {
		var months = [];
		var month = new Array();
		month[0] = "Spot";
		month[1] = "January";
		month[2] = "February";
		month[3] = "March";
		month[4] = "April";
		month[5] = "May";
		month[6] = "June";
		month[7] = "July";
		month[8] = "August";
		month[9] = "September";
		month[10] = "October";
		month[11] = "November";
		month[12] = "December";
		for (var i = 0; i < 13; i++) {
			months.push({
				name : month[i],
				id : i
			});
		}
		return new dojo.store.Memory({
			data : months
		});
	};
	
///////////////////////
//Dependendent combo's
///////////////////////

COMBOBOX.dependency = function(controller, method, source, destination){
	require(["dijit/registry", "dojo/on", "dojo/_base/lang", "dojo/domReady!"], function(registry, on, lang){
		var sourceCombo = registry.byId(source);
		sourceCombo.own(on(sourceCombo, 'change', COMBOBOX[method]));
		
		if(sourceCombo.dependencies === undefined){
			sourceCombo.dependencies = [];
		}
		sourceCombo.dependencies.push({"id" : destination, "method" : method});
	});	
};




//
// CHCSHBL
//
COMBOBOX.CHCSHBL = {};
COMBOBOX.CHCSHBL.INSTANCES = {};

COMBOBOX.getCHCSHBLComboValues = function(searchValue) {
	COMBOBOX.CHCSHBL.INSTANCES[this.id] = searchValue;
	
	// check if values exist in cache
	if(COMBOBOX.CHCSHBL[searchValue] === undefined){
		// cached value does not exist
		COMBOBOX.CHCSHBL[searchValue] = new dojo.store.Memory({ data : [ {name : LANGUAGE.LOADING_PLEASE_WAIT, id : "0"} ]});
		callWebservice(null, "getListDataAllWithFilter", [ window.models.PROGRAM_RETURN_REC, searchValue ], "CHCSHBLService", COMBOBOX, "CHCSHBLServiceCallback");
	} else {
		setNewDataInWidget(searchValue, COMBOBOX.CHCSHBL.INSTANCES, COMBOBOX.CHCSHBL[searchValue], 'CHCSHBL');
	}
};

COMBOBOX.CHCSHBLServiceCallback = function(data) {
	COMBOBOX.CHCSHBL[data.result[0]].remove("0");

	for (var i = 0; i < data.result[1].length; i++) {
		obj = {
			name : data.result[1][i].costrteid,
			id : data.result[1][i].costrteid
		};
		
		COMBOBOX.CHCSHBL[data.result[0]].put(obj);
	}

	setNewDataInWidget(data.result[0], COMBOBOX.CHCSHBL.INSTANCES, COMBOBOX.CHCSHBL[data.result[0]], 'CHCSHBL');
};
// -- Other key/values: / costrteid / description


//
// CHPTHBL
//
COMBOBOX.CHPTHBL = {};
COMBOBOX.CHPTHBL.INSTANCES = {};
// TODO
COMBOBOX.getCHPTHBLComboValues = function(searchValue) {
	COMBOBOX.CHPTHBL.INSTANCES[this.id] = searchValue;
	
	// check if values exist in cache
	if(COMBOBOX.CHPTHBL[searchValue] === undefined){
		// cached value does not exist
		COMBOBOX.CHPTHBL[searchValue] = new dojo.store.Memory({ data : [ {name : LANGUAGE.LOADING_PLEASE_WAIT, id : "0"} ]});
		callWebservice(null, "getListDataAllWithFilter", [ window.models.PROGRAM_RETURN_REC, searchValue ], "CHPTHBLService", COMBOBOX, "CHPTHBLServiceCallback");
	} else {
		setNewDataInWidget(searchValue, COMBOBOX.CHPTHBL.INSTANCES, COMBOBOX.CHPTHBL[searchValue], 'CHPTHBL');
	}
};

COMBOBOX.CHPTHBLServiceCallback = function(data) {
	COMBOBOX.CHPTHBL[data.result[0]].remove("0");

	for (var i = 0; i < data.result[1].length; i++) {
		obj = {
			name : data.result[1][i].prodtypeid,
			id : data.result[1][i].prodtypeid
		};
		
		COMBOBOX.CHPTHBL[data.result[0]].put(obj);
	}

	setNewDataInWidget(data.result[0], COMBOBOX.CHPTHBL.INSTANCES, COMBOBOX.CHPTHBL[data.result[0]], 'CHPTHBL');
};
// -- Other key/values: / prodtypeid / description / sustainableind


//
// CHPSTBL
//
COMBOBOX.CHPSTBL = {};
COMBOBOX.CHPSTBL.INSTANCES = {};

COMBOBOX.getCHPSTBLComboValues = function(searchValue) {
COMBOBOX.CHPSTBL.INSTANCES[this.id] = searchValue;

// check if values exist in cache
if(COMBOBOX.CHPSTBL[searchValue] === undefined){
	// cached value does not exist
	COMBOBOX.CHPSTBL[searchValue] = new dojo.store.Memory({ data : [ {name : LANGUAGE.LOADING_PLEASE_WAIT, id : "0"} ]});
	callWebservice(null, "getListDataAllWithFilter", [ window.models.PROGRAM_RETURN_REC, searchValue ], "CHPSTBLService", COMBOBOX, "CHPSTBLServiceCallback");
} else {
	setNewDataInWidget(searchValue, COMBOBOX.CHPSTBL.INSTANCES, COMBOBOX.CHPSTBL[searchValue], 'CHPSTBL');
}
};

COMBOBOX.CHPSTBLServiceCallback = function(data) {
COMBOBOX.CHPSTBL[data.result[0]].remove("0");

for (var i = 0; i < data.result[1].length; i++) {
	obj = {
		name : data.result[1][i].prodstypid,
		id : data.result[1][i].prodstypid
	};
	
	COMBOBOX.CHPSTBL[data.result[0]].put(obj);
}

setNewDataInWidget(data.result[0], COMBOBOX.CHPSTBL.INSTANCES, COMBOBOX.CHPSTBL[data.result[0]], 'CHPSTBL');
};

// -- Other key/values: / prodstypid / description / cropyear / nongmpind /
// status / lastupdatedby / lastupdate / lastupdateconcurrencycolumn






//
// Employees
//
COMBOBOX.EMPLOYEE = new dojo.store.Memory({
	data : [ {
		name : LANGUAGE.LOADING_PLEASE_WAIT,
		id : "0"
	} ]
});
COMBOBOX.EMPLOYEE.LOADED = false;

COMBOBOX.EMPLOYEE.INITIALCOMBOBOX = null;
COMBOBOX.getEmployeeComboValues = function(controller, initialcombobox) {
	if (!COMBOBOX.EMPLOYEE.LOADED) {
		controller.addUnloadedCombo();
		COMBOBOX.EMPLOYEE.INITIALController = controller;
		COMBOBOX.EMPLOYEE.INITIALCOMBOBOX = controller.id + initialcombobox;
		callWebservice(null, "getListDataAll",
				[ window.models.PROGRAM_RETURN_REC ], "EmployeeService",
				COMBOBOX, "EMPLOYEEServiceCallback");
	}
	return COMBOBOX.EMPLOYEE;
};

COMBOBOX.EMPLOYEEServiceCallback = function(data) {
	COMBOBOX.EMPLOYEE.LOADED = true;
	COMBOBOX.EMPLOYEE.remove("0");
	for (var i = 0; i < data.result.length; i++) {
		obj = {
			name : data.result[i].LASTNAME + " " + data.result[i].FIRSTNAME,
			id : data.result[i].EMPLOYEENUMBER
		};
		COMBOBOX.EMPLOYEE.put(obj);
	}
	setComboboxDefaultValue(COMBOBOX.EMPLOYEE);
	COMBOBOX.EMPLOYEE.INITIALCOMBOBOX = null;
};



//
// Office Code
//


COMBOBOX.OFFICE = new dojo.store.Memory({
	data : [ {
		name : LANGUAGE.LOADING_PLEASE_WAIT,
		id : "0"
	} ]
});
COMBOBOX.OFFICE.LOADED = false;

COMBOBOX.OFFICE.INITIALCOMBOBOX = null;
COMBOBOX.getOfficeComboValues = function(controller, initialcombobox) {
	if (!COMBOBOX.OFFICE.LOADED) {
		controller.addUnloadedCombo();
		COMBOBOX.OFFICE.INITIALController = controller;
		COMBOBOX.OFFICE.INITIALCOMBOBOX = controller.id + initialcombobox;
		callWebservice(null, "getListDataAll",
				[ window.models.PROGRAM_RETURN_REC ], "OfficeService",
				COMBOBOX, "OFFICEServiceCallback");
	}
	return COMBOBOX.OFFICE;
};

COMBOBOX.OFFICEServiceCallback = function(data) {
	COMBOBOX.OFFICE.LOADED = true;
	COMBOBOX.OFFICE.remove("0");
	for (var i = 0; i < data.result.length; i++) {
		obj = {
			name : data.result[i].CITY,
			id : data.result[i].OFFICECODE
		};
		COMBOBOX.OFFICE.put(obj);
	}
	setComboboxDefaultValue(COMBOBOX.OFFICE);
	COMBOBOX.OFFICE.INITIALCOMBOBOX = null;
};



//
// Customers
//

COMBOBOX.CUSTOMER = new dojo.store.Memory({
	data : [ {
		name : LANGUAGE.LOADING_PLEASE_WAIT,
		id : "0"
	} ]
});
COMBOBOX.CUSTOMER.LOADED = false;

COMBOBOX.CUSTOMER.INITIALCOMBOBOX = null;
COMBOBOX.getCustomerValues = function(controller, initialcombobox) {
	if (!COMBOBOX.CUSTOMER.LOADED) {
		controller.addUnloadedCombo();
		COMBOBOX.CUSTOMER.INITIALController = controller;
		COMBOBOX.CUSTOMER.INITIALCOMBOBOX = controller.id + initialcombobox;
		callWebservice(null, "getListDataAll",
				[ window.models.PROGRAM_RETURN_REC ], "CUSTOMERService",
				COMBOBOX, "CUSTOMERServiceCallback");
	}
	return COMBOBOX.CUSTOMER;
};

COMBOBOX.CUSTOMERServiceCallback = function(data) {
	COMBOBOX.CUSTOMER.LOADED = true;
	COMBOBOX.CUSTOMER.remove("0");
	for (var i = 0; i < data.result.length; i++) {
		obj = {
			name : data.result[i].CUSTOMERNAME,
			id : data.result[i].CUSTOMERNUMBER
		};
		COMBOBOX.CUSTOMER.put(obj);
	}
	setComboboxDefaultValue(COMBOBOX.CUSTOMER);
	COMBOBOX.CUSTOMER.INITIALCOMBOBOX = null;
};

}